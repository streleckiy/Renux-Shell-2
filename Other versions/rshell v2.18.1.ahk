#SingleInstance off
#NoEnv
#MaxMem, 512
#NoTrayIcon

OnExit("Exitapp")

if (!A_IsCompiled) {
	IfWinActive, ahk_exe SCiTE.exe
	{
		t = %1%
		if (t != "fromscite") {
			Run, "%A_ScriptFullPath%" "fromscite"
			exitapp
		}
	}
}

SetBatchLines, -1
CoordMode, Mouse, Screen

; Основные
global hstdin, hstdout, pc_result, attached, no_suspend, no_attach, process_pid, CurrentProcessPath, cmd_text, attach_pid_console, adaptate_ide, server_version, toAsync, toAsyncVar, parserAllowParameterVoid, isGuideLearned, svclist, fromTestLocale
global version := "2.18.1"
global root := A_AppData "\by.strdev"
global config := A_AppData "\by.strdev\rshell_config.ini"
global host := "http://mrakw.eternalhost.info/renux"
global title := "Renux Shell"
global beta := 0
global started := 0
global exit_code := 0
global agree_eula := 0

if (!A_IsCompiled)
	beta := 1

; Определение системного диска + папка пользователя
SplitPath, A_WinDir,,,,, SYSDRIVE
userdir := SysDrive "\Users\" A_UserName
global userdir, sysdrive

; Для ProcessArgument()
global shell_mode := 0
global shell_file := ""
global hide_mode := 0
global ignore_errors := 0
global ignore_warnings := 0
global ignore_information := 0
global output_mode := "print"
global debug := 0
global gui := 0
global vkcmd_mode := 0
global vkcmd_pid := ""

; Для ProcessCMD()
global procvar, api, whr, response, ignore_err_vkapi, log, mainwid, perm_download, cmd_hks, shell_mline, shell_lines, debug_pause_menu, installed, start_transparent, _async, shell_from, http, note_for_update, trash_remove
global cmd_variables := []
global cmd_labels := []
global cmd_source := []
global cmd_hotkeys := []
global cmd_functions := []
global crypt_info := []
global addons := []
global tvs := []
global justgen := 0
global localeLoadedSuccessfully := 0

; Для перенаправления вывода
global allow_console_writing := 1
global console_output_to := ""

; Доп. текст для людей, которые обновились до этой версии
note_for_update := ""

; Для правильной работы файла локализации
global RSHELL_ERROR_TITLE
global RSHELL_ERROR_IF_SHELL_MODE
global RSHELL_ERROR_VISIBLE_TEXT
global RSHELL_ERROR_VISIBLE_TEXT_BT
global RSHELL_ERROR_BT_SEND_ERROR
global RSHELL_ERROR_BT_SEND_SUCCESS
global RSHELL_ERROR_ATTACHED_CLOSE
global RSHELL_CANT_LOAD_MODULE
global RSHELL_ONLY_DLL_AND_EXE_FILES
global RSHELL_FILE_DOES_NOT_FINDED
global RSHELL_ICON_IN_FILE_NOT_FINDED
global RSHELL_ICONS_IN_FILE_NOT_FINDED
global RSHELL_INVALID_TYPE_FILE
global RSHELL_INCORRECT_RESOURCE
global RSHELL_CANT_CREATE_DIR
global RSHELL_CANT_OPEN_FILE_TO_WRITE
global RSHELL_BLOCK_SHUTDOWN_TEXT
global RSHELL_CATCH_BLOCK_SHUTDOWN_TEXT
global RSHELL_SERVER_API_CATCH_ERROR
global RSHELL_SERVER_API_SERVER_RESPONSE_TO_DEBUG
global RSHELL_VK_API_CATCH_ERROR
global RSHELL_VK_API_SERVER_RESPONSE_TO_DEBUG
global RSHELL_VK_API_RESPONSE_IS_EMPTY
global RSHELL_JSON_TEXT_BAD_KEY_TO_DEBUG
global RSHELL_JSON_TEXT_BAD_VALUE
global RSHELL_JSON_TEXT_BAD_JSON_STRING_TO_DEBUG
global RSHELL_RUNCON_CANT_CREATE_PROCESS
global RSHELL_PARSER_NEED_WRITE_PARAMETERS
global RSHELL_WARNING_PARAM_HIDE
global RSHELL_WARNING_PARAM_AIDE
global RSHELL_WARNING_PARAM_NEW
global RSHELL_WARNING_PARAM_NOT_PROCESSED
global RSHELL_UNABLE_TO_EXECUTE_ERROR_BETA
global RSHELL_DEBUG_WARNING
global RSHELL_DEBUG_MENU_NAME
global RSHELL_DEBUG_GO_TO_LINE
global RSHELL_DEBUG_EXECUTE_CMD
global RSHELL_DEBUG_PAUSE_CMD
global RSHELL_DEBUG_LISTVIEW_TEXT
global RSHELL_DEBUG_GO_FUNC_SUCCESSFUL
global RSHELL_DEBUG_WRITE_NUM_OF_LINE
global RSHELL_DEBUG_GOTO_BUTTON_NAME
global RSHELL_DEBUG_GOTO_CENTER_TEXT
global RSHELL_DEBUG_GOTO_LINE_SUCCESSFUL
global RSHELL_DEBUG_WRITE_COMMAND_TO_EXECUTE
global RSHELL_DEBUG_BUTTON_EXECUTE_NAME
global RSHELL_DEBUG_EXECUTECMD_CENTER_TEXT
global RSHELL_PROCESSCMD_TO_DEBUG
global RSHELL_EXECUTECMD_DONT_HAVE_PERMISSION
global RSHELL_EXECUTECMD_START_PROCESS_MSG_TO_DEBUG
global RSHELL_EXECUTECMD_INVALID_CMD
global RSHELL_EXECUTECMD_INVALID_CMD_SHELL
global RSHELL_EXECUTECMD_INVALID_CMD_SHELL_MSGBOX
global RSHELL_EXECUTECMD_OPERATION_SUCCESSFUL
global RSHELL_RSAC_ERROR_WRITE_FILE_RSA
global RSHELL_RSAC_ERROR_WRITE_FILE_RS
global RSHELL_RSAC_ERROR_WRITE_FILE_TIP
global RSHELL_RSAC_SUCCESSFULL_INSATALLED
global RSHELL_VARNAME_TIME_DAY
global RSHELL_VARNAME_TIME_MONTH
global RSHELL_VARNAME_TIME_YEAR
global RSHELL_VARNAME_TIME_HOUR
global RSHELL_VARNAME_TIME_MIN
global RSHELL_VARNAME_TIME_SEC
global RSHELL_VARNAME_TIME_TICKCOUNT
global RSHELL_VARNAME_TIME_MMM
global RSHELL_VARNAME_TIME_MMMM
global RSHELL_VARNAME_TIME_DDD
global RSHELL_VARNAME_TIME_DDDD
global RSHELL_VARNAME_CONSOLE_RESULT
global RSHELL_VARNAME_CONSOLE_WORKINGDIR
global RSHELL_VARNAME_CONSOLE_SCRIPT
global RSHELL_VARNAME_CONSOLE_SPACE
global RSHELL_VARNAME_SYSTEM_CLIPBOARD
global RSHELL_VARNAME_SCREEN_WIDTH
global RSHELL_VARNAME_SCREEN_HEIGHT
global RSHELL_VARNAME_CONSOLE_VERSION
global RSHELL_VARNAME_CONSOLE_ADMIN
global RSHELL_VARNAME_CONSOLE_ROOTDIR
global RSHELL_VARNAME_CONSOLE_PATH
global RSHELL_VARNAME_CONSOLE_NAME
global RSHELL_VARNAME_CONSOLE_PATHDIR
global RSHELL_VARNAME_SYSTEM_APPDATA
global RSHELL_VARNAME_SYSTEM_APPDATACOMMON
global RSHELL_VARNAME_SYSTEM_DESKTOP
global RSHELL_VARNAME_SYSTEM_DESKTOPCOMMON
global RSHELL_VARNAME_SYSTEM_IS64BITOS
global RSHELL_VARNAME_SYSTEM_DOCUMENTS
global RSHELL_VARNAME_SYSTEM_PROGRAMFILES
global RSHELL_VARNAME_SYSTEM_PROGRAMS
global RSHELL_VARNAME_SYSTEM_PROGRAMSCOMMON
global RSHELL_VARNAME_SYSTEM_STARTMENU
global RSHELL_VARNAME_SYSTEM_STARTMENUCOMMON
global RSHELL_VARNAME_SYSTEM_STARTUP
global RSHELL_VARNAME_SYSTEM_STARTUPCOMMON
global RSHELL_VARNAME_SYSTEM_OSTYPE
global RSHELL_VARNAME_SYSTEM_OSVERSION
global RSHELL_VARNAME_SYSTEM_USERNAME
global RSHELL_VARNAME_SYSTEM_COMPUTERNAME
global RSHELL_VARNAME_ENVIRONMENT
global RSHELL_CATCH_SET_VARIABLE_WARNING
global RSHELL_ARRAY_CANT_BE_MULTIDIMENSIONAL
global RSHELL_VARIABLE_NAME_CONTAINS_INVALID_CHARACTERS
global RSHELL_ARRAY_NAME_CONTAINS_INVALID_CHARACTERS
global RSHELL_ATTACH_WARNING_TITLE
global RSHELL_ATTACH_WARNING_TEXT
global RSHELL_WOUTPUT_TEXT_TO_DEBUG
global RSHELL_WARNING_MSGBOX_FORMAT
global RSHELL_WARNING_CONSOLE_FORMAT
global RSHELL_INFORMATION_MSGBOX_FORMAT
global RSHELL_INFORMATION_CONSOLE_FORMAT
global RSHELL_ERROR_MSGBOX_FORMAT
global RSHELL_ERROR_CONSOLE_FORMAT
global RSHELL_QUESTION_CONSOLE_FORMAT
global RSHELL_PROGRESS_CONSOLE_FORMAT
global RSHELL_DOWNLOADER_FILE_EXIST
global RSHELL_DOWNLOADER_GETTING_INFO
global RSHELL_DOWNLOADER_INFO_GET_ERR
global RSHELL_DOWNLOADER_QUESTION_DOWNLOAD
global RSHELL_DOWNLOADER_BYTE_WORD
global RSHELL_DOWNLOADER_ATTEMPT
global RSHELL_DOWNLOADER_ATTEMPT_UNSUCCESSFUL
global RSHELL_DOWNLOADER_DOWNLOADED_INFO
global RSHELL_DOWNLOADER_FILE_CORRUPTED
global RSHELL_DOWNLOADER_FILE_TRYAGAIN
global RSHELL_DOWNLOADER_DOWNLOADED_INFO_WITHOUT
global RSHELL_FILESIZE_ERROR_TEXT
global RSHELL_FILESIZE_UNABLE_EXTRACT_ERROR_TEXT
global RSHELL_INSTALLER_DESC
global RSHELL_INSTALLER_START_LINK
global RSHELL_INSTALLER_FAIL_SETUP
global RSHELL_LAUNCHER_INVALID_NAME
global RSHELL_LAUNCHER_NOT_FINDED
global RSHELL_LAUNCHER_INIT_START
global RSHELL_LAUNCHER_CHECKING_UPDATES
global RSHELL_LAUNCHER_UNABLE_GET_INFO
global RSHELL_LAUNCHER_UPDATING_PREFIX
global RSHELL_LAUNCHER_UPDATING_PREFIX_FILE_CORRUPTED
global RSHELL_LAUNCHER_UPDATING_PREFIX_PROCESS
global RSHELL_LAUNCHER_STARTING
global RSHELL_LAUNCHER_START_FAIL
global RSHELL_LAUNCHER_ATTEMPT_WORD
global RSHELL_EULA_CHECKBOX_TEXT1
global RSHELL_EULA_TITLE
global RSHELL_EULA_BUTTON_NEXT
global RSHELL_FROM_UPDATING_TEXT
global RSHELL_DEBUG_MODE_ENABLED_TEXT
global RSHELL_FIRST_START_TEXT
global RSHELL_WARNING_OSVER_NOT_10
global RSHELL_WARNING_ANOTHER_VER
global RSHELL_START_PROG_WITH_LINK_ON_DESKTOP
global RSHELL_LINK_SUCCESSFUL_CREATED
global RSHELL_REINSTALL_PROGRAM_TEXT
global RSHELL_START_CMD_EXECUTED_TO_DEBUG
global RSHELL_UNABLE_TO_GET_SERVER_INFO
global RSHELL_RELEASED_NEW_VERSION
global RSHELL_PROCESS_OF_UPDATING
global RSHELL_RELEASED_NEW_VERSION_BUT_NOT_INSTALLED
global RSHELL_UNABLE_TO_CHECK_ACTUAL_VERSION
global RSHELL_COMPLETE_TUTORIAL
global RSHELL_CMD_NOT_EXIST_IN_DOCS
global RSHELL_CONHOST_KILLED
global RSHELL_TO_ANALYSING_DEBUG
global RSHELL_UNABLE_OPEN_DOCUMENTATION_ASYNC
global RSHELL_ARRAY_TOTALLY_WORD
global RSHELL_LOCALIZED_WORD_MS
global RSHELL_ADMINISTRATOR_WORD
global RSHELL_EXECUTED_OTHER_LANG
global RSHELL_DOCUMENTATION_WINDOW_TITLE
global RSHELL_TV_START
global RSHELL_TV_START_INFO
global RSHELL_TV_START_TUTORIAL
global RSHELL_TV_VAR
global RSHELL_TV_MAIN
global RSHELL_TV_MAIN_HOTKEYS
global RSHELL_TV_MAIN_MACROCOMMANDS
global RSHELL_TV_MAIN_KEYLIST
global RSHELL_TV_MAIN_SCRIPTS
global RSHELL_TV_MAIN_VARIABLES
global RSHELL_TV_ADDONS
global RSHELL_TV_ADDONS_QUICKSTART
global RSHELL_TV_ADDONS_CREATING
global RSHELL_TV_ADDONS_COMPILING
global RSHELL_TV_ADDONS_DELETE
global RSHELL_TV_CMDS
global RSHELL_TV_CMDS_CONSOLE
global RSHELL_TV_CMDS_CNSTCT
global RSHELL_TV_CMDS_KEYBOARD
global RSHELL_TV_CMDS_MOUSE
global RSHELL_TV_CMDS_REG
global RSHELL_TV_CMDS_DIALOG
global RSHELL_TV_CMDS_STRINGS
global RSHELL_TV_CMDS_PROCESSES
global RSHELL_TV_CMDS_SOUND
global RSHELL_TV_CMDS_DISPLAY
global RSHELL_TV_CMDS_WIN
global RSHELL_TV_CMDS_WIN_ELEM
global RSHELL_TV_CMDS_DIR
global RSHELL_TV_CMDS_VOICESP
global RSHELL_TV_CMDS_NETWORK
global RSHELL_TV_CMDS_FILE
global RSHELL_TV_CMDS_FILE_ATTR
global RSHELL_TV_CMDS_ENV
global RSHELL_TV_ABOUTPROG
global RSHELL_TV_UPDATELIST
global RSHELL_TV_UPDATELIST_WORD_VERSION
global RSHELL_TV_UPDATELIST_WORD_FROM
global RSHELL_TV_ABOUTPROG_TEXT
global RSHELL_ABOUTPROG_TEXT_1
global RSHELL_ABOUTPROG_WORD_DEVELOPED
global RSHELL_ABOUTPROG_TEXT_2
global RSHELL_ABOUTPROG_WINDOW_TITLE
global RSHELL_ABOUTPROG_BUTTON_CLOSE
global RSHELL_COMMAND_NAME_DOWNLOADWITHOUTASK
global RSHELL_COMMAND_NAME_END
global RSHELL_COMMAND_NAME_DOCUMENTATION
global RSHELL_COMMAND_NAME_PROGRAM
global RSHELL_COMMAND_NAME_ADDON
global RSHELL_COMMAND_NAME_ADZ
global RSHELL_COMMAND_NAME_ADMIN
global RSHELL_COMMAND_NAME_UPDATELIST
global RSHELL_COMMAND_NAME_ASYNC
global RSHELL_COMMAND_NAME_INPUT
global RSHELL_COMMAND_NAME_OUTPUT
global RSHELL_COMMAND_NAME_OUTPUTL
global RSHELL_COMMAND_NAME_OUTCON
global RSHELL_COMMAND_NAME_TITLE
global RSHELL_COMMAND_NAME_WOUTPUT
global RSHELL_COMMAND_NAME_INFO
global RSHELL_COMMAND_NAME_CONSOLE
global RSHELL_COMMAND_NAME_TUTORIAL
global RSHELL_COMMAND_NAME_PAUSE
global RSHELL_COMMAND_NAME_TRANSPARENT
global RSHELL_COMMAND_NAME_DO
global RSHELL_COMMAND_NAME_SVC
global RSHELL_COMMAND_NAME_COMPILE
global RSHELL_COMMAND_NAME_CMDLIST
global RSHELL_COMMAND_NAME_DOCS
global RSHELL_COMMAND_NAME_LABEL
global RSHELL_COMMAND_NAME_GOTO
global RSHELL_COMMAND_NAME_FUNC
global RSHELL_COMMAND_NAME_KEYBOARD_INPUT
global RSHELL_COMMAND_NAME_HKEYS
global RSHELL_COMMAND_NAME_WRITE
global RSHELL_COMMAND_NAME_WRITEF
global RSHELL_COMMAND_NAME_MOUSE_MOVE
global RSHELL_COMMAND_NAME_REG_WRITE
global RSHELL_COMMAND_NAME_REG_READ
global RSHELL_COMMAND_NAME_REG_DELETE
global RSHELL_COMMAND_NAME_DIALOG_INPUTBOX
global RSHELL_COMMAND_NAME_MSGBOX
global RSHELL_COMMAND_NAME_JSON
global RSHELL_COMMAND_NAME_ARR_UNIT
global RSHELL_COMMAND_NAME_VAR
global RSHELL_COMMAND_NAME_STRING_UNUNIT
global RSHELL_COMMAND_NAME_STRING_REPLACE
global RSHELL_COMMAND_NAME_EXIT
global RSHELL_COMMAND_NAME_WAIT_TIME
global RSHELL_COMMAND_NAME_WAIT_KEY
global RSHELL_COMMAND_NAME_CMD
global RSHELL_COMMAND_NAME_PROCESS
global RSHELL_COMMAND_NAME_PROCESS_SEARCH
global RSHELL_COMMAND_NAME_POWERSHELL
global RSHELL_COMMAND_NAME_RANDOM
global RSHELL_COMMAND_NAME_RESTART
global RSHELL_COMMAND_NAME_SESSION
global RSHELL_COMMAND_NAME_SOUND_SET
global RSHELL_COMMAND_NAME_SOUND_BEEP
global RSHELL_COMMAND_NAME_SOUND_GET
global RSHELL_COMMAND_NAME_SOUND_PLAY
global RSHELL_COMMAND_NAME_DISPLAY
global RSHELL_COMMAND_NAME_TOOLTIP
global RSHELL_COMMAND_NAME_SCREENSHOT
global RSHELL_COMMAND_NAME_STEXTON
global RSHELL_COMMAND_NAME_STEXTOFF
global RSHELL_COMMAND_NAME_TRAYTIP
global RSHELL_COMMAND_NAME_BRIGHTNESS
global RSHELL_COMMAND_NAME_WIN_ELEM
global RSHELL_COMMAND_NAME_WIN_ELEM_MOVE
global RSHELL_COMMAND_NAME_WIN_ELEM_VALUE
global RSHELL_COMMAND_NAME_WIN_ELEM_WRITE
global RSHELL_COMMAND_NAME_WIN_WAIT
global RSHELL_COMMAND_NAME_WIN_WAIT_ACTIVE
global RSHELL_COMMAND_NAME_WIN_WAIT_DEACTIVE
global RSHELL_COMMAND_NAME_WIN_WAIT_CLOSE
global RSHELL_COMMAND_NAME_WIN_ACTIVATE
global RSHELL_COMMAND_NAME_WIN_RESTORE
global RSHELL_COMMAND_NAME_WIN_TITLE
global RSHELL_COMMAND_NAME_WIN_CLOSE
global RSHELL_COMMAND_NAME_WIN_SHOW
global RSHELL_COMMAND_NAME_WIN_MAXIMIZE
global RSHELL_COMMAND_NAME_WIN_MINIMIZE
global RSHELL_COMMAND_NAME_WIN_HIDE
global RSHELL_COMMAND_NAME_VOICESP_VOLUME
global RSHELL_COMMAND_NAME_VOICESP_SAY
global RSHELL_COMMAND_NAME_VOICESP_SPEED
global RSHELL_COMMAND_NAME_VKAPI
global RSHELL_COMMAND_NAME_VKAPI_RESET
global RSHELL_COMMAND_NAME_REQUEST
global RSHELL_COMMAND_NAME_POST
global RSHELL_COMMAND_NAME_CREATEFORMDATA
global RSHELL_COMMAND_NAME_NETWORK_SCAN
global RSHELL_COMMAND_NAME_ATTR_GET
global RSHELL_COMMAND_NAME_ATTR_SET
global RSHELL_COMMAND_NAME_CD
global RSHELL_COMMAND_NAME_CD_DOT
global RSHELL_COMMAND_NAME_DIR
global RSHELL_COMMAND_NAME_DRIVE
global RSHELL_COMMAND_NAME_DRIVE_GET
global RSHELL_COMMAND_NAME_DRIVE_GET_MEMORY
global RSHELL_COMMAND_NAME_INI_WRITE
global RSHELL_COMMAND_NAME_INI_READ
global RSHELL_COMMAND_NAME_INI_DELETE
global RSHELL_COMMAND_NAME_ENC_BASE64
global RSHELL_COMMAND_NAME_RECYCLE
global RSHELL_COMMAND_NAME_RECYCLE_EMPTY
global RSHELL_COMMAND_NAME_PROG
global RSHELL_COMMAND_NAME_DOWNLOAD
global RSHELL_COMMAND_NAME_FILE_TIME_SET
global RSHELL_COMMAND_NAME_FILE_TIME_GET
global RSHELL_COMMAND_NAME_FILE_WRITE_RAW
global RSHELL_COMMAND_NAME_FILE_SEARCH
global RSHELL_COMMAND_NAME_FILE_ENCODING
global RSHELL_COMMAND_NAME_FILE_MOVE
global RSHELL_COMMAND_NAME_FILE_MOVE_DIR
global RSHELL_COMMAND_NAME_FILE_GET
global RSHELL_COMMAND_NAME_FILE_ADD_LABEL
global RSHELL_COMMAND_NAME_FILE_GET_LABEL
global RSHELL_COMMAND_NAME_FILE_READ
global RSHELL_COMMAND_NAME_FILE_READ_RAW
global RSHELL_COMMAND_NAME_FILE_READ_LINE
global RSHELL_COMMAND_NAME_FILE_APPEND
global RSHELL_COMMAND_NAME_FILE_CREATE_DIR
global RSHELL_COMMAND_NAME_FILE_DELETE
global RSHELL_COMMAND_NAME_FILE_DELETE_DIR
global RSHELL_COMMAND_NAME_FILE_COPY
global RSHELL_COMMAND_NAME_FILE_COPY_DIR
global RSHELL_COMMAND_NAME_FILE_SIZE
global RSHELL_COMMAND_NAME_FILE_OUTPUT
global RSHELL_COMMAND_NAME_ENV_UPDATE
global RSHELL_COMMAND_NAME_ENV_SET
global RSHELL_COMMAND_NAME_ENV_GET
global RSHELL_COMMAND_NAME_HIDED_IF
global RSHELL_COMMAND_NAME_HIDED_LOOP
global RSHELL_COMMAND_NAME_HIDED_FORLOOP
global RSHELL_DOCS_START_INTRO
global RSHELL_LEARN_TEXT_PREFIX_LEARN_WORD
global RSHELL_LEARN_TEXT_TITLE
global RSHELL_LEARN_TEXT_SUBTITLE
global RSHELL_LEARN_TEXT_BUTTON_NEXT
global RSHELL_LEARN_TEXT_PAGE_1
global RSHELL_LEARN_TEXT_PAGE_2
global RSHELL_LEARN_TEXT_FIRST_STEPS
global RSHELL_LEARN_TEXT_PAGE_3
global RSHELL_LEARN_TEXT_SYNTAX_AND_FIRST_COMMANDS
global RSHELL_LEARN_TEXT_PAGE_4
global RSHELL_LEARN_TEXT_NEED_TEXT_4
global RSHELL_LEARN_TEXT_IF_WRITED
global RSHELL_LEARN_TEXT_FIRST_COMMANDS
global RSHELL_LEARN_TEXT_PROCESS_CMD
global RSHELL_LEARN_TEXT_SYNTAX_FEATURES_1
global RSHELL_LEARN_TEXT_PAGE_5
global RSHELL_LEARN_TEXT_SYNTAX_FEATURES_2
global RSHELL_LEARN_TEXT_PAGE_6
global RSHELL_LEARN_TEXT_SYNTAX_FEATURES_3
global RSHELL_LEARN_TEXT_PAGE_7
global RSHELL_LEARN_TEXT_SYNTAX_FEATURES_4
global RSHELL_LEARN_TEXT_PAGE_8
global RSHELL_LEARN_TEXT_SYNTAX_PRACTICE
global RSHELL_LEARN_TEXT_PAGE_9
global RSHELL_LEARN_TEXT_PAGE_9_SUBTITLE_FORMAT
global RSHELL_LEARN_TEXT_AUTOWRITE_PAGE_9
global RSHELL_LEARN_TEXT_PAGE_10
global RSHELL_LEARN_TEXT_FORMAT_TOOLTIP
global RSHELL_LEARN_TEXT_PAGE_11
global RSHELL_LEARN_TEXT_USAGE_TEXT
global RSHELL_LEARN_TEXT_BUILTIN_VARS_1
global RSHELL_LEARN_TEXT_BUILTIN_VARS_2
global RSHELL_LEARN_TEXT_PAGE_12
global RSHELL_LEARN_TEXT_PAGE_13
global RSHELL_LEARN_TEXT_USEFUL_SYNTAX_FUNCTIONS
global RSHELL_LEARN_TEXT_PAGE_14
global RSHELL_LEARN_TEXT_ESCAPE_SEQUENCES
global RSHELL_LEARN_TEXT_PAGE_15
global RSHELL_LEARN_TEXT_PAGE_BATCH_FILES
global RSHELL_LEARN_TEXT_PAGE_16
global RSHELL_LEARN_TEXT_COMMANDS_FOR_BATCH_FILES
global RSHELL_LEARN_TEXT_PAGE_17
global RSHELL_LEARN_TEXT_LOOPS_1
global RSHELL_LEARN_TEXT_PAGE_18
global RSHELL_LEARN_TEXT_LOOPS_2
global RSHELL_LEARN_TEXT_PAGE_19
global RSHELL_LEARN_TEXT_LOOPS_3
global RSHELL_LEARN_TEXT_PAGE_20
global RSHELL_LEARN_TEXT_ARRAY_1
global RSHELL_LEARN_TEXT_PAGE_21
global RSHELL_LEARN_TEXT_ARRAY_2
global RSHELL_LEARN_TEXT_PAGE_22
global RSHELL_LEARN_TEXT_LIST_OF_VARS_AND_ARRAYS
global RSHELL_LEARN_TEXT_PAGE_23
global RSHELL_LEARN_TEXT_PRACTICE_LOOPS
global RSHELL_LEARN_TEXT_PAGE_24
global RSHELL_LEARN_TEXT_NEED_TEXT_PAGE_24_LOW
global RSHELL_LEARN_TEXT_PRACTICE_LOOP_LOOP1_TOOLTIP
global RSHELL_LEARN_TEXT_DONT_USE_COMMENTS_IN_PRACTICE
global RSHELL_LEARN_TEXT_ALGORITHM_IS_EMPTY
global RSHELL_LEARN_TEXT_WAIT_REWRITING_FILE
global RSHELL_LEARN_TEXT_PREPARING_TO_EXECUTE
global RSHELL_LEARN_TEXT_ERROR_WORD
global RSHELL_LEARN_TEXT_CANT_CHECK_PRACTICE
global RSHELL_LEARN_TEXT_WAIT_PROCESS_CHECK_ALGORITHM
global RSHELL_LEARN_TEXT_LOG_IS_EMPTY
global RSHELL_LEARN_TEXT_ERROR_PAGE_24_1
global RSHELL_LEARN_TEXT_COMPLETE_PAGE_24
global RSHELL_LEARN_TEXT_ERROR_PAGE_24_2
global RSHELL_LEARN_TEXT_FORLOOP_1
global RSHELL_LEARN_TEXT_PAGE_25
global RSHELL_LEARN_TEXT_FORLOOP_2
global RSHELL_LEARN_TEXT_PAGE_26
global RSHELL_LEARN_TEXT_PRACTICE_FORLOOP
global RSHELL_LEARN_TEXT_PAGE_27
global RSHELL_LEARN_TEXT_FORLOOP_NAME_OF_ARRAY
global RSHELL_LEARN_TEXT_FORLOOP_TOOLTIP_1_NEED_WRITE
global RSHELL_LEARN_TEXT_FORLOOP_TOOLTIP_1_TEXT
global RSHELL_LEARN_TEXT_FORLOOP_TOOLTIP_2_NEED_WRITE
global RSHELL_LEARN_TEXT_FORLOOP_TOOLTIP_2_TEXT
global RSHELL_LEARN_TEXT_FORLOOP_TOOLTIP_NEED_WRITE
global RSHELL_LEARN_TEXT_SUCCESSFUL_TEXT
global RSHELL_LEARN_TEXT_PAGE_28
global RSHELL_LEARN_TEXT_WAIT_EXECUTING_ALGORITHM
global RSHELL_LEARN_TEXT_COMMENTS_IN_ALORIGHM_IN_BATCH_FILES
global RSHELL_LEARN_TEXT_PAGE_29
global RSHELL_LEARN_TEXT_HKEYS_IN_BATCH_FILES
global RSHELL_LEARN_TEXT_PAGE_30
global RSHELL_LEARN_TEXT_EMUL_KEYBOARD_IN_BATCH_FILES
global RSHELL_LEARN_TEXT_PAGE_31
global RSHELL_LEARN_TEXT_NOTES_ABOUT_VARS_1
global RSHELL_LEARN_TEXT_PAGE_32
global RSHELL_LEARN_TEXT_NOTES_ABOUT_VARS_2
global RSHELL_LEARN_TEXT_PAGE_33
global RSHELL_LEARN_TEXT_LOGIC_OPERATIONS_1
global RSHELL_LEARN_TEXT_PAGE_34
global RSHELL_LEARN_TEXT_LOGIC_OPERATIONS_2
global RSHELL_LEARN_TEXT_PAGE_35
global RSHELL_LEARN_TEXT_LOGIC_OPERATIONS_3
global RSHELL_LEARN_TEXT_PAGE_36
global RSHELL_LEARN_TEXT_RUN_PROGRAMS_AND_LINKS_1
global RSHELL_LEARN_TEXT_PAGE_37
global RSHELL_LEARN_TEXT_RUN_PROGRAMS_AND_LINKS_2
global RSHELL_LEARN_TEXT_PAGE_38
global RSHELL_LEARN_TEXT_NOTES_ABOUT_COMMANDS_AND_FUNCS_1
global RSHELL_LEARN_TEXT_PAGE_39
global RSHELL_LEARN_TEXT_NOTES_ABOUT_COMMANDS_AND_FUNCS_2
global RSHELL_LEARN_TEXT_PAGE_40
global RSHELL_LEARN_TEXT_CONCLUSION
global RSHELL_LEARN_TEXT_PAGE_41
global RSHELL_LEARN_TEXT_ERROR_TEXT1
global RSHELL_LEARN_TEXT_ERROR_TEXT2
global RSHELL_VARINFO_TIME_DD
global RSHELL_VARINFO_TIME_MONTH
global RSHELL_VARINFO_TIME_YEAR
global RSHELL_VARINFO_TIME_HOUR
global RSHELL_VARINFO_TIME_MIN
global RSHELL_VARINFO_TIME_SEC
global RSHELL_VARINFO_TIME_TICKCOUNT
global RSHELL_VARINFO_TIME_MMM
global RSHELL_VARINFO_TIME_MMMM
global RSHELL_VARINFO_TIME_DDD
global RSHELL_VARINFO_TIME_DDDD
global RSHELL_VARINFO_CONSOLE_VERSION
global RSHELL_VARINFO_CONSOLE_ADMIN
global RSHELL_VARINFO_CONSOLE_RESULT
global RSHELL_VARINFO_CONSOLE_FOLDER
global RSHELL_VARINFO_CONSOLE_WORKDIR
global RSHELL_VARINFO_CONSOLE_PATH_DIR
global RSHELL_VARINFO_CONSOLE_SCRIPT
global RSHELL_VARINFO_CONSOLE_PATH
global RSHELL_VARINFO_CONSOLE_NAME
global RSHELL_VARINFO_CONSOLE_ENV
global RSHELL_VARINFO_SYSTEM_APPDATA
global RSHELL_VARINFO_SYSTEM_CAPPDATA
global RSHELL_VARINFO_SYSTEM_DESKTOP
global RSHELL_VARINFO_SYSTEM_CDESKTOP
global RSHELL_VARINFO_SYSTEM_64BITOS
global RSHELL_VARINFO_SYSTEM_DOCUMENTS
global RSHELL_VARINFO_SYSTEM_PROGFILES
global RSHELL_VARINFO_SYSTEM_PROGRAMS
global RSHELL_VARINFO_SYSTEM_CPROGRAMS
global RSHELL_VARINFO_SYSTEM_STARTMENU
global RSHELL_VARINFO_SYSTEM_CSTARTMENU
global RSHELL_VARINFO_SYSTEM_STARTUP
global RSHELL_VARINFO_SYSTEM_CSTARTUP
global RSHELL_VARINFO_SYSTEM_OSTYPE
global RSHELL_VARINFO_SYSTEM_VERSION
global RSHELL_VARINFO_SYSTEM_USERNAME
global RSHELL_VARINFO_SYSTEM_COMPUTER
global RSHELL_VARINFO_SYSTEM_CLIPBOARD
global RSHELL_VARINFO_SCREEN_WIDTH
global RSHELL_VARINFO_SCREEN_HEIGHT
global RSHELL_VARINFO_CONSOLE_SPACE
global RSHELL_MAININFO_HOTKEYS1
global RSHELL_MAININFO_HOTKEYS2
global RSHELL_MAININFO_CREATING_MACROCMDS_KEYBOARD_MOUSE
global RSHELL_MAININFO_MACROCOMMANDS
global RSHELL_MAININFO_LIST_OF_KEYS_AND_MOUSE_BUTTON
global RSHELL_MAININFO_LOKAMB_TEXT1
global RSHELL_MAININFO_LOKAMB_TEXT2
global RSHELL_MAININFO_LOKAMB_TEXT3
global RSHELL_MAININFO_LOKAMB_TEXT4
global RSHELL_MAININFO_SCRIPT_TEXT1
global RSHELL_MAININFO_SCRIPT_TEXT2
global RSHELL_MAININFO_VARIABLES_TEXT1
global RSHELL_MAININFO_VARIABLES_TEXT2
global RSHELL_MAININFO_VARIABLES_TEXT3
global RSHELL_ADDONSINFO_QUICKSTART_TEXT
global RSHELL_ADDONSINFO_CREATING_TEXT1
global RSHELL_ADDONSINFO_CREATING_TEXT2
global RSHELL_ADDONSINFO_COMPILING_TEXT
global RSHELL_ADDONSINFO_DELETE_TEXT
global RSHELL_UPDINFO_2_0
global RSHELL_UPDINFO_2_1
global RSHELL_UPDINFO_2_2
global RSHELL_UPDINFO_2_3
global RSHELL_UPDINFO_2_4
global RSHELL_UPDINFO_2_5
global RSHELL_UPDINFO_2_6
global RSHELL_UPDINFO_2_7
global RSHELL_UPDINFO_2_8
global RSHELL_UPDINFO_2_9
global RSHELL_UPDINFO_2_9_1
global RSHELL_UPDINFO_2_10
global RSHELL_UPDINFO_2_11
global RSHELL_UPDINFO_2_12
global RSHELL_UPDINFO_2_13
global RSHELL_UPDINFO_2_14
global RSHELL_UPDINFO_2_15
global RSHELL_UPDINFO_2_16
global RSHELL_UPDINFO_2_16_1
global RSHELL_UPDINFO_2_16_2
global RSHELL_UPDINFO_2_16_3
global RSHELL_UPDINFO_2_16_4
global RSHELL_UPDINFO_2_16_5
global RSHELL_UPDINFO_2_17
global RSHELL_UPDINFO_2_18
global RSHELL_UPDINFO_2_18_1
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX_1
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX_2
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLES_PREFIX
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTES_PREFIX
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOSE_RESULT_TEXT2
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT3
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT4
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_CMD_WANT_PERMISSION_ENCHANCEMENT
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_LAUNCH_PARAMETER_LIST_PREFIX
global RSHELL_FORMAT_COMMAND_DOCUMENTATION_PARAMETERS_PREFIX
global RSHELL_TEXT_FILE_NOT_FINDED
global RSHELL_TEXT_CANT_WRITE_FILE
global RSHELL_TEXT_USE_TO_VIEW_DETAILS_IN_DOCS_PREFIX
global RSHELL_TEXT_DONT_HAVE_PERMISSIONS_TO_USE_COMMAND
global RSHELL_TEXT_WORKING_ONLY_IN_BATCH_MODE
global RSHELL_TEXT_THIS_COMMAND_WORKING_ONLY_IN_BATCH_MODE
global RSHELL_TEXT_UNKNOWN_WORD
global RSHELL_TEXT_REPLACE_WORD_OR
global RSHELL_COMMAND_DOCUMENTATION_ADDON_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_ADDON_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_ADDON_NOTES
global RSHELL_COMMAND_INTERNAL_ADDON_TEXT1
global RSHELL_COMMAND_INTERNAL_ADDON_TEXT2
global RSHELL_COMMAND_INTERNAL_ADDON_TEXT3
global RSHELL_COMMAND_INTERNAL_ADDON_TEXT4
global RSHELL_COMMAND_INTERNAL_ADDON_TEXT5
global RSHELL_COMMAND_INTERNAL_ADDON_TEXT6
global RSHELL_COMMAND_INTERNAL_ADDON_ACTION_INSTALL
global RSHELL_COMMAND_INTERNAL_ADDON_ACTION_UNINSTALL
global RSHELL_COMMAND_INTERNAL_ADDON_ACTION_COMPILE
global RSHELL_COMMAND_INTERNAL_ADDON_ACTION_EXIT
global RSHELL_COMMAND_INTERNAL_ADDON_ACTION_DELETE_BY_FILE_NAME
global RSHELL_COMMAND_INTERNAL_ADDON_ACTION_ENTER_PATH_TO_FUTURE_FILE
global RSHELL_COMMAND_INTERNAL_ADDON_ENTER_PATH_TO_FILE
global RSHELL_COMMAND_INTERNAL_ADDON_SUCCESSFUL_COMPILED
global RSHELL_COMMAND_INTERNAL_ADDON_TEXT7
global RSHELL_COMMAND_INTERNAL_ADDON_TEXT8
global RSHELL_COMMAND_INTERNAL_ADDON_TEXT9_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_SHUTDOWN_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_SHUTDOWN_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_SHUTDOWN_NOTES
global RSHELL_COMMAND_DOCUMENTATION_SHUTDOWN_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_LABEL_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_LABEL_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_LABEL_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_LABEL_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_LABEL_TEXT2
global RSHELL_COMMAND_DOCUMENTATION_LABEL_TEXT3
global RSHELL_COMMAND_DOCUMENTATION_HKEYS_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_HKEYS_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_HKEYS_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_HKEYS_TEXT2
global RSHELL_COMMAND_DOCUMENTATION_HKEYS_EXAMPLE
global RSHELL_COMMAND_INTERNAL_HKEYS_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_END_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_END_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_END_EXAMPLE
global RSHELL_COMMAND_INTERNAL_END_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_GOTO_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_GOTO_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_GOTO_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_GOTO_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_GOTO_TEXT2
global RSHELL_COMMAND_INTERNAL_INFORMATION_TEXT
global RSHELL_COMMAND_INTERNAL_INFORMATION_TEXT_TO_DEBUG_PREFIX
global RSHELL_COMMAND_INTERNAL_INFORMATION_TEXT_BETA
global RSHELL_COMMAND_DOCUMENTATION_INFORMATION_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_INFORMATION_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_INFORMATION_SYNTAX1
global RSHELL_COMMAND_DOCUMENTATION_INFORMATION_SYNTAX2
global RSHELL_COMMAND_DOCUMENTATION_CONSOLE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_CONSOLE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_CONSOLE_PARAMS
global RSHELL_COMMAND_DOCUMENTATION_CONSOLE_EXAMPLES
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT1
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT2
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT3_PREFIX
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT4_PREFIX
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT5
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT6
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT7
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT8
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT9
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT10
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT11
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT12
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT13
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT14
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT15
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT16
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT17
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT18
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT19
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT20
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT21
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT22
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT23_PREFIX
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT24
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT25
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT26
global RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT27
global RSHELL_COMMAND_DOCUMENTATION_DOCS_SYNTAX1
global RSHELL_COMMAND_DOCUMENTATION_DOCS_SYNTAX2
global RSHELL_COMMAND_DOCUMENTATION_DOCS_TEXT
global RSHELL_COMMAND_DOCUMENTATION_DOCS_NOTES
global RSHELL_COMMAND_DOCUMENTATION_DOCS_EXAMPLES
global RSHELL_COMMAND_DOCUMENTATION_FUNC_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FUNC_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FUNC_NOTE
global RSHELL_COMMAND_DOCUMENTATION_FUNC_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FUNC_EXAMPLE_SHORT
global RSHELL_COMMAND_DOCUMENTATION_FUNC_NOTE_LONG
global RSHELL_COMMAND_DOCUMENTATION_FUNC_EXAMPLE_PART_OF_SCRIPT
global RSHELL_COMMAND_DOCUMENTATION_FUNC_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_FUNC_TEXT2
global RSHELL_COMMAND_DOCUMENTATION_ADZ_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_ADZ_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_ADZ_LAUNCH_PARAM_LIST
global RSHELL_COMMAND_DOCUMENTATION_ADZ_LAUNCH_PARAM_LIST_TEXT
global RSHELL_COMMAND_DOCUMENTATION_ADZ_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_ADZ_TEXT
global RSHELL_COMMAND_DOCUMENTATION_ADMIN_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_ADMIN_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_ADMIN_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_ADMIN_ERROR_TEXT
global RSHELL_COMMAND_DOCUMENTATION_INPUT_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_INPUT_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_INPUT_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_OUTPUT_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_OUTPUT_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_OUTPUT_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_TUTORIAL_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_TUTORIAL_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_TUTORIAL_NOTE
global RSHELL_COMMAND_INTERNAL_TUTORIAL_ERROR
global RSHELL_COMMAND_DOCUMENTATION_UPDATELIST_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_UPDATELIST_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_ASYNC_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_ASYNC_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_ASYNC_NOTE
global RSHELL_COMMAND_DOCUMENTATION_ASYNC_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_OUTPUTL_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_OUTPUTL_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_OUTPUTL_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_OUTCON_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_OUTCON_EXAMPLE
global RSHELL_COMMAND_INTERNAL_OUTCON_ERROR
global RSHELL_COMMAND_DOCUMENTATION_OUTCON_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_OUTCON_PARAMETERS
global RSHELL_COMMAND_DOCUMENTATION_TITLE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_TITLE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_TITLE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_OUTPUT_PARAM_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_OUTPUT_PARAM
global RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_NOTE
global RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_EXAMPLE_OUTPUT_TO_VARIABLE_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_EXAMPLE_OUTPUT_TO_VARIABLE
global RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_PAUSE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_PAUSE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_TRANSPARENT_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_TRANSPARENT_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_TRANSPARENT_EXAMPLE
global RSHELL_COMMAND_INTERNAL_TRANSPARENT_TEXT1
global RSHELL_COMMAND_INTERNAL_TRANSPARENT_TEXT2
global RSHELL_COMMAND_DOCUMENTATION_DO_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_DO_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_DO_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_DO_PARAMETERS
global RSHELL_COMMAND_DOCUMENTATION_SVC_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_SVC_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_SVC_NOTE
global RSHELL_COMMAND_DOCUMENTATION_SVC_EXAMPLE
global RSHELL_COMMAND_INTERNAL_SVC_WORD_NUMBER
global RSHELL_COMMAND_INTERNAL_SVC_NAME_OF_SERVICE_TEXT
global RSHELL_COMMAND_INTERNAL_SVC_WORD_DESCRIPTION
global RSHELL_COMMAND_INTERNAL_SVC_TEXT
global RSHELL_SERVICE_PERMISSIONS_COMMAND_NAME
global RSHELL_SERVICE_PERMISSIONS_COMMAND_DESCRIPTION
global RSHELL_SERVICE_PERMISSIONS_COMMAND_STARTED_TEXT
global RSHELL_SERVICE_PERMISSIONS_COMMAND_TEXT1
global RSHELL_SERVICE_PERMISSIONS_COMMAND_TEXT2
global RSHELL_SERVICE_PERMISSIONS_COMMAND_TEXT3
global RSHELL_SERVICE_PERMISSIONS_COMMAND_TEXT_ALL_COMMANDS_ALLOWED
global RSHELL_SERVICE_PERMISSIONS_COMMAND_TEXT4_PREFIX
global RSHELL_SERVICE_PERMISSIONS_COMMAND_TEXT4
global RSHELL_SERVICE_PERMISSIONS_COMMAND_TEXT5
global RSHELL_SERVICE_PARSER_PARAMS_NAME
global RSHELL_SERVICE_PARSER_PARAMS_DESCRIPTION
global RSHELL_SERVICE_PARSER_PARAMS_STARTED_TEXT
global RSHELL_SERVICE_PARSER_PARAMS_TEXT1
global RSHELL_SERVICE_PARSER_PARAMS_TEXT2
global RSHELL_SERVICE_PARSER_PARAMS_TEXT3
global RSHELL_SERVICE_PARSER_PARAMS_TEXT4_PREFIX
global RSHELL_SERVICE_PARSER_PARAMS_TEXT5
global RSHELL_SERVICE_PARSER_PARAMS_TEXT6
global RSHELL_SERVICE_PARSER_PARAMS_TEXT7
global RSHELL_SERVICE_PARSER_PARAMS_TEXT8
global RSHELL_SERVICE_PARSER_PARAMS_TEXT9
global RSHELL_SERVICE_PARSER_PARAMS_TEXT10
global RSHELL_SERVICE_PARSER_PARAMS_TEXT11
global RSHELL_SERVICE_PARSER_PARAMS_TEXT12
global RSHELL_SERVICE_PARSER_PARAMS_TEXT13_PREFIX
global RSHELL_SERVICE_PARSER_PARAMS_TEXT14
global RSHELL_SERVICE_START_COMMAND_NAME
global RSHELL_SERVICE_START_COMMAND_DESCRIPTION
global RSHELL_SERVICE_START_COMMAND_STARTED_TEXT
global RSHELL_SERVICE_START_COMMAND_TEXT1
global RSHELL_SERVICE_START_COMMAND_TEXT2
global RSHELL_SERVICE_START_COMMAND_TEXT3
global RSHELL_SERVICE_START_COMMAND_TEXT4_PREFIX
global RSHELL_SERVICE_START_COMMAND_TEXT5_PREFIX
global RSHELL_SERVICE_VKAPI_PROXY_NAME
global RSHELL_SERVICE_VKAPI_PROXY_DESCRIPTION
global RSHELL_SERVICE_VKAPI_PROXY_STARTED_TEXT
global RSHELL_SERVICE_VKAPI_PROXY_TEXT1
global RSHELL_SERVICE_VKAPI_PROXY_TEXT2
global RSHELL_SERVICE_VKAPI_PROXY_TEXT3
global RSHELL_SERVICE_VKAPI_PROXY_TEXT4_PREFIX
global RSHELL_SERVICE_VKAPI_PROXY_TEXT5
global RSHELL_SERVICE_VKAPI_PROXY_TEXT6_PREFIX
global RSHELL_SERVICE_VKAPI_PROXY_TEXT7
global RSHELL_COMMAND_DOCUMENTATION_VKAPI_RESET_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_VKAPI_RESET_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_VKAPI_RESET_EXAMPLE
global RSHELL_COMMAND_INTERNAL_VKAPI_RESET_TEXT1
global RSHELL_COMMAND_INTERNAL_VKAPI_RESET_TEXT2
global RSHELL_COMMAND_DOCUMENTATION_TOOLTIP_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_TOOLTIP_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_TOOLTIP_PARAMETERS
global RSHELL_COMMAND_DOCUMENTATION_TOOLTIP_NOTES
global RSHELL_COMMAND_DOCUMENTATION_TOOLTIP_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_STEXTOFF_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_STEXTOFF_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_STEXTON_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_STEXTON_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_STEXTON_PARAMETERS
global RSHELL_COMMAND_DOCUMENTATION_STEXTON_NOTES
global RSHELL_COMMAND_DOCUMENTATION_STEXTON_EXAMPLES
global RSHELL_COMMAND_DOCUMENTATION_INPUTBOX_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_INPUTBOX_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_INPUTBOX_PARAMETERS
global RSHELL_COMMAND_DOCUMENTATION_INPUTBOX_TEXT1_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_INPUTBOX_TEXT2
global RSHELL_COMMAND_DOCUMENTATION_INPUTBOX_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_ENC_BASE64_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_ENC_BASE64_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_ENC_BASE64_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_WRITE_RAW_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_WRITE_RAW_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_WRITE_RAW_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_WRITE_RAW_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_FILE_READ_RAW_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_READ_RAW_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_READ_RAW_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_READ_RAW_TEXT1
global RSHELL_COMMAND_DOCUMENTAITON_RECYCLE_EMPTY_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_RECYCLE_EMPTY_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_RECYCLE_EMPTY_PARAMETER_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_RECYCLE_EMPTY_PARAMETER
global RSHELL_COMMAND_DOCUMENTATION_RECYCLE_EMPTY_NOTE
global RSHELL_COMMAND_DOCUMENTATION_RECYCLE_EMPTY_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_RECYCLE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_RECYCLE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_RECYCLE_NOTE
global RSHELL_COMMAND_DOCUMENTATION_RECYCLE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_ENCODING_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_ENCODING_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_ENCODING_PARAMETER_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_FILE_ENCODING_PARAMETER
global RSHELL_COMMAND_DOCUMENTATION_FILE_ENCODING_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_OUTPUT_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_OUTPUT_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_OUTPUT_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_PARAMETER_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_PARAMETER
global RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_ARR_PROCNAME
global RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_ARR_ID
global RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_ARGUMENTS_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_ARGUMENTS
global RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_OPTIONS_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_OPTIONS
global RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_ENDKEYS_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_ENDKEYS
global RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_CMDLIST_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_CMDLIST_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_GET_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_GET_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_GET_ARRAY_WRITE_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_FILE_GET_ARRAY_WRITE
global RSHELL_COMMAND_DOCUMENTATION_FILE_GET_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_FILE_PATTERN_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_FILE_PATTERN
global RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_MODES_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_MODES
global RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_EXAMPLE
global RSHELL_COMMAND_INTERNAL_FILE_SEARCH_TEXT1
global RSHELL_COMMAND_INTERNAL_FILE_SEARCH_TEXT2
global RSHELL_COMMAND_INTERNAL_FILE_SEARCH_TEXT3
global RSHELL_COMMAND_INTERNAL_FILE_SEARCH_TEXT4
global RSHELL_COMMAND_INTERNAL_FILE_SEARCH_TEXT5
global RSHELL_COMMAND_INTERNAL_FILE_SEARCH_TEXT6
global RSHELL_COMMAND_INTERNAL_FILE_SEARCH_TEXT7
global RSHELL_COMMAND_INTERNAL_FILE_SEARCH_TEXT8
global RSHELL_COMMAND_DOCUMENTATION_ENV_SET_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_ENV_SET_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_ENV_SET_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_ENV_GET_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_ENV_GET_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_ENV_GET_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_ENV_UPDATE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_ENV_UPDATE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_COMPILE_FIRST_PRE_SYNTAX_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_COMPILE_SYNTAX1
global RSHELL_COMMAND_DOCUMENTATION_COMPILE_SECOND_PRE_SYNTAX_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_COMPILE_SYNTAX2
global RSHELL_COMMAND_DOCUMENTATION_COMPILE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_COMPILE_PARAMETER_COMPILE_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_COMPILE_PARAMETER_COMPILE
global RSHELL_COMMAND_DOCUMENTATION_COMPILE_NOTE
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT1
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT2
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT3
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT4
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT5
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT6
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT7
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT8_PREFIX
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT9
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT10
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT_IN_WORD
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT11
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT12
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT13
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT14
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT15
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT16
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT17
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT18_PREFIX
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT19
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT20
global RSHELL_COMMMND_INTERNAL_COMPILE_TEXT21
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT22
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT23
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT24
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT25
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT26
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT27
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT28
global RSHELL_COMMAND_INTERNAL_COMPILE_TEXT29
global RSHELL_COMMAND_SUPERINTERNAL_COMPILE_TEXT1
global RSHELL_COMMAND_SUPERINTERNAL_COMPILE_TEXT2_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_REQUEST_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_REQUEST_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_REQUEST_METHODS_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_REQUEST_METHODS
global RSHELL_COMMAND_DOCUMENTATION_REQUEST_NOTE
global RSHELL_COMMAND_DOCUMENTATION_REQUEST_TEXT1_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_REQUEST_TEXT1
global RSHELL_COMMAND_INTERNAL_REQUEST_WORD_OPEN
global RSHELL_COMMAND_INTERNAL_REQUEST_WORD_SEND
global RSHELL_COMMAND_INTERNAL_REQUEST_TEXT1
global RSHELL_COMMAND_INTERNAL_REQUEST_WORD_SETREQUESTHEADER
global RSHELL_COMMAND_INTERNAL_REQUEST_WORD_TIMEOUT
global RSHELL_COMMAND_INTERNAL_REQUEST_WORD_WAITRESPONSE
global RSHELL_COMMAND_INTERNAL_REQUEST_TEXT2
global RSHELL_COMMAND_DOCUMENTATION_RANDOM_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_RANDOM_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_RANDOM_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_CREATEFORMDATA_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_CREATEFORMDATA_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_CREATEFORMDATA_PARAMETERS
global RSHELL_COMMAND_DOCUMENTATION_CREATEFORMDATA_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_BRIGHTNESS_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_BRIGHTNESS_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_BRIGHTNESS_NOTE
global RSHELL_COMMAND_DOCUMENTATION_BRIGHTNESS_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_SCREENSHOT_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_SCREENSHOT_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_SCREENSHOT_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_REG_DELETE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_REG_DELETE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_REG_DELETE_PARAMETERS
global RSHELL_COMMAND_DOCUMENTATION_REG_DELETE_NOTE
global RSHELL_COMMAND_DOCUMENTATION_REG_DELETE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_REG_READ_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_REG_READ_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_REG_READ_PARAMETERS
global RSHELL_COMMAND_DOCUMENTATION_REG_READ_NOTES
global RSHELL_COMMAND_DOCUMENTATION_REG_READ_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_REG_WRITE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_REG_WRITE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_REG_WRITE_PARAMETERS
global RSHELL_COMMAND_DOCUMENTATION_REG_WRITE_NOTES
global RSHELL_COMMAND_DOCUMENTATION_REG_WRITE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_SOUND_PLAY_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_SOUND_PLAY_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_SOUND_PLAY_PARAMETERS
global RSHELL_COMMAND_DOCUMENTATION_SOUND_PLAY_NOTES
global RSHELL_COMMAND_DOCUMENTATION_SOUND_PLAY_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_PARAMETERS
global RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_TEXT1_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_TEXT2
global RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_NOTE
global RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_EXAMPLE
global RSHELL_COMMAND_INTERNAL_SOUND_GET_TEXT1
global RSHELL_COMMAND_INTERNAL_SOUND_GET_TEXT2
global RSHELL_COMMAND_INTERNAL_SOUND_GET_TEXT3
global RSHELL_COMMAND_INTERNAL_SOUND_GET_TEXT4
global RSHELL_COMMAND_INTERNAL_SOUND_GET_TEXT5
global RSHELL_COMMAND_INTERNAL_SOUND_GET_TEXT6
global RSHELL_COMMAND_INTERNAL_SOUND_GET_TEXT7
global RSHELL_COMMAND_DOCUMENTATION_SOUND_BEEP_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_SOUND_BEEP_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_SOUND_BEEP_NOTE
global RSHELL_COMMAND_DOCUMENTATION_SOUND_BEEP_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_DISPLAY_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_DISPLAY_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_DISPLAY_ACTIONS_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_DISPLAY_ACTIONS
global RSHELL_COMMAND_DOCUMENTATION_DISPLAY_EXAMPLE
global RSHELL_COMMAND_INTERNAL_DISPLAY_ACTION_OFF_WORD
global RSHELL_COMMAND_INTERNAL_DISPLAY_ACTION_ON_WORD
global RSHELL_COMMAND_INTERNAL_DISPLAY_ACTION_ECO_WORD
global RSHELL_COMMAND_INTERNAL_DISPLAY_ACTION_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_TRAYTIP_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_TRAYTIP_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_TRAYTIP_OPTIONS_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_TRAYTIP_OPTIONS
global RSHELL_COMMAND_DOCUMENTATION_TRAYTIP_NOTE
global RSHELL_COMMAND_DOCUMENTATION_TRAYTIP_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_MSGBOX_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_MSGBOX_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_MSGBOX_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_MSGBOX_OPTIONS_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_MSGBOX_OPTIONS
global RSHELL_COMMAND_DOCUMENTATION_MSGBOX_ADDITION_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_MSGBOX_ADDITION
global RSHELL_COMMAND_DOCUMENTATION_MSGBOX_ADVICE_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_MSGBOX_ADVICE
global RSHELL_COMMAND_DOCUMENTATION_MSGBOX_CLOSE_BUTTON_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_MSGBOX_CLOSE_BUTTON
global RSHELL_COMMAND_DOCUMENTATION_MSGBOX_EXAMPLE
global RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_VARNAME
global RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_YES
global RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_NO
global RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_OK
global RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_CANCEL
global RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_ABORT
global RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_IGNORE
global RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_RETRY
global RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_TIMEOUT
global RSHELL_COMMAND_DOCUMENTATION_SOUND_SET_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_SOUND_SET_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_SOUND_SET_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_SOUND_SET_TEXT2
global RSHELL_COMMAND_DOCUMENTATION_SOUND_SET_EXAMPLES
global RSHELL_COMMAND_INTERNAL_SOUND_SET_TEXT1
global RSHELL_COMMAND_INTERNAL_SOUND_SET_TEXT2
global RSHELL_COMMAND_INTERNAL_SOUND_SET_TEXT3
global RSHELL_COMMAND_INTERNAL_SOUND_SET_TEXT4
global RSHELL_COMMAND_INTERNAL_SOUND_SET_TEXT5
global RSHELL_COMMAND_INTERNAL_SOUND_SET_TEXT6
global RSHELL_COMMAND_INTERNAL_SOUND_SET_TEXT7
global RSHELL_COMMAND_DOCUMENTATION_FILE_SIZE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_SIZE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_SIZE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_DIR_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_DIR_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_DIR_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_DIR_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_DIR_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_DIR_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_DIR_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_FILE_CREATE_DIR_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_CREATE_DIR_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_CREATE_DIR_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_APPEND_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_APPEND_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_APPEND_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_READ_LINE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_READ_LINE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_READ_LINE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_READ_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_READ_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_READ_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_GET_LABEL_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_GET_LABEL_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_GET_LABEL_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_GET_LABEL_TEXT1
global RSHELL_COMMAND_INTERNAL_FILE_GET_LABEL_FILE_WORD
global RSHELL_COMMAND_INTERNAL_FILE_GET_LABEL_DIR_WORD
global RSHELL_COMMAND_INTERNAL_FILE_GET_LABEL_PARAMETERS_WORD
global RSHELL_COMMAND_INTERNAL_FILE_GET_LABEL_DESCRIPTION_WORD
global RSHELL_COMMAND_INTERNAL_FILE_GET_LABEL_ICON_WORD
global RSHELL_COMMAND_INTERNAL_FILE_GET_LABEL_NUMBER_OF_ICON_WORD
global RSHELL_COMMAND_INTERNAL_FILE_GET_LABEL_START_STATUS_WORD
global RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_DIR_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_DIR_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_DIR_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_DIR_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_GET_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_GET_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_GET_TEXT1
global RSHELL_COMMAND_INTERNAL_FILE_TIME_GET_ERRORVALUE
global RSHELL_COMMAND_INTERNAL_FILE_TIME_GET_CVALUE
global RSHELL_COMMAND_INTERNAL_FILE_TIME_GET_MVALUE
global RSHELL_COMMAND_INTERNAL_FILE_TIME_GET_AVALUE
global RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_SET_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_SET_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_SET_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_SET_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_DOWNLOAD_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_DOWNLOAD_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_DOWNLOAD_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_PROG_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_PROG_DESCRIPTION
global RSHELL_COMMAND_INTERNAL_PROG_TEXT1
global RSHELL_COMMAND_INTERNAL_PROG_TEXT2
global RSHELL_COMMAND_INTERNAL_PROG_TEXT3
global RSHELL_COMMAND_INTERNAL_PROG_TEXT4
global RSHELL_COMMAND_INTERNAL_PROG_TEXT5
global RSHELL_COMMAND_INTERNAL_PROG_TEXT6
global RSHELL_COMMAND_INTERNAL_PROG_TEXT7
global RSHELL_COMMAND_INTERNAL_PROG_TEXT8
global RSHELL_COMMAND_INTERNAL_PROG_TEXT9
global RSHELL_COMMAND_INTERNAL_PROG_TEXT10
global RSHELL_COMMAND_INTERNAL_PROG_TEXT11
global RSHELL_COMMAND_INTERNAL_PROG_TEXT12
global RSHELL_COMMAND_INTERNAL_PROG_TEXT13
global RSHELL_COMMAND_INTERNAL_PROG_TEXT14
global RSHELL_COMMAND_INTERNAL_PROG_TEXT15
global RSHELL_COMMAND_INTERNAL_PROG_TEXT16
global RSHELL_COMMAND_INTERNAL_PROG_TEXT17
global RSHELL_COMMAND_INTERNAL_PROG_TEXT18
global RSHELL_COMMAND_INTERNAL_PROG_TEXT19
global RSHELL_COMMAND_INTERNAL_PROG_TEXT21
global RSHELL_COMMAND_INTERNAL_PROG_TEXT22
global RSHELL_COMMAND_INTERNAL_PROG_TEXT23
global RSHELL_COMMAND_INTERNAL_PROG_TEXT24
global RSHELL_COMMAND_INTERNAL_PROG_TEXT25
global RSHELL_COMMAND_DOCUMENTATION_INI_DELETE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_INI_DELETE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_INI_DELETE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_INI_READ_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_INI_READ_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_INI_READ_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_INI_READ_CONSOLERESULT
global RSHELL_COMMAND_DOCUMENTATION_INI_READ_ERRORVALUE
global RSHELL_COMMAND_DOCUMENTATION_INI_WRITE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_INI_WRITE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_INI_WRITE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_MEMORY_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_MEMORY_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_MEMORY_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_TEXT2_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_EXAMPLE1
global RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_TEXT3_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_EXAMPLE2
global RSHELL_COMMAND_INTERNAL_DRIVE_GET_TEXT1
global RSHELL_COMMAND_INTERNAL_DRIVE_GET_TEXT2
global RSHELL_COMMAND_INTERNAL_DRIVE_GET_TEXT3
global RSHELL_COMMAND_INTERNAL_DRIVE_GET_TEXT4
global RSHELL_COMMAND_INTERNAL_DRIVE_GET_TEXT5
global RSHELL_COMMAND_INTERNAL_DRIVE_GET_TEXT6
global RSHELL_COMMAND_INTERNAL_DRIVE_GET_TEXT7
global RSHELL_COMMAND_DOCUMENTATION_DRIVE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_DRIVE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_DIR_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_DIR_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_DIR_TEXT1
global RSHELL_COMMAND_INTERNAL_DIR_TEXT1
global RSHELL_COMMAND_INTERNAL_DIR_TEXT2
global RSHELL_COMMAND_INTERNAL_DIR_TEXT3
global RSHELL_COMMAND_INTERNAL_DIR_TEXT4
global RSHELL_COMMAND_INTERNAL_DIR_TEXT5
global RSHELL_COMMAND_DOCUMENTATION_CD_DOT_SYNTAX1_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_CD_DOT_SYNTAX2_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_CD_DOT_SYNTAX3_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_CD_DOT_SYNTAX1
global RSHELL_COMMAND_DOCUMENTATION_CD_DOT_SYNTAX2
global RSHELL_COMMAND_DOCUMENTATION_CD_DOT_SYNTAX3
global RSHELL_COMMAND_DOCUMENTATION_CD_DOT_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_CD_DOT_NOTE
global RSHELL_COMMAND_DOCUMENTATION_CD_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_CD_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_CD_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_ATTR_SET_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_ATTR_SET_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_ATTR_SET_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_ATTR_GET_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_ATTR_GET_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_ATTR_GET_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_ATTR_GET_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_POST_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_POST_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_POST_EXAMPLE
global RSHELL_COMMAND_INTERNAL_POST_TEXT1
global RSHELL_COMMAND_INTERNAL_POST_TEXT2
global RSHELL_COMMAND_INTERNAL_POST_TEXT3
global RSHELL_COMMAND_INTERNAL_POST_TEXT4
global RSHELL_COMMAND_INTERNAL_POST_TEXT5
global RSHELL_COMMAND_INTERNAL_POST_TEXT6
global RSHELL_COMMAND_INTERNAL_POST_TEXT7
global RSHELL_COMMAND_DOCUMENTATION_VKAPI_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_VKAPI_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_VKAPI_NOTE
global RSHELL_COMMAND_DOCUMENTATION_VKAPI_EXAMPLE
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT1
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT2
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT3_PREFIX
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT4_PREFIX
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT5
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT6
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT7
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT8
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT9
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT10
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT11
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT12_PREFIX
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT13
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT14
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT15
global RSHELL_COMMAND_INTERNAL_VKAPI_TEXT16
global RSHELL_COMMAND_DOCUMENTATION_NETWORK_SCAN_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_NETWORK_SCAN_DESCRIPTION
global RSHELL_COMMAND_INTERNAL_VOICESP_COMMON_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_VOICESP_SPEED_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_VOICESP_SPEED_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_VOICESP_SPEED_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_VOICESP_SPEED_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_VOICESP_SAY_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_VOICESP_SAY_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_VOICESP_SAY_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_VOICESP_VOLUME_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_VOICESP_VOLUME_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_VOICESP_VOLUME_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_VOICESP_VOLUME_EXAMPLE
global RSHELL_DIRECTIVE_DOCUMENTATION_DWASK_SYNTAX
global RSHELL_DIRECTIVE_DOCUMENTATION_DWASK_DESCRIPTION
global RSHELL_DIRECTIVE_INTERNAL_DWASK_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_WIN_HIDE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_HIDE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_HIDE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WIN_MINIMIZE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_MINIMIZE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_MINIMIZE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WIN_MAXIMIZE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_MAXIMIZE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_MAXIMIZE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WIN_SHOW_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_SHOW_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_SHOW_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WIN_CLOSE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_CLOSE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_CLOSE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WIN_TITLE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_TITLE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_TITLE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WIN_RESTORE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_RESTORE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_RESTORE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WIN_ACTIVATE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_ACTIVATE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_ACTIVATE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_CLOSE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_CLOSE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_CLOSE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_DEACTIVE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_DEACTIVE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_DEACTIVE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_ACTIVE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_ACTIVE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_ACTIVE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_NOTE1
global RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_NOTE2
global RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_TEXT1_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_TEXT2_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_TEXT3
global RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_TEXT4
global RSHELL_COMMAND_DOCUMENTATION_WAIT_TIME_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WAIT_TIME_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WAIT_TIME_NOTE
global RSHELL_COMMAND_DOCUMENTATION_WAIT_TIME_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_EXIT_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_EXIT_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_EXIT_NOTE
global RSHELL_COMMAND_DOCUMENTATION_STRING_REPLACE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_STRING_REPLACE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_STRING_REPLACE_TEXT1_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_STRING_REPLACE_TEXT2
global RSHELL_COMMAND_DOCUMENTATION_STRING_REPLACE_TEXT3_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_STRING_REPLACE_TEXT4
global RSHELL_COMMAND_DOCUMENTATION_STRING_UNUNIT_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_STRING_UNUNIT_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_STRING_UNUNIT_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_VAR_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_VAR_TEXT1_PREFIX
global RSHELL_COMMAND_DOCUMENTATION_VAR_TEXT2
global RSHELL_COMMAND_DOCUMENTATION_VAR_TEXT3
global RSHELL_COMMAND_DOCUMENTATION_VAR_EXAMPLES
global RSHELL_COMMAND_INTERNAL_VAR_ROUND_WORD
global RSHELL_COMMAND_INTERNAL_VAR_LIST_WORD
global RSHELL_COMMAND_INTERNAL_VAR_TEXT1
global RSHELL_COMMAND_INTERNAL_VAR_TEXT2
global RSHELL_COMMAND_INTERNAL_VAR_MATH_WORD
global RSHELL_COMMAND_INTERNAL_VAR_SLICE_WORD
global RSHELL_COMMAND_INTERNAL_VAR_REPLACE_WORD
global RSHELL_COMMAND_INTERNAL_VAR_UNUNIT_WORD
global RSHELL_COMMAND_INTERNAL_VAR_LEFT_WORD
global RSHELL_COMMAND_INTERNAL_VAR_RIGHT_WORD
global RSHELL_COMMAND_INTERNAL_VAR_LEN_WORD
global RSHELL_COMMAND_INTERNAL_VAR_UPPER_WORD
global RSHELL_COMMAND_INTERNAL_VAR_LOWER_WORD
global RSHELL_COMMAND_INTERNAL_VAR_PATH_WORD
global RSHELL_COMMAND_INTERNAL_VAR_PATH_ARRAY_WORD_NAME
global RSHELL_COMMAND_INTERNAL_VAR_PATH_ARRAY_WORD_DIR
global RSHELL_COMMAND_INTERNAL_VAR_PATH_ARRAY_WORD_EXTENSION
global RSHELL_COMMAND_INTERNAL_VAR_PATH_ARRAY_WORD_NAMENOEXT
global RSHELL_COMMAND_INTERNAL_VAR_PATH_ARRAY_WORD_DISK
global RSHELL_COMMAND_DOCUMENTATION_ARR_UNIT_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_ARR_UNIT_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_ARR_UNIT_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_JSON_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_JSON_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_JSON_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_MOUSE_MOVE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_MOUSE_MOVE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_MOUSE_MOVE_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_MOUSE_MOVE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WRITEF_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WRITEF_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WRITEF_NOTE
global RSHELL_COMMAND_DOCUMENTATION_WRITEF_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WRITE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WRITE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WRITE_NOTE
global RSHELL_COMMAND_DOCUMENTATION_WRITE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_CMD_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_CMD_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_CMD_NOTE1
global RSHELL_COMMAND_DOCUMENTATION_CMD_NOTE2
global RSHELL_COMMAND_DOCUMENTATION_CMD_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_PROCESS_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_PROCESS_OPERATIONS
global RSHELL_COMMAND_DOCUMENTATION_PROCESS_CONSOLERESULT
global RSHELL_COMMAND_DOCUMENTATION_PROCESS_EXAMPLE
global RSHELL_COMMAND_INTERNAL_PROCESS_OPERATION1
global RSHELL_COMMAND_INTERNAL_PROCESS_OPERATION2
global RSHELL_COMMAND_INTERNAL_PROCESS_TEXT1
global RSHELL_COMMAND_INTERNAL_PROCESS_TEXT2
global RSHELL_COMMAND_INTERNAL_PROCESS_TEXT3
global RSHELL_COMMAND_INTERNAL_PROCESS_OPERATION3
global RSHELL_COMMAND_INTERNAL_PROCESS_OPERATION4
global RSHELL_COMMAND_INTERNAL_PROCESS_OPERATION5
global RSHELL_COMMAND_INTERNAL_PROCESS_OPERATION6
global RSHELL_COMMAND_INTERNAL_PROCESS_OPERATION7
global RSHELL_COMMAND_INTERNAL_PROCESS_TEXT4
global RSHELL_COMMAND_INTERNAL_PROCESS_TEXT5
global RSHELL_COMMAND_INTERNAL_PROCESS_TEXT6
global RSHELL_COMMAND_INTERNAL_PROCESS_TEXT7
global RSHELL_COMMAND_INTERNAL_PROCESS_TEXT8
global RSHELL_COMMAND_INTERNAL_PROCESS_TEXT9
global RSHELL_COMMAND_INTERNAL_PROCESS_TEXT10
global RSHELL_COMMAND_DOCUMENTATION_PSH_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_PSH_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_PSH_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_PSH_TEXT2
global RSHELL_COMMAND_DOCUMENTATION_PSH_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_RESTART_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_RESTART_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_DESCRIPTION
global RSHELL_COMMAND_INTERNAL_WIN_ELEM_TEXT1
global RSHELL_COMMAND_INTERNAL_WIN_ELEM_TEXT2
global RSHELL_COMMAND_INTERNAL_WIN_ELEM_TEXT3
global RSHELL_COMMAND_INTERNAL_WIN_ELEM_TEXT4
global RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_MOVE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_MOVE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_MOVE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_VALUE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_VALUE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_VALUE_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_WRITE_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_WRITE_DESCRIPTION
global RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_WRITE_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_WRITE_TEXT2
global RSHELL_SHELL_MODE_TEXT1
global RSHELL_SHELL_MODE_TEXT2
global RSHELL_SHELL_MODE_TEXT3
global RSHELL_SHELL_MODE_TEXT4
global RSHELL_SHELL_MODE_TEXT5
global RSHELL_COMMAND_INTERNAL_IF_PARSE_WORD
global RSHELL_COMMAND_DOCUMENTATION_IF_TEXT1
global RSHELL_COMMAND_INTERNAL_IF_TEXT1
global RSHELL_COMMAND_INTERNAL_IF_TEXT2
global RSHELL_COMMAND_INTERNAL_IF_TEXT3
global RSHELL_COMMAND_INTERNAL_IF_TEXT4
global RSHELL_COMMAND_INTERNAL_IF_TEXT5
global RSHELL_COMMAND_INTERNAL_IF_TEXT6
global RSHELL_COMMAND_INTERNAL_IF_TEXT7
global RSHELL_COMMAND_INTERNAL_IF_TEXT8
global RSHELL_COMMAND_INTERNAL_IF_TEXT9
global RSHELL_COMMAND_DOCUMENTATION_FILE_ADD_LABEL_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FILE_ADD_LABEL_NOTE
global RSHELL_COMMAND_DOCUMENTATION_FILE_ADD_LABEL_EXAMPLE
global RSHELL_COMMAND_DOCUMENTATION_LOOP_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_LOOP_NOTE
global RSHELL_COMMAND_DOCUMENTATION_LOOP_TEXT1
global RSHELL_COMMAND_DOCUMENTATION_LOOP_TEXT2
global RSHELL_COMMAND_DOCUMENTATION_FOR_SYNTAX
global RSHELL_COMMAND_DOCUMENTATION_FOR_EXAMPLE
global RSHELL_COMMAND_INTERNAL_FOR_TEXT1
global RSHELL_COMMAND_INTERNAL_FOR_PARSE_WORD
global RSHELL_COMMAND_INTERNAL_FOR_PARSE_WORD_DO
global RSHELL_COMMAND_INTERNAL_FOR_TEXT2
global RSHELL_COMMAND_INTERNAL_FOR_TEXT3
global RSHELL_COMMAND_INTERNAL_FOR_TEXT4
global RSHELL_COMMAND_INTERNAL_FOR_TEXT5
global RSHELL_SERVICE_LANG_CHANGE_NAME
global RSHELL_SERVICE_LANG_CHANGE_DESCRIPTION
global RSHELL_SERVICE_LANG_CHANGE_STARTED_TEXT
global RSHELL_SERVICE_LANG_CHANGE_TEXT1
global RSHELL_SERVICE_LANG_CHANGE_TEXT2
global RSHELL_SERVICE_LANG_CHANGE_TEXT3
global RSHELL_SERVICE_LANG_CHANGE_TEXT4
global RSHELL_SERVICE_LANG_CHANGE_TEXT5
global RSHELL_SERVICE_LANG_CHANGE_TEXT6
global RSHELL_SERVICE_LANG_CHANGE_TEXT7

global cmd_list

OnError("error")

error(e) {
	global
	Critical
	
	if (!attached) {
		console.cmd("title " RSHELL_ERROR_TITLE " & cls & color 1F")
		Winset, Style, -0x40000, ahk_id %mainwid%
		WinSet, Style, -0x10000, ahk_id %mainwid%
		WinRestore, ahk_id %mainwid%
		WinGetPos, x, y,,, ahk_id %mainwid%
	}
	
	Gui, dbg:destroy
	
	err_message := Trim(e.Message), err_line := Trim(e.Line)
	msg := string.up(StrReplace(StrReplace(err_message, " ", "_"), ".") "_" err_line)
	what := string.up(e.what)
	
	if (!attached) {
		loop, 3
			console.writeln("")
	}
	
	if (shell_mode)
		cmd_last := cmd_last StrReplace(RSHELL_ERROR_IF_SHELL_MODE, "%1", shell_file)
	
	error_code = %A_OSType%_%A_OSVersion%_%A_Is64bitOS%_%msg%_%what%_%shell_mode%_v%version%
	
	if localeLoadedSuccessfully
		text := StrReplace(StrReplace(RSHELL_ERROR_VISIBLE_TEXT, "%2", cmd_last), "%1", error_code)
	else
		text =
		(
Произошла непредвиденная ошибка, подробнее ниже.

An unexpected error has occurred, more details below.

%error_code% (LC: %cmd_last%)
		)
	
	console.write(text)
	console.write(RSHELL_ERROR_VISIBLE_TEXT_BT)
	
	to_report =
	(
Произошел краш.
`nЛокализация: %locale%.
`nКод ошибки: %error_code%.
`nОшибка была вызвана командой: %cmd_last%.
	)
	
	StringReplace, to_report, to_report, `n, `%0A, All
	StringReplace, to_report, to_report, `&, `%26, All
	
	resp := server_api("bt.cmd&text=" to_report)
	if resp not contains ok
	{
		console.write(RSHELL_ERROR_BT_SEND_ERROR)
	} else {
		console.write(RSHELL_ERROR_BT_SEND_SUCCESS)
	}
	
	if attached
		console.writeln(RSHELL_ERROR_ATTACHED_CLOSE)
	
	if (!mainwid) {
		MsgBox, 16, % title, % text
	}
	
	if (!attached)
		pause
	
	exitapp
	sleep 30000
}

GetIconFromResource(dest, source, idx)
{
   ; info: http://msdn.microsoft.com/en-us/library/ms997538.aspx
   SetBatchLines, -1
   if !hModule := Validation(dest, source, idx)
      Return
   
   for key, handle in FindGroup(source, idx, hModule)
   {
      pGroupInfo := GetResData(hModule, handle)
      if !IsObject(DataArray := CreateDataArray(hModule, pGroupInfo, CountIcons, size, idx ? idx : A_Index))
      {
         if (DataArray = 6)
            continue
         else
            break
      }
      pData := CreateDataBuff(DataArray, pGroupInfo, CountIcons, size)
      res := Data2icoFile(pData, dest, size, idx)
   } until !res
   
   DllCall("FreeLibrary", Ptr, hModule)
}

Validation(dest, source, idx)
{
   if !((idx + 1) > 0 && source := ValidateName(source))
      Return
   
   static dwFlags := (LOAD_LIBRARY_AS_DATAFILE := 0x2 | LOAD_LIBRARY_AS_IMAGE_RESOURCE := 0x20)
   if !hModule := DllCall("LoadLibraryEx", Str, source, Ptr, 0, UInt, dwFlags, Ptr)
      Return, 0, DllCall("MessageBox", Ptr, 0, Str, StrReplace(RSHELL_CANT_LOAD_MODULE, "%1", A_LastError), Str, "", UInt, 0)
         
   Return hModule
}

ValidateName(FilePath)
{
   SplitPath, FilePath,,, ext
   if !(ext ~= "i)exe|dll") && Error := RSHELL_ONLY_DLL_AND_EXE_FILES
      Return, 0, DllCall("MessageBox", Ptr, 0, Str, Error, Str, "", UInt, 0)
   
   if !FileExist(FilePath)
   {
      EnvGet, PathVar, Path
      Loop, parse, PathVar, `;
         continue
      until FileExist(p := RTrim(A_LoopField, "\") . "\" . FilePath) && (FilePath := p) && found := 1
      
      if !found && Text := StrReplace(RSHELL_FILE_DOES_NOT_FINDED, "%1", FilePath)
         Return, 0, DllCall("MessageBox", Ptr, 0, Str, Text, Str, "", UInt, 0)
   }
   
   Return FilePath
}

FindGroup(source, idx, hModule)
{
   Names := [idx, 0]
   DllCall("EnumResourceNames", Ptr, hModule, UInt, RT_GROUP_ICON := 14
      , Ptr, RegisterCallback("EnumGroupIconProc", "Fast", 4), Ptr, pNames := Object(Names))
   ObjRelease(pNames)
   
   if (Names.3 = "") && Text := idx ? StrReplace(StrReplace(RSHELL_ICON_IN_FILE_NOT_FINDED, "%2", source), "%1", idx)
                                    : StrReplace(RSHELL_ICONS_IN_FILE_NOT_FINDED, "%1", source)
      Return, 0, DllCall("MessageBox", Ptr, 0, Str, Text, Str, "", UInt, 0)
   
   Names.Remove(1, 2)
   for i, Name in Names
      Names[i] := DllCall("FindResource", Ptr, hModule, Name + 1 ? "UInt" : "Str", Name, UInt, RT_GROUP_ICON, Ptr)
   Return Names
}

EnumGroupIconProc(hModule, Type, Name, lp)
{
   (Name>>16) ? Name := LTrim(StrGet(Name+0), "#")
   obj := Object(lp)
   if !obj.1
      obj.Insert(Name)
   else if ((obj.2 += 1) = obj.1)
      Return, 0, obj.3 := Name
   Return 1
}

GetResData(hModule, hRes)
{
   hData := DllCall("LoadResource", Ptr, hModule, Ptr, hRes, Ptr)
   Return DllCall("LockResource", Ptr, hData, Ptr)
}

CreateDataArray(hModule, pIconGroup, ByRef CountIcons, ByRef offset, idx)
{
   if NumGet(pIconGroup+0, 2, "UShort") != 1 && Text := StrReplace(RSHELL_INVALID_TYPE_FILE, "%1", idx)
      Return DllCall("MessageBox", Ptr, 0, Str, Text, Str, RSHELL_INCORRECT_RESOURCE, UInt, 4)
   
   DataArray := [], RT_ICON := 3
   CountIcons := NumGet(pIconGroup+0, 4, "UShort")
   offset := 6 + CountIcons*16
   
   Loop % CountIcons
   {
      id := NumGet(pIconGroup + 6 + 14*A_Index - 2, "UShort")
      hRes := DllCall("FindResource", Ptr, hModule, UInt, id, UInt, RT_ICON, Ptr)
      pIcon := GetResData(hModule, hRes)
      DataArray[A_Index] := {ptr: pIcon
                           , size: s := NumGet(pIconGroup + 6 + 14*A_Index - 6, "UInt")
                           , offset: offset}
      offset += s
   }
   Return DataArray
}

CreateDataBuff(DataArray, pIconGroup, CountIcons, size)
{
   static IconData
   VarSetCapacity(IconData, size)
   DllCall("RtlMoveMemory", Ptr, &IconData, Ptr, pIconGroup, Ptr, 6)

   offset := 6
   Loop % CountIcons
   {
      DllCall("RtlMoveMemory", Ptr, &IconData + offset, Ptr, pIconGroup + offset - 2*(A_Index - 1), Ptr, 12)
      NumPut(DataArray[A_Index].offset, &IconData + offset + 12, "UInt"), offset += 16
      DllCall("RtlMoveMemory", Ptr, &IconData + DataArray[A_Index].offset, Ptr, DataArray[A_Index].ptr, Ptr, DataArray[A_Index].size)
   }
   Return &IconData
}

Data2icoFile(pData, Dest, size, idx)
{
   static i = 0
   SplitPath, Dest,, Dir, Ext, OutNameNoExt
   if !FileExist(Dir)
   {
      FileCreateDir, % Dir
      if ErrorLevel && Text := StrReplace(StrReplace(RSHELL_CANT_CREATE_DIR, "%2", A_LastError), "%1", dir)
         Return, 0, DllCall("MessageBox", Ptr, 0, Str, Text, Str, "", UInt, 0)
   }
   
   (!idx) ? Dest := (Ext ? SubStr(Dest, 1, -(StrLen(Ext) + 1)) : Dest) . "(" . ++i . ")" . (Ext ? "." . Ext : "")
   
   if !(File := FileOpen(Dest, "w")) && Text := StrReplace(StrReplace(RSHELL_CANT_OPEN_FILE_TO_WRITE, "%2", A_LastError), "%1", dest)
      Return, 0, DllCall("MessageBox", Ptr, 0, Str, Text, Str, "", UInt, 0)
         
   File.Seek(0), File.RawWrite(pData+0, size), File.Close()
   Return 1
}

ExitApp() {
	if (attached) {
		console.writeln("")
		Process_Resume(attach_pid_console ? attach_pid_console : Process_GetCurrentParentProcessID())
		DllCall("CloseHandle")
	}
	
	exitapp, % exit_code
}

ExtractInteger(ByRef pSource, pOffset = 0, pIsSigned = false, pSize = 4) ; см. описание DllCall
{
    Loop %pSize% ; собираем целое число, складывая его байты.
        result += *(&pSource + pOffset + A_Index-1) << 8*(A_Index-1)
    if (!pIsSigned OR pSize > 4 OR result < 0x80000000)
        return result ; в этих случаях не имеет значения, со знаком число или без
    return -(0xFFFFFFFF - result + 1)
}

AccessRights_EnableSeDebug() {
	hProc := DllCall( "OpenProcess", UInt,0x0400, Int,0, UInt,DllCall("GetCurrentProcessId"), "Ptr" )
	DllCall( "Advapi32.dll\OpenProcessToken", Ptr,hProc, UInt,0x0020|0x0008, PtrP,hToken )

	VarSetCapacity(LUID, 8, 0)
	DllCall( "Advapi32.dll\LookupPrivilegeValue", Ptr,0, Str,"SeDebugPrivilege", Ptr,&LUID )

	VarSetCapacity( TOKPRIV, 16, 0   )					      ; TOKEN_PRIVILEGES structure: http://goo.gl/AGXeAp.
	NumPut( 1, &TOKPRIV, 0,   "UInt" )                        ; TOKEN_PRIVILEGES > PrivilegeCount.
	NumPut( NumGet( &LUID, 0, "UInt" ), &TOKPRIV, 4, "UInt" ) ; TOKEN_PRIVILEGES > LUID_AND_ATTRIBUTES > LUID > LoPart.
	NumPut( NumGet( &LUID, 4, "UInt" ), &TOKPRIV, 8, "UInt" ) ; TOKEN_PRIVILEGES > LUID_AND_ATTRIBUTES > LUID > HiPart.
	NumPut( 2, &TOKPRIV, 12,  "UInt" )                        ; TOKEN_PRIVILEGES > LUID_AND_ATTRIBUTES > Attributes.
														      ; SE_PRIVILEGE_ENABLED = 2.

	DllCall( "Advapi32.dll\AdjustTokenPrivileges", Ptr,hToken, Int,0, Ptr,&TOKPRIV, UInt,0, Ptr,0, Ptr,0 )
    DllCall( "CloseHandle", Ptr,hToken )
    DllCall( "CloseHandle", Ptr,hProc  )
}

WM_QUERYENDSESSION(wParam, lParam)
{
    ENDSESSION_LOGOFF := 0x80000000
    if (lParam & ENDSESSION_LOGOFF)
        EventType := "Logoff"
    else
        EventType := "Shutdown"
    try
    {
		DllCall("ShutdownBlockReasonCreate", "ptr", A_ScriptHwnd, "wstr", RSHELL_BLOCK_SHUTDOWN_TEXT)
		;settimer, WARNING_shutdown, 1
        return false
    }
    catch
    {
        MsgBox, 4, % title, % StrReplace(RSHELL_CATCH_BLOCK_SHUTDOWN_TEXT, "%1", EventType)
        IfMsgBox Yes
            return true
        else
            return false
    }
}

WTSEnumerateProcessesEx()
{
    static hWTSAPI := DllCall("LoadLibrary", "str", "wtsapi32.dll", "ptr")

    if !(DllCall("wtsapi32\WTSEnumerateProcessesEx", "ptr", 0, "uint*", 0, "uint", -2, "ptr*", buf, "uint*", TTL))
        throw Exception("WTSEnumerateProcessesEx failed", -1)
    addr := buf, WTS_PROCESS_INFO := []
    loop % TTL
    {
        WTS_PROCESS_INFO[A_Index, "SessionID"]   := NumGet(addr+0, "uint")
        WTS_PROCESS_INFO[A_Index, "ProcessID"]   := NumGet(addr+4, "uint")
        WTS_PROCESS_INFO[A_Index, "ProcessName"] := StrGet(NumGet(addr+8, "ptr"))
        WTS_PROCESS_INFO[A_Index, "UserSID"]     := NumGet(addr+8+A_PtrSize, "ptr")
        addr += 8 + (A_PtrSize * 2)
    }
    if !(DllCall("wtsapi32\WTSFreeMemoryEx", "int", 0, "ptr", buf, "uint", TTL))
        throw Exception("WTSFreeMemoryEx failed", -1)
    return WTS_PROCESS_INFO
}

FileGetInfo( lptstrFilename) {
	List := "Comments InternalName ProductName CompanyName LegalCopyright ProductVersion"
		. " FileDescription LegalTrademarks PrivateBuild FileVersion OriginalFilename SpecialBuild"
	dwLen := DllCall("Version.dll\GetFileVersionInfoSize", "Str", lptstrFilename, "Ptr", 0)
	dwLen := VarSetCapacity( lpData, dwLen + A_PtrSize)
	DllCall("Version.dll\GetFileVersionInfo", "Str", lptstrFilename, "UInt", 0, "UInt", dwLen, "Ptr", &lpData) 
	DllCall("Version.dll\VerQueryValue", "Ptr", &lpData, "Str", "\VarFileInfo\Translation", "PtrP", lplpBuffer, "PtrP", puLen )
	sLangCP := Format("{:04X}{:04X}", NumGet(lplpBuffer+0, "UShort"), NumGet(lplpBuffer+2, "UShort"))
	i := {}
	Loop, Parse, % List, %A_Space%
		DllCall("Version.dll\VerQueryValue", "Ptr", &lpData, "Str", "\StringFileInfo\" sLangCp "\" A_LoopField, "PtrP", lplpBuffer, "PtrP", puLen )
		? i[A_LoopField] := StrGet(lplpBuffer, puLen) : ""
	return i
}

GetModuleFileNameEx( p_pid ) ; by shimanov -  www.autohotkey.com/forum/viewtopic.php?t=9000
{
   if A_OSVersion in WIN_95,WIN_98,WIN_ME
   {
      MsgBox, This Windows version (%A_OSVersion%) is not supported.
      return
   }
   h_process := DllCall( "OpenProcess", "uint", 0x10|0x400, "int", false, "uint", p_pid )
   if ( ErrorLevel or h_process = 0 )
      return
   name_size = 255
   VarSetCapacity( name, name_size )
   If A_IsUnicode
      result := DllCall( "psapi.dll\GetModuleFileNameExW", "uint", h_process, "uint", 0, "str" , name, "uint", name_size )
    Else
      result := DllCall( "psapi.dll\GetModuleFileNameExA", "uint", h_process, "uint", 0, "str" , name, "uint", name_size )
   DllCall( "CloseHandle", h_process )
   return, name
}

InsertInteger(pInteger, ByRef pDest, pOffset = 0, pSize = 4)
{
    Loop %pSize% ; копируем каждый байт целого числа в структуру как сырые двоичные данные
        DllCall("RtlFillMemory", "UInt", &pDest + pOffset + A_Index-1
        , "UInt", 1, "UChar", pInteger >> 8*(A_Index-1) & 0xFF)
}

percent(num1, num2) {
	return (num1/num2)*100
}

; Конфиг

IfNotExist, % root
	warning_dir = 1

; Чтение конфига
ifnotexist, % root
{
	FileCreateDir, % root
	FileCreateDir, %root%\locales
}

checkConfig()

checkLocaleTestParam = %1%

if (checkLocaleTestParam == "checkLocale") {
	checkingLocale = 1
	locale = %2%

	FileRead, localeFile, %root%\locales\%locale%.locale
	loop, parse, localeFile, `r`n
	{
		if (string.left(A_LoopField, 2) == "//")
			continue
		
		if (trim(A_LoopField) == "")
			continue
		
		to_var := "", to_value := "", caption_mode := 0
		loop, parse, A_LoopField, % ""
		{
			if ((caption_mode == 0) && (A_LoopField == "=")) {
				caption_mode = 1
				continue
			}
			
			if (caption_mode == 0) {
				to_var := to_var A_LoopField
				continue
			}
			
			if (caption_mode == 1) {
				to_value := to_value A_LoopField
				continue
			}
		}
		
		if ((trim(to_var) != "") && (string.up(string.left(to_var, 7)) == "RSHELL_")) {
			loop, parse, % locales_registreted, `|
			{
				if (trim(A_LoopField) == "")
					continue
				
				if (trim(string.down(A_LoopField)) == trim(string.down(to_var))) {
					MsgBox, 16, % title, % "Ошибка: в локализации под именем '" locale "' обнаружено совпадение в названии параметра.`n`nError: a match in the parameter name was found in the localization under the name '" locale "'. (" A_LoopField ")"
					exitapp
				}
			}
			
			locales_registreted := locales_registreted "|" to_var
		}
	}
	
	; ================================================================================
	
	prod_list := server_api("locales")
	
	if prod_list not contains output
		exitapp
	
	prod_count := JSON.GetKey(prod_list, "output.count")
	index := -1
	prod := []
	
	loop, % prod_count
	{
		index+=1
		name := trim(JSON.GetKey(prod_list, "output.items[" index "].name"))
		
		if (name == "")
			continue
		
		
		URLDownloadToFile, % host "/locales/" name, % root "\locales\" name
	}
	
	exitapp
}

initLocale(locale)

addtv(p1="", p2="", p3="") {
	result := TV_Add(p1, p2, p3)
	tvs[p1] := result
	return result
}

server_api(method) {
	try whr := ComObjCreate("WinHttp.WinHttpRequest.5.1")
	try whr.Open("GET", host "/api.php?method=" method, true)
	try whr.SetRequestHeader("User-Agent", "Renux Shell v" version)
	try whr.SetRequestHeader("Content-Type","application/x-www-form-urlencoded")
	try whr.Send()
	try whr.WaitForResponse()
	try response := whr.ResponseText
	catch {
		console.warning(StrReplace(RSHELL_SERVER_API_CATCH_ERROR, "%1", host))
		return
	}
	
	if (debug)
		console.writeln("[DEBUG] " StrReplace(RSHELL_SERVER_API_SERVER_RESPONSE_TO_DEBUG, "%1", response))
	
	return response
}

vk_api(method, token) {
	global
	
	err_code = 0
	StringReplace, method, method, `n, `%newline`%, All
	StringReplace, method, method, `%newline`%, `%0A, All
	StringReplace, method, method, +, `%2B, All
	StringReplace, method, method, #, `%23, All
	random, rid, 1000, 9999
	StringReplace, method, method, `%random_id`%, % rid, All
	MessagePeerRound := Round(MessagePeer)
	StringReplace, method, method, peer_id=%MessagePeer%, peer_id=%MessagePeerRound%
	MessagePeer = % MessagePeerRound
	
	api_host := proxy_vk
	
	try whr := ComObjCreate("WinHttp.WinHttpRequest.5.1")
	Loop, parse, method, `&
	{
		RegExMatch(A_LoopField, "v=(.*)", loopfieldout)
		if loopfieldout
			text_api := api_host "&method=" method "&access_token=" token
		else
			text_api := api_host "&method=" method "&access_token=" token "&v=5.95"
	}
	
	try whr.Open("POST", text_api, true)
	try whr.SetRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36")
	try whr.SetRequestHeader("Content-Type","application/x-www-form-urlencoded")
	try whr.Send()
	try whr.WaitForResponse()
	try response := whr.ResponseText
	catch {
		console.warning(RSHELL_VK_API_CATCH_ERROR)
		return
	}
	
	if debug
		console.writeln("[DEBUG] " StrReplace(RSHELL_VK_API_SERVER_RESPONSE_TO_DEBUG, "%1", response))
	
	if (trim(response) == "") {
		console.warning(RSHELL_VK_API_RESPONSE_IS_EMPTY)
		return
	}
	
	return response
}

encrypt(src, file_path, Key1, Key2 = 0)
{
	file := FileOpen(file_path, "a", UTF-8)
	
	Loop, 3
	{
		If not Key%A_Index%
			Break
		
		StringSplit, Keys, Key%A_Index%
		Dest =
		Loop, Parse, Src
		{
			Index := Mod(A_Index, Keys0) + 1
			Key := Asc(Keys%Index%)
			Code := Asc(A_LoopField)
            Dest .= Chr(Code = Key ? Code : Code ^ Key)
		}
		
		Src := Dest
	}
	
    file.write(Dest)
	file.close()
	return Dest
}

decrypt(Src, Key1, Key2 = 0)  ; Два последних ключа необязательны.
{
  Loop, 3
  {
    If not Key%A_Index%
      Break
    
    StringSplit, Keys, Key%A_Index%  ; Разбиваем фразу на отдельные ключи.
    Dest =
    Loop, Parse, Src  ; Перебор символов текста.
    {
      Index := Mod(A_Index, Keys0) + 1  ; Чтобы Index не вышел за пределы
                                        ; числа символов в ключевой фразе.
      Key := Asc(Keys%Index%)   ; Очередной ключ.
      Code := Asc(A_LoopField)  ; Код очередного символа текста.
      Dest .= Chr(Code = Key ? Code : Code ^ Key) ; Шифруем и добавляем.
    }
    Src := Dest
  }
  Return Dest
}

checkConfig() {
	global
	
	loop, 2
	{
		IniRead, start_cmd, % config, start, cmd
		if (start_cmd == "ERROR")
			IniWrite, информация, % config, start, cmd
		
		IniRead, start_transparent, % config, start, transparent
		if (start_transparent == "ERROR")
			IniWrite, 240, % config, start, transparent
		
		IniRead, proxy_vk, % config, proxy, vk
		if (proxy_vk == "ERROR")
			IniWrite, % "https://api.vk.com/api.php?oauth=1&", % config, proxy, vk
		
		IniRead, vk_token, % config, vk, token
		if (vk_token == "ERROR")
			IniWrite, % "", % config, vk, token
		
		IniRead, variables_explode_symbols, % config, variables, explode_symbols
		if (variables_explode_symbols == "ERROR")
			IniWrite, `%, % config, variables, explode_symbols
		
		IniRead, agree_eula, % config, eula, agree
		if (agree_eula == "ERROR")
			IniWrite, 0, % config, eula, agree
		
		IniRead, parserAllowParameterVoid, % config, parser, allowParameterVoid
		if (parserAllowParameterVoid == "ERROR")
			IniWrite, 1, % config, parser, allowParameterVoid
		
		IniRead, isGuideLearned, % config, isGuideLearned, flag
		if (isGuideLearned == "ERROR")
			IniWrite, 0, % config, isGuideLearned, flag
		
		IniRead, service__PermissionUseCMD_FalseList, % config, service.PermissionUseCMD, FalseList
		if (service__PermissionUseCMD_FalseList == "ERROR")
			IniWrite, % "КОНСОЛЬ СЛУЖБЫ", % config, service.PermissionUseCMD, FalseList
		
		IniRead, locale, % config, locale, lang
		if (locale == "ERROR")
			IniWrite, % "russian", % config, locale, lang
	}
}

initLocale(locale:="russian", showLocalesCount := 0) {
	global
	
	localeLoadedSuccessfully = 0
	developer_locale = 0
	localesCount = 0
	
	ifnotexist, %root%\locales\russian.locale
	{
		FileCreateDir, %root%\locales
		URLDownloadToFile, %host%/locales/russian.locale, %root%\locales\russian.locale
		ifnotexist, %root%\locales\russian.locale
			FileInstall, locales\russian.locale, %root%\locales\russian.locale, 1
		
		FileGetSize, locsize, %root%\locales\russian.locale
		if (locsize < 10000) {
			MsgBox, 16, % title, Невозможно установить локализацию!`n`nUnable to install localization!
			exitapp
		}
	}
	
	if (locale == "developer") {
		developer_locale = 1
		locale = russian
	}
	
	ifnotexist, %root%\locales\%locale%.locale
	{
		MsgBox, 16, % title, % "Ошибка: локализация под именем '" locale "' не найдена.`n`nError: localization named '" locale "' not found."
		exitapp
	}
	
	locales_registered := ""
	FileRead, localeFile, %root%\locales\%locale%.locale
	loop, parse, localeFile, `r`n
	{
		if (string.left(A_LoopField, 2) == "//")
			continue
		
		if (trim(A_LoopField) == "")
			continue
		
		to_var := "", to_value := "", caption_mode := 0
		loop, parse, A_LoopField, % ""
		{
			if ((caption_mode == 0) && (A_LoopField == "=")) {
				caption_mode = 1
				continue
			}
			
			if (caption_mode == 0) {
				to_var := to_var A_LoopField
				continue
			}
			
			if (caption_mode == 1) {
				to_value := to_value A_LoopField
				continue
			}
		}
		
		if ((trim(to_var) != "") && (string.up(string.left(to_var, 7)) == "RSHELL_")) {
			locales_registreted := locales_registreted "|" to_var
			if (!developer_locale) {
				try %to_var% := StrReplace(to_value, "\n", "`n")
				catch e {
					MsgBox, 16, % title,
					(
Не удалось загрузить переменную в память процесса. Возможно, её имя содержит недопустимые символы.

Failed to load variable into process memory. Perhaps her name contains invalid characters.

(%to_var%)
					)
					exitapp
				}
			} else {
				%to_var% := to_var
			}
			
			localesCount += 1
			
			if showLocalesCount
				console.writeln("Loaded: " to_var "!")
		}
	}
	
	if !checkingLocale
		Run, %A_ScriptFullPath% checkLocale %locale%
	
	if (showLocalesCount) {
		console.write("`n=====================================`nloaded count: " localesCount " ")
	}
	
	localeLoadedSuccessfully = 1
}

DestroyIcon(hIcon16, hIcon32)  {
	DllCall("DestroyIcon", Ptr, hIcon16)
	DllCall("DestroyIcon", Ptr, hIcon32)
}

class JSON
{
   static JS := JSON._GetJScriptObject(), true := {}, false := {}, null := {}
   
   Parse(sJson, js := false)  {
      if jsObj := this.VerifyJson(sJson)
         Return js ? jsObj : this._CreateObject(jsObj)
   }
   
   Stringify(obj, js := false, indent := "") {
      if (js && !RegExMatch(js, "\s"))
         Return this.JS.JSON.stringify(obj, "", indent)
      else {
         (RegExMatch(js, "\s") && indent := js)
         sObj := this._ObjToString(obj)
         Return this.JS.eval("JSON.stringify(" . sObj . ",'','" . indent . "')")
      }
   }
   
   GetKey(sJson, key, indent := "") {
	  if !this.VerifyJson(sJson)
         Return
		 
		 symbol = `"
      try Return StrReplace(StrReplace(StrReplace(Ltrim(RTrim(this.JS.eval("JSON.stringify((" . sJson . ")" . (SubStr(key, 1, 1) = "[" ? "" : ".") . key . ",'','" . indent . "')"), symbol), symbol), "\/", "/"), "\n", "`n"), "\" symbol, symbol)
      catch
         console.writeln("[DEBUG] " StrReplace(RSHELL_JSON_TEXT_BAD_KEY_TO_DEBUG, "%1", key))
   }
   
   SetKey(sJson, key, value, indent := "") {
      if !this.VerifyJson(sJson)
         Return
      if !this.VerifyJson(value, true) {
         console.warning(StrReplace(RSHELL_JSON_TEXT_BAD_VALUE, "%1", value))
         Return
      }
      try {
         res := this.JS.eval( "var obj = (" . sJson . ");"
                            . "obj" . (SubStr(key, 1, 1) = "[" ? "" : ".") . key . "=" . value . ";"
                            . "JSON.stringify(obj,'','" . indent . "')" )
         this.JS.eval("obj = ''")
         Return res
      }
      catch
         console.writeln("[DEBUG] " StrReplace(RSHELL_JSON_TEXT_BAD_KEY_TO_DEBUG, "%1", key))
   }
   
   RemoveKey(sJson, key, indent := "") {
      if !this.VerifyJson(sJson)
         Return
      
      sign := SubStr(key, 1, 1) = "[" ? "" : "."
      try {
         if !RegExMatch(key, "(.*)\[(\d+)]$", match)
            res := this.JS.eval("var obj = (" . sJson . "); delete obj" . sign . key . "; JSON.stringify(obj,'','" . indent . "')")
         else
            res := this.JS.eval( "var obj = (" . sJson . ");" 
                               . "obj" . (match1 != "" ? sign . match1 : "") . ".splice(" . match2 . ", 1);"
                               . "JSON.stringify(obj,'','" . indent . "')" )
         this.JS.eval("obj = ''")
         Return res
      }
      catch
         console.writeln("[DEBUG] " StrReplace(RSHELL_JSON_TEXT_BAD_KEY_TO_DEBUG, "%1", key))
   }
   
   Enum(sJson, key := "", indent := "") {
      if !this.VerifyJson(sJson)
         Return
      
      conc := key ? (SubStr(key, 1, 1) = "[" ? "" : ".") . key : ""
      try {
         jsObj := this.JS.eval("(" sJson ")" . conc)
         res := jsObj.IsArray()
         if (res = "")
            Return
         obj := {}
         if (res = -1) {
            Loop % jsObj.length
               obj[A_Index - 1] := this.JS.eval("JSON.stringify((" sJson ")" . conc . "[" . (A_Index - 1) . "],'','" . indent . "')")
         }
         else if (res = 0) {
            keys := jsObj.GetKeys()
            Loop % keys.length
               k := keys[A_Index - 1], obj[k] := this.JS.eval("JSON.stringify((" sJson ")" . conc . "['" . k . "'],'','" . indent . "')")
         }
         Return obj
      }
      catch
         console.writeln("[DEBUG] " StrReplace(RSHELL_JSON_TEXT_BAD_KEY_TO_DEBUG, "%1", key))
   }
   
   VerifyJson(sJson, silent := false) {
      try jsObj := this.JS.eval("(" sJson ")")
      catch {
         if !silent
            console.writeln("[DEBUG] " StrReplace(RSHELL_JSON_TEXT_BAD_JSON_STRING_TO_DEBUG, "%1", sJson))
         Return
      }
      Return IsObject(jsObj) ? jsObj : true
   }
   
   _ObjToString(obj) {
      if IsObject( obj ) {
         for k, v in ["true", "false", "null"]
            if (obj = this[v])
               Return v
            
         isArray := true
         for key in obj {
            if IsObject(key)
               throw Exception("Invalid key")
            if !( key = A_Index || isArray := false )
               break
         }
         for k, v in obj
            str .= ( A_Index = 1 ? "" : "," ) . ( isArray ? "" : """" . k . """:" ) . this._ObjToString(v)

         Return isArray ? "[" str "]" : "{" str "}"
      }
      else if !(obj*1 = "" || RegExMatch(obj, "\s"))
         Return obj
      
      for k, v in [["\", "\\"], [A_Tab, "\t"], ["""", "\"""], ["/", "\/"], ["`n", "\n"], ["`r", "\r"], [Chr(12), "\f"], [Chr(08), "\b"]]
         obj := StrReplace( obj, v[1], v[2] )

      Return """" obj """"
   }

   _GetJScriptObject() {
      static doc
      doc := ComObjCreate("htmlfile")
      doc.write("<meta http-equiv=""X-UA-Compatible"" content=""IE=9"">")
      JS := doc.parentWindow
      JSON._AddMethods(JS)
      Return JS
   }

   _AddMethods(ByRef JS) {
      JScript =
      (
         Object.prototype.GetKeys = function () {
            var keys = []
            for (var k in this)
               if (this.hasOwnProperty(k))
                  keys.push(k)
            return keys
         }
         Object.prototype.IsArray = function () {
            var toStandardString = {}.toString
            return toStandardString.call(this) == '[object Array]'
         }
      )
      JS.eval(JScript)
   }

   _CreateObject(jsObj) {
      res := jsObj.IsArray()
      if (res = "")
         Return jsObj
      
      else if (res = -1) {
         obj := []
         Loop % jsObj.length
            obj[A_Index] := this._CreateObject(jsObj[A_Index - 1])
      }
      else if (res = 0) {
         obj := {}
         keys := jsObj.GetKeys()
         Loop % keys.length
            k := keys[A_Index - 1], obj[k] := this._CreateObject(jsObj[k])
      }
      Return obj
   }
}

getFreeName(prefix, ext)
{
    while(true)
    {
        Filename := prefix "" i "." ext
        i++
        if !FileExist(Filename)
            break
    }
    return Filename
}

FormatTime(ms) {
	if (ms < 1000) {
		return ms " " RSHELL_LOCALIZED_WORD_MS
	}
	
	return FormatSeconds(ms/1000)
}

parseIf(expression, cmdtodo) {
	global
	error := 0, cmdout1 := "", action := "", cmdout2 := "", cmdout3 := ""
	writing := "", brks := 0, writed := "", sc_index := "0", spaces := 0
	writing_action := 0, then_text := "", caption_cmd := 0, displayed := 0
	
	loop, parse, expression
	{
		if (A_Index < 6) {
			continue
		}
		
		if (caption_cmd) {
			cmdout3 := LTrim(cmdout3 A_LoopField)
			continue
		}

		s = `"
		if ((A_LoopField == "'") || (A_LoopField == s)) {
			if (!displayed) {
				if (!writing) {
					writing := 1, brks := brks + 1, sc_index := sc_index + 1
					continue
				} else {
					writing := 0, brks := brks - 1
					cmdout%sc_index% = % console.processVars(writed)
					writed := ""
					continue
				}
			}
		}
		
		if (A_LoopField == " ") {
			spaces+=1
			if (spaces == 1) {
				writing_action = 1
				continue
			}
			
			if (spaces == 2) {
				writing_action = 0
				continue
			}
		}
		
		if (writing) {
			writed := writed A_LoopField
		}
		
		if (writing_action == 1) {
			action := action A_LoopField
			continue
		}
		
		if (spaces > 2) {
			then_text := trim(then_text A_LoopField)
			
			if (then_text == string.down(cmdtodo)) {
				caption_cmd == 1
				continue
			}
		}
	}
}

GetMac(ByRef Line)
{
    Loop, Parse, Line
        if (A_LoopField = "-")
        {
            k:= 0, Begp:= p:= A_Index
            While (SubStr(Line, p+= 3, 1) = "-")
                k++
            if (k = 4) ; 5 in row
                return Substr(Line, Begp - 2,  17)
        }
    return ""
}

MatchStr(Str, ByRef pat){
    Loop, Parse, Str,`n,`r
    {
        if instr(A_LoopField, pat)
            NStr.= A_LoopField "`n"
    }
    return NStr
}

RunCon(CmdLine, Input, ByRef Output)
{
    static BufSizeChar := 1024, hParent := 0
    static Show := 0, Flags := 0x101  ; STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW
    static Buf, BufSizeByte, ProcessInfo, StartupInfo, PipeAttribs
    static piSize, siSize, paSize, flOffset, shOffset, ihOffset
    static inOffset, outOffset, errOffset, thrOffset
    If (!hParent) {
        BufSizeByte := A_IsUnicode ? BufSizeChar * 2 : BufSizeChar
        If (A_PtrSize = 8) {
            piSize := 24, siSize := 104, paSize = 24
            flOffset := 60, shOffset := 64, ihOffset := 16
            inOffset := 80, outOffset := 88, errOffset := 96
            thrOffset := 8
        }
        Else {
            piSize := 16, siSize := 68, paSize = 12
            flOffset := 44, shOffset := 48, ihOffset := 8
            inOffset := 56, outOffset := 60, errOffset := 64
            thrOffset := 4
        }
        VarSetCapacity(Buf, BufSizeByte, 0),    VarSetCapacity(ProcessInfo, piSize, 0)
        VarSetCapacity(StartupInfo, siSize, 0), VarSetCapacity(PipeAttribs, paSize, 0)
        NumPut(siSize, StartupInfo, 0, "uint"), NumPut(Flags, StartupInfo, flOffset, "uint")
        NumPut(Show, StartupInfo, shOffset, "ushort")
        NumPut(paSize, PipeAttribs, 0, "uint"), NumPut(1, PipeAttribs, ihOffset, "int")
        hParent := DllCall("GetCurrentProcess", "ptr")
    }
    DllCall("CreatePipe", "ptr *", hRead1_tmp, "ptr *", hWrite2
                        , "ptr", &PipeAttribs, "uint", 0)
    DllCall("CreatePipe", "ptr *", hRead2, "ptr *", hWrite1_tmp
                        , "ptr", &PipeAttribs, "uint", 0)

    NumPut(hRead2,  StartupInfo, inOffset, "ptr") 
    NumPut(hWrite2, StartupInfo, outOffset, "ptr")
    NumPut(hWrite2, StartupInfo, errOffset, "ptr")
    
    DllCall("DuplicateHandle", "ptr", hParent, "ptr", hRead1_tmp
                             , "ptr", hParent, "ptr *", hRead1
                             , "uint", 0, "uint", 0
                             , "uint", 2)    ; DUPLICATE_SAME_ACCESS
    DllCall("CloseHandle", "ptr", hRead1_tmp)
    DllCall("DuplicateHandle", "ptr", hParent, "ptr", hWrite1_tmp
                             , "ptr", hParent, "ptr *", hWrite1
                             , "uint", 0, "uint", 0
                             , "uint", 2)
    DllCall("CloseHandle", "ptr", hWrite1_tmp)
    
    DllCall("ExpandEnvironmentStrings", "str", CmdLine, "str", Buf, "uint", BufSizeChar)
    CmdLine := Buf
    Ret := DllCall("CreateProcess", "ptr", 0, "str", CmdLine, "ptr", 0, "ptr", 0
                                  , "uint", 1, "uint", 0, "ptr", 0, "ptr", 0
                                  , "ptr", &StartupInfo, "ptr", &ProcessInfo)
    If (!Ret) {
        MsgBox,, %A_ThisFunc%, % RSHELL_RUNCON_CANT_CREATE_PROCESS
        Output := ""
        Return 1
    }
    hChild := NumGet(ProcessInfo, 0, "ptr")
    DllCall("CloseHandle", "ptr", NumGet(ProcessInfo, thrOffset, "ptr"))
    DllCall("CloseHandle", "ptr", hRead2)
    DllCall("CloseHandle", "ptr", hWrite2)
    If (Input) {
        InLen := StrLen(Input) + 2
        VarSetCapacity(InBuf, InLen, 0)
        StrPut(Input . "`r`n", &InBuf, "cp1251")
        DllCall("WriteFile", "ptr", hWrite1, "ptr", &InBuf, "uint", InLen
                           , "uint *", BytesWritten, "uint", 0)
    }
    DllCall("CloseHandle", "ptr", hWrite1)
    Output := ""
    Loop {
        If not DllCall("ReadFile", "ptr", hRead1, "ptr", &Buf, "uint", BufSizeByte
                                 , "uint *", BytesRead, "uint", 0)
            Break
        NumPut(0, Buf, BytesRead, "Char")
        Output .= StrGet(&Buf, "cp1251")
    }
    DllCall("CloseHandle", "ptr", hRead1)
    DllCall("GetExitCodeProcess", "ptr", hChild, "int *", ExitCode)
    DllCall("CloseHandle", "ptr", hChild)
    Return ExitCode
}

Process_Suspend(PID_or_Name){

    PID := (InStr(PID_or_Name,".")) ? ProcExist(PID_or_Name) : PID_or_Name

    h:=DllCall("OpenProcess", "uInt", 0x1F0FFF, "Int", 0, "Int", pid)

    If !h   

        Return -1

    DllCall("ntdll.dll\NtSuspendProcess", "Int", h)

    DllCall("CloseHandle", "Int", h)

}

Process_Resume(PID_or_Name){

    PID := (InStr(PID_or_Name,".")) ? ProcExist(PID_or_Name) : PID_or_Name

    h:=DllCall("OpenProcess", "uInt", 0x1F0FFF, "Int", 0, "Int", pid)

    If !h   

        Return -1

    DllCall("ntdll.dll\NtResumeProcess", "Int", h)

    DllCall("CloseHandle", "Int", h)

}

ProcExist(PID_or_Name=""){

    Process, Exist, % (PID_or_Name="") ? DllCall("GetCurrentProcessID") : PID_or_Name

    Return Errorlevel

}

FormatSeconds(NumberOfSeconds) {
 time = 20010101 ;1/1/2001
 time += NumberOfSeconds, seconds
 FormatTime, y, %time%, y
 FormatTime, M, %time%, M
 FormatTime, d, %time%, d
 FormatTime, HHmmss, %time%, m:ss
 Return hhmmss
}

SplitCommand(textToParse, Index, Output, processVariables=1, showErrors=1) {
	loop, 32
		%output%%A_Index% = % ""
	
	caption_parameter 	:= 0
	captioned_parameter	:= ""
	parameter_index		:= 0
	displayed_symbol	:= 0
	command_name		:= ""
	from_space			:= 0
	caption_space		:= 0
	
	; Обрезаем строку до первого пробела (обычно там указано название команды)
	loop, parse, textToParse, % " "
	{
		if (A_Index == 1) {
			%output%0 := A_LoopField
			command_name := A_LoopField
			break
		}
	}
	
	StringReplace, textToParse, textToParse, % command_name,, All
	textToParse_Len := string.len(textToParse)
	
	if (Index < 2) {
		if (processVariables == 1)
			%output%1 = % console.processVars(string.right(textToParse, textToParse_Len-1))
		else
			%output%1 = % string.right(textToParse, textToParse_Len-1)
		
		return 1
	}
	
	loop, parse, textToParse, % ""
	{
		if (displayed_symbol == 1) {
			captioned_parameter := captioned_parameter A_LoopField
			continue
		}
		
		if (A_LoopField == "``") {
			; Экранирование символа
			displayed_symbol 		:= 1
			continue
		}
		
		if ((A_LoopField == " ") && (caption_parameter != 1)) {
			from_space := 1
			continue
		}
		
		if ((A_LoopField == " ") && (caption_space == 1)) {
			; Конец захвата
			caption_space := 0
			caption_parameter := 0
			if (processVariables == 1)
				%output%%parameter_index% = % console.processVars(captioned_parameter)
			else
				%output%%parameter_index% = % captioned_parameter
			captioned_parameter := ""
			from_space := 1
			continue
		}
		
		if ((A_LoopField == """") || (A_LoopField == "'")) {
			if (caption_parameter == 0) {
				; Начало захвата
				from_space := 0
				caption_parameter := 1
				parameter_index += 1
				continue
			} else {
				; Конец захвата
				caption_parameter := 0
				if (processVariables == 1)
					%output%%parameter_index% = % console.processVars(captioned_parameter)
				else
					%output%%parameter_index% = % captioned_parameter
				captioned_parameter := ""
				continue
			}
		}
		
		if ((from_space == 1) && (caption_parameter == 0)) {
			; Начало захвата
			caption_space := 1
			from_space := 0
			caption_parameter := 1
			parameter_index += 1
			captioned_parameter := A_LoopField
			continue
		}
		
		if (caption_parameter == 1) {
			captioned_parameter := captioned_parameter A_LoopField
			continue
		}
	}
	
	if (caption_parameter == 1) {
		caption_parameter := 0
		if (processVariables == 1)
			%output%%parameter_index% = % console.processVars(captioned_parameter)
		else
			%output%%parameter_index% = % captioned_parameter
		captioned_parameter := ""
	}
	
	if (!parserAllowParameterVoid) {
		if (Parameter_Index < Index) {
			if (showErrors == 1) {
				console.error(StrReplace(StrReplace(RSHELL_PARSER_NEED_WRITE_PARAMETERS, "%2", index), "%1", Parameter_Index))
				return -2
			}
		}
	}
	
	return 1
}

ProcessArgument(name) {
	global
	
	arg_name := name
	arg_process := trim(string.up(arg_name)) ; хотел arg_to_process
	
	if (arg_process == "/COMPILE") {
		script_path = %2%
		icon_path = %3%
		script_param = %4%
		save_path = %5%
		with_init = %6%
		
		if with_init
		{
			console.init()
		}
		
		executeCMD(RSHELL_COMMAND_NAME_COMPILE "'" script_path "' '" icon_path "' '" script_param "' '" save_path "'")
		exitapp
	}
	
	if (arg_process == "/HIDE") {
		if ((started) && (!shell_mode))
			MsgBox, 0, % title, % RSHELL_WARNING_PARAM_HIDE, 5
		
		hide_mode = 1
		WinHide, ahk_id %mainwid%
		return 1
	}
	
	if (arg_process == "/AIDE") {
		if (started) {
			console.error(RSHELL_WARNING_PARAM_AIDE)
			return 0
		}
		
		adaptate_ide := 1
		return 1
	}

	if (arg_process == "/NS") {
		no_suspend = 1
		return 1
	}
	
	if (arg_process == "/NEW") {
		if (started) {
			console.error(RSHELL_WARNING_PARAM_NEW)
			return 0
		}
		
		no_attach = 1
		return 1
	}
	
	if (arg_process == "/IGNORE_ERRORS") {
		ignore_errors = 1
		return 1
	}
	
	if (arg_process == "/IGNORE_WARNINGS") {
		ignore_warnings = 1
		return 1
	}
	
	if (arg_process == "/OUTPUT_MODE:MSG") {
		output_mode = msg
		return 1
	}
	
	if (arg_process == "/OUTPUT_MODE:PRINT") {
		output_mode = print
		return 1
	}
	
	if (arg_process == "/DEBUG") {
		debug = 1
		
		if (!dbgwid) {
			MsgBox, 48, % title " - DEBUG", % RSHELL_DEBUG_WARNING
			
			if (mainwid) {
				WinGetPos, posx, posy, posw, posh, ahk_id %mainwid%
				xpos := (posx+posw)-posw/2
			} else {
				xpos := A_ScreenWidth/1.5, posy := A_ScreenHeight/1.5
			}
			
			Menu, DMenu1, Add, % RSHELL_DEBUG_GO_TO_LINE, debug_gotoLine
			Menu, DMenu1, Add, % RSHELL_DEBUG_EXECUTE_CMD, executeCommand
			Menu, DMenu1, Add, 
			Menu, DMenu1, Add, % RSHELL_DEBUG_PAUSE_CMD, debug_pause_menu
			Menu, Gui, Add, % RSHELL_DEBUG_MENU_NAME, :dmenu1
			
			gosub debug_pause_menu
			
			Gui, dbg:Default
			Gui, dbg:+AlwaysOnTop +Resize +hwnddbgwid
			Gui, dbg:Font, CDefault S8, Segoe UI
			Gui, dbg:Add, ListView, x-1 y-1 w500 h300 vDbgCtrl +Report, % RSHELL_DEBUG_LISTVIEW_TEXT
			Gui, dbg:Show, x%xpos% y%posy% w558 h352 NA, % title " - DEBUG"
			Gui, dbg:Menu, Gui
			
			hSysMenu:=DllCall("GetSystemMenu", "Int", dbgwid, "Int", false)
			nCnt:=DllCall("GetMenuItemCount","Int",hSysMenu)
			DllCall("RemoveMenu","Int",hSysMenu,"UInt",nCnt-1,"Uint","0x400")
		}
		return 1
	}
	
	if (arg_process == "/LOG") {
		log = 1
		return 1
	}
	
	console.warning(StrReplace(RSHELL_WARNING_PARAM_NOT_PROCESSED, "%1", arg_process))
	return 0
}

processCmd(cmd) {
	command := "", displayed := 0
	
	loop, parse, cmd
	{
		if (!displayed) {
			if (A_LoopField == "``") {
				displayed := 1
				continue
			}
			
			if (A_LoopField == ";") {
				WinGetTitle, titlee, ahk_id %mainwid%
				
				pc_result := executeCMD(command)
				
				command := ""
				if (debug) {
					console.writeln("[DEBUG] " StrReplace(RSHELL_PROCESSCMD_TO_DEBUG, "%1", pc_result))
				}
				continue
			}
		} else {
			s = `"
			if ((A_LoopField == "'") || (A_LoopField == s)) {
				command := command "``'", displayed := 0
				continue
			}
		
			if (string.down(A_LoopField) == "t") {
				command := command "`t", displayed := 0
				continue
			}
			
			if (string.down(A_LoopField) == "n") {
				command := command "`n", displayed := 0
				continue
			}
		}
		
		command := command A_LoopField
		displayed := 0
	}
	
	if (trim(command) != "") {
		WinGetTitle, titlee, ahk_id %mainwid%
		pc_result := executeCMD(command)
		
		if (debug) {
			console.writeln("[DEBUG] " StrReplace(RSHELL_PROCESSCMD_TO_DEBUG, "%1", pc_result))
		}
	}
}

executeCMD(cmd) {
	global
	
	cmd_text := trim(cmd)
	cmd_process := string.getLine(string.up(cmd_text), 1)
	
	if (trim(cmd_process) == "") {
		return 0
	}
	
	; Команды с несколькими параметрами
	loop, parse, cmd_process, % A_Space
	{
		cmd_process_first := trim(A_LoopField)
		break
	}
	
	if (!A_IsAdmin) {
		if (trim(service__PermissionUseCMD_FalseList) != "") {
			loop, parse, service__PermissionUseCMD_FalseList, % " "
			{
				if (string.up(cmd_process_first) == string.up(A_LoopField)) {
					console.error(RSHELL_EXECUTECMD_DONT_HAVE_PERMISSION)
					return -100
				}
			}
		}
	}
	
	cmd_last_first := cmd_process_first
	cmd_last := cmd_process
	
	if (shell_mode) {
		for key in cmd_functions 
		{
			if (string.up(trim(key)) == string.up(trim(cmd))) {
				if debug
					console.writeln("[DEBUG] " StrReplace(RSHELL_DEBUG_GO_FUNC_SUCCESSFUL, "%1", key))
				
				script := cmd_functions[key]
				loop, parse, script, `n
				{
					pc_result := executeCMD(A_LoopField)
					if debug
						console.writeln("[DEBUG] " StrReplace(RSHELL_PROCESSCMD_TO_DEBUG, "%1", pc_result))
				}
				
				return 1
			}
		}
	}
	
	if ((string.right(cmd_process_first, 1) == "?") && (string.len(cmd_process_first) > 2)) {
		cmd_text := RSHELL_COMMAND_NAME_DOCUMENTATION " " string.left(cmd_process_first, string.len(cmd_process_first)-1)
		cmd_process_first := RSHELL_COMMAND_NAME_DOCUMENTATION
	}
	
	if (cmd_process_first == ".") {
		Run, % A_WorkingDir,, UseErrorLevel
		return 1
	}
	
	if ((cmd_process_first == RSHELL_COMMAND_NAME_PROGRAM) || (cmd_process_first == "??")) {
		gosub aboutprog
		return 1
	}
	
	if ((cmd_process_first == RSHELL_COMMAND_NAME_DOCUMENTATION) || (cmd_process_first == "?")) {
		SplitCommand(cmd_text, 1, "cmdout")
		
		if (cmdout1 == ".") {
			Run, %A_ScriptFullPath% "?" /new /ns /hide,, UseErrorLevel
			if (errorlevel) {
				console.error(RSHELL_UNABLE_OPEN_DOCUMENTATION_ASYNC)
				return 0
			}
			
			return 1
		}
		
		Gui, 1:Destroy
		Gui, 1:Default
	 	Gui, 1:+OwnDialogs +hwnddocswid -MinimizeBox
		Gui, 1:Color, White
		Gui, 1:Font, S9 CDefault, Segoe UI
		
		ImageListID := IL_Create(10)
		IL_Add(ImageListID, "shell32.dll", 71)
		IL_Add(ImageListID, "shell32.dll", 4)
		
		Gui, 1:Add, TreeView, x-1 y-1 w481 h364 vTV gTVClick ImageList%ImageListID% -0x1
		
		if ((trim(cmdout1) == "") && (!justgen)) {
			Gui, 1:Show, w479 h363, % RSHELL_DOCUMENTATION_WINDOW_TITLE
		}
		
		GuiControl, 1:hide, tv
		
		tvs := "", tvs := [] ; сброс
		
		TV_START 				:= addtv(RSHELL_TV_START,, "Icon2")
		TV_START_INTRO			:= addtv(RSHELL_TV_START_INFO, TV_START)
		TV_START_TUTORIAL		:= addtv(RSHELL_TV_START_TUTORIAL, TV_START)
		
		TV_VAR					:= addtv(RSHELL_TV_VAR,, "Icon2")
		TV_VAR_TIME_DD			:= addtv("'" RSHELL_VARNAME_TIME_DAY "'", TV_VAR)
		TV_VAR_TIME_MM			:= addtv("'" RSHELL_VARNAME_TIME_MONTH "'", TV_VAR)
		TV_VAR_TIME_YYYY		:= addtv("'" RSHELL_VARNAME_TIME_YEAR "'", TV_VAR)
		TV_VAR_TIME_HOUR		:= addtv("'" RSHELL_VARNAME_TIME_HOUR "'", TV_VAR)
		TV_VAR_TIME_MIN			:= addtv("'" RSHELL_VARNAME_TIME_MIN "'", TV_VAR)
		TV_VAR_TIME_SEC			:= addtv("'" RSHELL_VARNAME_TIME_SEC "'", TV_VAR)
		TV_VAR_TIME_TICKCOUNT	:= addtv("'" RSHELL_VARNAME_TIME_TICKCOUNT "'", TV_VAR)
		TV_VAR_TIME_MMM			:= addtv("'" RSHELL_VARNAME_TIME_MMM "'", TV_VAR)
		TV_VAR_TIME_MMMM		:= addtv("'" RSHELL_VARNAME_TIME_MMMM "'", TV_VAR)
		TV_VAR_TIME_DDD			:= addtv("'" RSHELL_VARNAME_TIME_DDD "'", TV_VAR)
		TV_VAR_TIME_DDDD		:= addtv("'" RSHELL_VARNAME_TIME_DDDD "'", TV_VAR)
		TV_VAR_CONSOLE_VERSION	:= addtv("'" RSHELL_VARNAME_CONSOLE_VERSION "'", TV_VAR)
		TV_VAR_CONSOLE_ADMIN	:= addtv("'" RSHELL_VARNAME_CONSOLE_ADMIN "'", TV_VAR)
		TV_VAR_CONSOLE_RESULT	:= addtv("'" RSHELL_VARNAME_CONSOLE_RESULT "'", TV_VAR)
		TV_VAR_CONSOLE_FOLDER	:= addtv("'" RSHELL_VARNAME_CONSOLE_ROOTDIR "'", TV_VAR)
		TV_VAR_CONSOLE_SPACE	:= addtv("'" RSHELL_VARNAME_CONSOLE_SPACE "'", TV_VAR)
		TV_VAR_CONSOLE_WORKDIR	:= addtv("'" RSHELL_VARNAME_CONSOLE_WORKINGDIR "'", TV_VAR)
		TV_VAR_CONSOLE_PATH		:= addtv("'" RSHELL_VARNAME_CONSOLE_PATH "'", TV_VAR)
		TV_VAR_CONSOLE_PATH_DIR	:= addtv("'" RSHELL_VARNAME_CONSOLE_PATHDIR "'", TV_VAR)
		TV_VAR_CONSOLE_SCRIPT	:= addtv("'" RSHELL_VARNAME_CONSOLE_SCRIPT "'", TV_VAR)
		TV_VAR_CONSOLE_NAME		:= addtv("'" RSHELL_VARNAME_CONSOLE_NAME "'", TV_VAR)
		TV_VAR_CONSOLE_ENV		:= addtv("'" StrReplace(RSHELL_VARNAME_ENVIRONMENT, "%1", "*") "'", TV_VAR)
		TV_VAR_SYSTEM_APPDATA	:= addtv("'" RSHELL_VARNAME_SYSTEM_APPDATA "'", TV_VAR)
		TV_VAR_SYSTEM_CAPPDATA	:= addtv("'" RSHELL_VARNAME_SYSTEM_APPDATACOMMON "'", TV_VAR)
		TV_VAR_SYSTEM_DESKTOP	:= addtv("'" RSHELL_VARNAME_SYSTEM_DESKTOP "'", TV_VAR)
		TV_VAR_SYSTEM_CDESKTOP	:= addtv("'" RSHELL_VARNAME_SYSTEM_DESKTOPCOMMON "'", TV_VAR)
		TV_VAR_SYSTEM_64BITOS	:= addtv("'" RSHELL_VARNAME_SYSTEM_IS64BITOS "'", TV_VAR)
		TV_VAR_SYSTEM_DOCUMENTS	:= addtv("'" RSHELL_VARNAME_SYSTEM_DOCUMENTS "'", TV_VAR)
		TV_VAR_SYSTEM_PROGFILES	:= addtv("'" RSHELL_VARNAME_SYSTEM_PROGRAMFILES "'", TV_VAR)
		TV_VAR_SYSTEM_PROGRAMS	:= addtv("'" RSHELL_VARNAME_SYSTEM_PROGRAMS "'", TV_VAR)
		TV_VAR_SYSTEM_CPROGRAMS	:= addtv("'" RSHELL_VARNAME_SYSTEM_PROGRAMSCOMMON "'", TV_VAR)
		TV_VAR_SYSTEM_STARTMENU	:= addtv("'" RSHELL_VARNAME_SYSTEM_STARTMENU "'", TV_VAR)
		TV_VAR_SYSTEM_CSTARTMEN := addtv("'" RSHELL_VARNAME_SYSTEM_STARTMENUCOMMON "'", TV_VAR)
		TV_VAR_SYSTEM_STARTUP	:= addtv("'" RSHELL_VARNAME_SYSTEM_STARTUP "'", TV_VAR)
		TV_VAR_SYSTEM_CSTARTUP	:= addtv("'" RSHELL_VARNAME_SYSTEM_STARTUPCOMMON "'", TV_VAR)
		TV_VAR_SYSTEM_OSTYPE	:= addtv("'" RSHELL_VARNAME_SYSTEM_OSTYPE "'", TV_VAR)
		TV_VAR_SYSTEM_VERSION	:= addtv("'" RSHELL_VARNAME_SYSTEM_OSVERSION "'", TV_VAR)
		TV_VAR_SYSTEM_USERNAME	:= addtv("'" RSHELL_VARNAME_SYSTEM_USERNAME "'", TV_VAR)
		TV_VAR_SYSTEM_COMPUTER	:= addtv("'" RSHELL_VARNAME_SYSTEM_COMPUTERNAME "'", TV_VAR)
		TV_VAR_SYSTEM_CLIPBOARD	:= addtv("'" RSHELL_VARNAME_SYSTEM_CLIPBOARD "'", TV_VAR)
		TV_VAR_SCREEN_WIDTH		:= addtv("'" RSHELL_VARNAME_SCREEN_WIDTH "'", TV_VAR)
		TV_VAR_SCREEN_HEIGHT	:= addtv("'" RSHELL_VARNAME_SCREEN_HEIGHT "'", TV_VAR)
		
		TV_MAIN					:= addtv(RSHELL_TV_MAIN,, "Icon2")
		TV_MAIN_HOTKEYS			:= addtv(RSHELL_TV_MAIN_HOTKEYS, TV_MAIN)
		TV_MAIN_MACROCOMMANDS	:= addtv(RSHELL_TV_MAIN_MACROCOMMANDS, TV_MAIN)
		TV_MAIN_KEYLIST			:= addtv(RSHELL_TV_MAIN_KEYLIST, TV_MAIN)
		TV_MAIN_SCRIPTS			:= addtv(RSHELL_TV_MAIN_SCRIPTS, TV_MAIN)
		TV_MAIN_VARIABLES		:= addtv(RSHELL_TV_MAIN_VARIABLES, TV_MAIN)
		
		TV_ADDONS				:= addtv(RSHELL_TV_ADDONS,, "Icon2")
		TV_ADDONS_QUICKSTART	:= addtv(RSHELL_TV_ADDONS_QUICKSTART, TV_ADDONS)
		TV_ADDONS_CREATING		:= addtv(RSHELL_TV_ADDONS_CREATING, TV_ADDONS)
		TV_ADDONS_COMPILING		:= addtv(RSHELL_TV_ADDONS_COMPILING, TV_ADDONS)
		TV_ADDONS_DELETE		:= addtv(RSHELL_TV_ADDONS_DELETE, TV_ADDONS)
		
		TV_CMDS					:= addtv(RSHELL_TV_CMDS,, "Icon2")
		TV_CMDS_CONSOLE			:= addtv(RSHELL_TV_CMDS_CONSOLE, TV_CMDS, "Icon2")
		TV_CMDS_CONSOLE_ADDON	:= addtv(RSHELL_COMMAND_NAME_ADDON, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_ADZ		:= addtv(RSHELL_COMMAND_NAME_ADZ, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_ADMIN	:= addtv(RSHELL_COMMAND_NAME_ADMIN, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_UPDLIST	:= addtv(RSHELL_COMMAND_NAME_UPDATELIST, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_ASYNC	:= addtv(RSHELL_COMMAND_NAME_ASYNC, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_INPUT	:= addtv(RSHELL_COMMAND_NAME_INPUT, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_OUTPUT	:= addtv(RSHELL_COMMAND_NAME_OUTPUT, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_OUTPUTL	:= addtv(RSHELL_COMMAND_NAME_OUTPUTL, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_OUTCON	:= addtv(RSHELL_COMMAND_NAME_OUTCON, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_TITLE	:= addtv(RSHELL_COMMAND_NAME_TITLE, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_WOUTPUT	:= addtv(RSHELL_COMMAND_NAME_WOUTPUT, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_INFO	:= addtv(RSHELL_COMMAND_NAME_INFO, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_CONSOLE	:= addtv(RSHELL_COMMAND_NAME_CONSOLE, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_LEARN	:= addtv(RSHELL_COMMAND_NAME_TUTORIAL, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_PAUSE	:= addtv(RSHELL_COMMAND_NAME_PAUSE, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_TRANSP	:= addtv(RSHELL_COMMAND_NAME_TRANSPARENT, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_DO		:= addtv(RSHELL_COMMAND_NAME_DO, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_SVC		:= addtv(RSHELL_COMMAND_NAME_SVC, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_COMPILE	:= addtv(RSHELL_COMMAND_NAME_COMPILE, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_CMDLIST	:= addtv(RSHELL_COMMAND_NAME_CMDLIST, TV_CMDS_CONSOLE)
		TV_CMDS_CONSOLE_DOCS	:= addtv(RSHELL_COMMAND_NAME_DOCS, TV_CMDS_CONSOLE)	
		
		TV_CMDS_CNSTCT			:= addtv(RSHELL_TV_CMDS_CNSTCT, TV_CMDS, "Icon2")
		TV_CMDS_CNSTCT_END		:= addtv(RSHELL_COMMAND_NAME_END, TV_CMDS_CNSTCT)
		TV_CMDS_CNSTCT_LABEL	:= addtv(RSHELL_COMMAND_NAME_LABEL, TV_CMDS_CNSTCT)
		TV_CMDS_CNSTCT_GOTO		:= addtv(RSHELL_COMMAND_NAME_GOTO, TV_CMDS_CNSTCT)
		TV_CMDS_CNSTCT_FUNC		:= addtv(RSHELL_COMMAND_NAME_FUNC, TV_CMDS_CNSTCT)
		
		TV_CMDS_KEYBOARD		:= addtv(RSHELL_TV_CMDS_KEYBOARD, TV_CMDS, "Icon2")
		TV_CMDS_KEYBOARD_INPUT	:= addtv(RSHELL_COMMAND_NAME_KEYBOARD_INPUT, TV_CMDS_KEYBOARD)
		TV_CMDS_KEYBOARD_HKEYS	:= addtv(RSHELL_COMMAND_NAME_HKEYS, TV_CMDS_KEYBOARD)
		TV_CMDS_KEYBOARD_WRITE	:= addtv(RSHELL_COMMAND_NAME_WRITE, TV_CMDS_KEYBOARD)
		TV_CMDS_KEYBOARD_WRITEF	:= addtv(RSHELL_COMMAND_NAME_WRITEF, TV_CMDS_KEYBOARD)
		
		TV_CMDS_MOUSE			:= addtv(RSHELL_TV_CMDS_MOUSE, TV_CMDS, "Icon2")
		TV_CMDS_MOUSE_MOVE		:= addtv(RSHELL_COMMAND_NAME_MOUSE_MOVE, TV_CMDS_MOUSE)
		
		TV_CMDS_REG				:= addtv(RSHELL_TV_CMDS_REG, TV_CMDS, "Icon2")
		TV_CMDS_REG_WRITE		:= addtv(RSHELL_COMMAND_NAME_REG_WRITE, TV_CMDS_REG)
		TV_CMDS_REG_READ		:= addtv(RSHELL_COMMAND_NAME_REG_READ, TV_CMDS_REG)
		TV_CMDS_REG_DELETE		:= addtv(RSHELL_COMMAND_NAME_REG_DELETE, TV_CMDS_REG)
		
		TV_CMDS_DIALOG			:= addtv(RSHELL_TV_CMDS_DIALOG, TV_CMDS, "Icon2")
		TV_CMDS_DIALOG_INPUTBOX	:= addtv(RSHELL_COMMAND_NAME_DIALOG_INPUTBOX, TV_CMDS_DIALOG)
		TV_CMDS_DIALOG_MSGBOX	:= addtv(RSHELL_COMMAND_NAME_MSGBOX, TV_CMDS_DIALOG)
		
		TV_CMDS_LINES			:= addtv(RSHELL_TV_CMDS_STRINGS, TV_CMDS, "Icon2")
		TV_CMDS_LINES_JSON		:= addtv(RSHELL_COMMAND_NAME_JSON, TV_CMDS_LINES)
		TV_CMDS_LINES_ARR_UNIT	:= addtv(RSHELL_COMMAND_NAME_ARR_UNIT, TV_CMDS_LINES)
		TV_CMDS_LINES_VAR		:= addtv(RSHELL_COMMAND_NAME_VAR, TV_CMDS_LINES)
		TV_CMDS_LINES_UNUNIT	:= addtv(RSHELL_COMMAND_NAME_STRING_UNUNIT, TV_CMDS_LINES)
		TV_CMDS_LINES_REPLACE	:= addtv(RSHELL_COMMAND_NAME_STRING_REPLACE, TV_CMDS_LINES)
		
		TV_CMDS_PROCESSES		:= addtv(RSHELL_TV_CMDS_PROCESSES, TV_CMDS, "Icon2")
		TV_CMDS_PROCESSES_EXIT	:= addtv(RSHELL_COMMAND_NAME_EXIT, TV_CMDS_PROCESSES)
		TV_CMDS_PROCESSES_WTIME	:= addtv(RSHELL_COMMAND_NAME_WAIT_TIME, TV_CMDS_PROCESSES)
		TV_CMDS_PROCESSES_WPRES	:= addtv(RSHELL_COMMAND_NAME_WAIT_KEY, TV_CMDS_PROCESSES) ;специально wpres, т.к. нет места, похуй
		TV_CMDS_PROCESSES_CMD	:= addtv(RSHELL_COMMAND_NAME_CMD, TV_CMDS_PROCESSES)
		TV_CMDS_PROCESSES_PROC	:= addtv(RSHELL_COMMAND_NAME_PROCESS, TV_CMDS_PROCESSES)
		TV_CMDS_PROCESSES_PROCF	:= addtv(RSHELL_COMMAND_NAME_PROCESS_SEARCH, TV_CMDS_PROCESSES)
		TV_CMDS_PROCESSES_PSH	:= addtv(RSHELL_COMMAND_NAME_POWERSHELL, TV_CMDS_PROCESSES)
		TV_CMDS_PROCESSES_RAND	:= addtv(RSHELL_COMMAND_NAME_RANDOM, TV_CMDS_PROCESSES)
		TV_CMDS_PROCESSES_RSTRT	:= addtv(RSHELL_COMMAND_NAME_RESTART, TV_CMDS_PROCESSES)
		TV_CMDS_PROCESSES_SHUTD	:= addtv(RSHELL_COMMAND_NAME_SESSION, TV_CMDS_PROCESSES)
		
		TV_CMDS_SOUND			:= addtv(RSHELL_TV_CMDS_SOUND, TV_CMDS, "Icon2")
		TV_CMDS_SOUND_SET		:= addtv(RSHELL_COMMAND_NAME_SOUND_SET, TV_CMDS_SOUND)
		TV_CMDS_SOUND_BEEP		:= addtv(RSHELL_COMMAND_NAME_SOUND_BEEP, TV_CMDS_SOUND)
		TV_CMDS_SOUND_GET		:= addtv(RSHELL_COMMAND_NAME_SOUND_GET, TV_CMDS_SOUND)
		TV_CMDS_SOUND_PLAY		:= addtv(RSHELL_COMMAND_NAME_SOUND_PLAY, TV_CMDS_SOUND)
	
		TV_CMDS_DISPLAY			:= addtv(RSHELL_TV_CMDS_DISPLAY, TV_CMDS, "Icon2")
		TV_CMDS_DISPLAY_MONITOR	:= addtv(RSHELL_COMMAND_NAME_DISPLAY, TV_CMDS_DISPLAY)
		TV_CMDS_DISPLAY_TOOLTIP	:= addtv(RSHELL_COMMAND_NAME_TOOLTIP, TV_CMDS_DISPLAY)
		TV_CMDS_DISPLAY_SCREENS	:= addtv(RSHELL_COMMAND_NAME_SCREENSHOT, TV_CMDS_DISPLAY)
		TV_CMDS_DISPLAY_STXTON	:= addtv(RSHELL_COMMAND_NAME_STEXTON, TV_CMDS_DISPLAY)
		TV_CMDS_DISPLAY_STXTOFF	:= addtv(RSHELL_COMMAND_NAME_STEXTOFF, TV_CMDS_DISPLAY)
		TV_CMDS_DISPLAY_TRAYTIP	:= addtv(RSHELL_COMMAND_NAME_TRAYTIP, TV_CMDS_DISPLAY)
		TV_CMDS_DISPLAY_BRIGHT	:= addtv(RSHELL_COMMAND_NAME_BRIGHTNESS, TV_CMDS_DISPLAY)
		
		TV_CMDS_WIN				:= addtv(RSHELL_TV_CMDS_WIN, TV_CMDS, "Icon2")
		TV_CMDS_WIN_ELEM		:= addtv(RSHELL_TV_CMDS_WIN_ELEM, TV_CMDS_WIN, "Icon2")
		TV_CMDS_WIN_ELEM_ELEM	:= addtv(RSHELL_COMMAND_NAME_WIN_ELEM, TV_CMDS_WIN_ELEM)
		TV_CMDS_WIN_ELEM_MOVE	:= addtv(RSHELL_COMMAND_NAME_WIN_ELEM_MOVE, TV_CMDS_WIN_ELEM)
		TV_CMDS_WIN_ELEM_VALUE	:= addtv(RSHELL_COMMAND_NAME_WIN_ELEM_VALUE, TV_CMDS_WIN_ELEM)
		TV_CMDS_WIN_ELEM_WRITE	:= addtv(RSHELL_COMMAND_NAME_WIN_ELEM_WRITE, TV_CMDS_WIN_ELEM)
		TV_CMDS_WIN_WAIT		:= addtv(RSHELL_COMMAND_NAME_WIN_WAIT, TV_CMDS_WIN)
		TV_CMDS_WIN_WAIT_ACTI	:= addtv(RSHELL_COMMAND_NAME_WIN_WAIT_ACTIVE, TV_CMDS_WIN)
		TV_CMDS_WIN_WAIT_DEACTI	:= addtv(RSHELL_COMMAND_NAME_WIN_WAIT_DEACTIVE, TV_CMDS_WIN)
		TV_CMDS_WIN_WAIT_CLOSE	:= addtv(RSHELL_COMMAND_NAME_WIN_WAIT_CLOSE, TV_CMDS_WIN)
		TV_CMDS_WIN_ACTIVATE	:= addtv(RSHELL_COMMAND_NAME_WIN_ACTIVATE, TV_CMDS_WIN)
		TV_CMDS_WIN_RESTORE		:= addtv(RSHELL_COMMAND_NAME_WIN_RESTORE, TV_CMDS_WIN)
		TV_CMDS_WIN_TITLE		:= addtv(RSHELL_COMMAND_NAME_WIN_TITLE, TV_CMDS_WIN)
		TV_CMDS_WIN_CLOSE		:= addtv(RSHELL_COMMAND_NAME_WIN_CLOSE, TV_CMDS_WIN)
		TV_CMDS_WIN_SHOW		:= addtv(RSHELL_COMMAND_NAME_WIN_SHOW, TV_CMDS_WIN)
		TV_CMDS_WIN_MAXIMIZE	:= addtv(RSHELL_COMMAND_NAME_WIN_MAXIMIZE, TV_CMDS_WIN)
		TV_CMDS_WIN_MINIMIZE	:= addtv(RSHELL_COMMAND_NAME_WIN_MINIMIZE, TV_CMDS_WIN)
		TV_CMDS_WIN_HIDE		:= addtv(RSHELL_COMMAND_NAME_WIN_HIDE, TV_CMDS_WIN)
		
		TV_CMDS_DIR				:= addtv(RSHELL_TV_CMDS_DIR, TV_CMDS, "Icon2")
		TV_CMDS_DIR_DOWNLOAD	:= addtv(RSHELL_COMMAND_NAME_DOWNLOADWITHOUTASK, TV_CMDS_DIR)
		
		TV_CMDS_VOICESP			:= addtv(RSHELL_TV_CMDS_VOICESP, TV_CMDS, "Icon2")
		TV_CMDS_VOICESP_VOLUME	:= addtv(RSHELL_COMMAND_NAME_VOICESP_VOLUME, TV_CMDS_VOICESP)
		TV_CMDS_VOICESP_SAY		:= addtv(RSHELL_COMMAND_NAME_VOICESP_SAY, TV_CMDS_VOICESP)
		TV_CMDS_VOICESP_SPEED	:= addtv(RSHELL_COMMAND_NAME_VOICESP_SPEED, TV_CMDS_VOICESP)
		
		TV_CMDS_NETWORK			:= addtv(RSHELL_TV_CMDS_NETWORK, TV_CMDS, "Icon2")
		TV_CMDS_NETWORK_VKAPI	:= addtv(RSHELL_COMMAND_NAME_VKAPI, TV_CMDS_NETWORK)
		TV_CMDS_NETWORK_VKAPIR	:= addtv(RSHELL_COMMAND_NAME_VKAPI_RESET, TV_CMDS_NETWORK)
		TV_CMDS_NETWORK_REQUEST	:= addtv(RSHELL_COMMAND_NAME_REQUEST, TV_CMDS_NETWORK)
		TV_CMDS_NETWORK_POST	:= addtv(RSHELL_COMMAND_NAME_POST, TV_CMDS_NETWORK)
		TV_CMDS_NETWORK_CFD		:= addtv(RSHELL_COMMAND_NAME_CREATEFORMDATA, TV_CMDS_NETWORK)
		TV_CMDS_NETWORK_SCAN	:= addtv(RSHELL_COMMAND_NAME_NETWORK_SCAN, TV_CMDS_NETWORK)

		TV_CMDS_FILE			:= addtv(RSHELL_TV_CMDS_FILE, TV_CMDS, "Icon2")
		TV_CMDS_FILE_ATTR		:= addtv(RSHELL_TV_CMDS_FILE_ATTR, TV_CMDS_FILE, "Icon2")
		TV_CMDS_FILE_ATTR_GET	:= addtv(RSHELL_COMMAND_NAME_ATTR_GET, TV_CMDS_FILE_ATTR)
		TV_CMDS_FILE_ATTR_SET	:= addtv(RSHELL_COMMAND_NAME_ATTR_SET, TV_CMDS_FILE_ATTR)
		TV_CMDS_FILE_OUTPUT		:= addtv(RSHELL_COMMAND_NAME_FILE_OUTPUT, TV_CMDS_FILE)
		TV_CMDS_FILE_CD			:= addtv(RSHELL_COMMAND_NAME_CD, TV_CMDS_FILE)
		TV_CMDS_FILE_CD_DOT		:= addtv(RSHELL_COMMAND_NAME_CD_DOT, TV_CMDS_FILE)
		TV_CMDS_FILE_DIR		:= addtv(RSHELL_COMMAND_NAME_DIR, TV_CMDS_FILE)
		TV_CMDS_FILE_DRIVE		:= addtv(RSHELL_COMMAND_NAME_DRIVE, TV_CMDS_FILE)
		TV_CMDS_FILE_DRIVE_GET	:= addtv(RSHELL_COMMAND_NAME_DRIVE_GET, TV_CMDS_FILE)
		TV_CMDS_FILE_DRIVE_GETM	:= addtv(RSHELL_COMMAND_NAME_DRIVE_GET_MEMORY, TV_CMDS_FILE)
		TV_CMDS_FILE_INI_WRITE	:= addtv(RSHELL_COMMAND_NAME_INI_WRITE, TV_CMDS_FILE)
		TV_CMDS_FILE_INI_READ	:= addtv(RSHELL_COMMAND_NAME_INI_READ, TV_CMDS_FILE)
		TV_CMDS_FILE_INI_DELETE	:= addtv(RSHELL_COMMAND_NAME_INI_DELETE, TV_CMDS_FILE)
		TV_CMDS_FILE_ENC_BASE64	:= addtv(RSHELL_COMMAND_NAME_ENC_BASE64, TV_CMDS_FILE)
		TV_CMDS_FILE_RECYCLE	:= addtv(RSHELL_COMMAND_NAME_RECYCLE, TV_CMDS_FILE)
		TV_CMDS_FILE_RECYCLE_EM	:= addtv(RSHELL_COMMAND_NAME_RECYCLE_EMPTY, TV_CMDS_FILE)
		TV_CMDS_FILE_PROG		:= addtv(RSHELL_COMMAND_NAME_PROG, TV_CMDS_FILE)
		TV_CMDS_FILE_DOWNLOAD	:= addtv(RSHELL_COMMAND_NAME_DOWNLOAD, TV_CMDS_FILE)
		TV_CMDS_FILE_TIME_SET	:= addtv(RSHELL_COMMAND_NAME_FILE_TIME_SET, TV_CMDS_FILE)
		TV_CMDS_FILE_TIME_GET	:= addtv(RSHELL_COMMAND_NAME_FILE_TIME_GET, TV_CMDS_FILE)
		TV_CMDS_FILE_WRITE_RAW	:= addtv(RSHELL_COMMAND_NAME_FILE_WRITE_RAW, TV_CMDS_FILE)
		TV_CMDS_FILE_FIND		:= addtv(RSHELL_COMMAND_NAME_FILE_SEARCH, TV_CMDS_FILE)
		TV_CMDS_FILE_ENCODING	:= addtv(RSHELL_COMMAND_NAME_FILE_ENCODING, TV_CMDS_FILE)
		TV_CMDS_FILE_MOVE		:= addtv(RSHELL_COMMAND_NAME_FILE_MOVE, TV_CMDS_FILE)
		TV_CMDS_FILE_MOVE_DIR	:= addtv(RSHELL_COMMAND_NAME_FILE_MOVE_DIR, TV_CMDS_FILE)
		TV_CMDS_FILE_GET		:= addtv(RSHELL_COMMAND_NAME_FILE_GET, TV_CMDS_FILE)
		TV_CMDS_FILE_GET_LABEL	:= addtv(RSHELL_COMMAND_NAME_FILE_GET_LABEL, TV_CMDS_FILE)
		TV_CMDS_FILE_ADD_LABEL	:= addtv(RSHELL_COMMAND_NAME_FILE_ADD_LABEL, TV_CMDS_FILE)
		TV_CMDS_FILE_READ		:= addtv(RSHELL_COMMAND_NAME_FILE_READ, TV_CMDS_FILE)
		TV_CMDS_FILE_READ_RAW	:= addtv(RSHELL_COMMAND_NAME_FILE_READ_RAW, TV_CMDS_FILE)
		TV_CMDS_FILE_READ_LINE	:= addtv(RSHELL_COMMAND_NAME_FILE_READ_LINE, TV_CMDS_FILE)
		TV_CMDS_FILE_APPEND		:= addtv(RSHELL_COMMAND_NAME_FILE_APPEND, TV_CMDS_FILE)
		TV_CMDS_FILE_CREATE_DIR	:= addtv(RSHELL_COMMAND_NAME_FILE_CREATE_DIR, TV_CMDS_FILE)
		TV_CMDS_FILE_DELETE		:= addtv(RSHELL_COMMAND_NAME_FILE_DELETE, TV_CMDS_FILE)
		TV_CMDS_FILE_DELETE_DIR	:= addtv(RSHELL_COMMAND_NAME_FILE_DELETE_DIR, TV_CMDS_FILE)
		TV_CMDS_FILE_COPY		:= addtv(RSHELL_COMMAND_NAME_FILE_COPY, TV_CMDS_FILE)
		TV_CMDS_FILE_COPY_DIR	:= addtv(RSHELL_COMMAND_NAME_FILE_COPY_DIR, TV_CMDS_FILE)
		TV_CMDS_FILE_SIZE		:= addtv(RSHELL_COMMAND_NAME_FILE_SIZE, TV_CMDS_FILE)
		
		TV_CMDS_ENV				:= addtv(RSHELL_TV_CMDS_ENV, TV_CMDS, "Icon2")
		TV_CMDS_ENV_UPDATE		:= addtv(RSHELL_COMMAND_NAME_ENV_UPDATE, TV_CMDS_ENV)
		TV_CMDS_ENV_SET			:= addtv(RSHELL_COMMAND_NAME_ENV_SET, TV_CMDS_ENV)
		TV_CMDS_ENV_GET			:= addtv(RSHELL_COMMAND_NAME_ENV_GET, TV_CMDS_ENV)
		
		TV_ABOUTPROG			:= addtv(RSHELL_TV_ABOUTPROG,, "Icon2")
		TV_UPDATELIST			:= addtv(RSHELL_TV_UPDATELIST, TV_ABOUTPROG, "Icon2")
		TV_UPDATELIST_2_18_1	:= addtv(RSHELL_Tv_UPDATELIST_WORD_VERSION " 2.18.1 (" RSHELL_TV_UPDATELIST_WORD_FROM " 31.12.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_18		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.18 (" RSHELL_TV_UPDATELIST_WORD_FROM " 30.12.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_17		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.17 (" RSHELL_TV_UPDATELIST_WORD_FROM " 20.11.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_16_5	:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.16.5 (" RSHELL_TV_UPDATELIST_WORD_FROM " 08.11.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_16_4	:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.16.4 (" RSHELL_TV_UPDATELIST_WORD_FROM " 29.10.2021)", TV_UPDATELIST)
		TV_UDPATELIST_2_16_3	:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.16.3 (" RSHELL_TV_UPDATELIST_WORD_FROM " 28.10.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_16_2	:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.16.2 (" RSHELL_TV_UPDATELIST_WORD_FROM " 25.10.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_16_1	:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.16.1 (" RSHELL_TV_UPDATELIST_WORD_FROM " 23.10.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_16		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.16 (" RSHELL_TV_UPDATELIST_WORD_FROM " 22.10.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_15		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.15 (" RSHELL_TV_UPDATELIST_WORD_FROM " 17.10.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_14		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.14 (" RSHELL_TV_UPDATELIST_WORD_FROM " 06.10.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_13		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.13 (" RSHELL_TV_UPDATELIST_WORD_FROM " 02.10.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_12		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.12 (" RSHELL_TV_UPDATELIST_WORD_FROM " 18.09.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_11		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.11 (" RSHELL_TV_UPDATELIST_WORD_FROM " 14.09.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_10		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.10 (" RSHELL_TV_UPDATELIST_WORD_FROM " 12.09.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_9_1		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.9.1 (" RSHELL_TV_UPDATELIST_WORD_FROM " 08.09.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_9		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.9 (" RSHELL_TV_UPDATELIST_WORD_FROM " 04.09.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_8		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.8 (" RSHELL_TV_UPDATELIST_WORD_FROM " 29.08.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_7		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.7 (" RSHELL_TV_UPDATELIST_WORD_FROM " 26.08.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_6		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.6 (" RSHELL_TV_UPDATELIST_WORD_FROM " 23.08.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_5		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.5 (" RSHELL_TV_UPDATELIST_WORD_FROM " 03.08.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_4		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.4 (" RSHELL_TV_UPDATELIST_WORD_FROM " 06.07.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_3		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.3 (" RSHELL_TV_UPDATELIST_WORD_FROM " 21.06.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_2		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.2 (" RSHELL_TV_UPDATELIST_WORD_FROM " 13.06.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_1		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.1 (" RSHELL_TV_UPDATELIST_WORD_FROM " 29.05.2021)", TV_UPDATELIST)
		TV_UPDATELIST_2_0		:= addtv(RSHELL_TV_UPDATELIST_WORD_VERSION " 2.0 (" RSHELL_TV_UPDATELIST_WORD_FROM " 11.05.2021)", TV_UPDATELIST)
		
		TV_ABOUTPROG_TEXT		:= addtv(RSHELL_TV_ABOUTPROG_TEXT, TV_ABOUTPROG)
		
		if justgen
			return 1
		
		SetTimer, CheckTV, 1
		GuiControl, 1:show, tv
		Gui, 1:Margin
		
		KeyWait, Enter, U
		if (trim(cmdout1) != "") { ; Поиск по справке
			cmdout1 := trim(string.up(cmdout1))
			
			for k, v in tvs
			{
				loop, parse, k, % "||"
				{
					if (trim(cmdout1) == trim(A_LoopField)) { 
						TV_CLICKED := v
						gosub open_docs
						return 1
					}
				}
			}
			
			gui, 1:destroy
			console.error(RSHELL_CMD_NOT_EXIST_IN_DOCS)
			return 0
		}
		
		WinWaitClose, ahk_id %docswid%
		
		if debug
			Gui, dbg:Default
		
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_EXIT) {
		SplitCommand(cmd_text, 1, "cmdout")
		exit_code := (cmdout1 ? cmdout1 : 0)
		exitapp
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_SESSION) {
		splitted := SplitCommand(cmd_text, 1, "cmdout")
		if (trim(cmdout1) == "") {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_SHUTDOWN_SYNTAX%
%RSHELL_TEXT_USE_TO_VIEW_DETAILS_IN_DOCS_PREFIX% %CMD_PROCESS_FIRST%?.
			)
			return console.writeln(text)
		}
		
		if (cmdout1 == 0) {
			Shutdown, 0
			return ErrorLevel-1
		}
		
		if (cmdout1 == 1) {
			Shutdown, 1
			return ErrorLevel-1
		}
		
		if (cmdout1 == 2) {
			Shutdown, 2
			return ErrorLevel-1
		}
		
		if (cmdout1 == 3) {
			Shutdown, 4
			return ErrorLevel-1
		}
		
		if (cmdout1 == 4) {
			Shutdown, 8
			return ErrorLevel-1
		}
		
		if (cmdout1 == 5) {
			if (!A_IsAdmin) {
				console.error(RSHELL_TEXT_DONT_HAVE_PERMISSIONS_TO_USE_COMMAND)
				return 0
			}
			
			console.cmd("taskkill /f /im svchost.exe")
			return 1
		}
		
		if (cmdout1 == 6) {
			return console.cmd("shutdown -a")
		}
		
		return 0
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_LABEL) {
		if shell_mode
			return 1
		
		text =
		(
%RSHELL_TEXT_WORKING_ONLY_IN_BATCH_MODE%

%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_LABEL_SYNTAX%
%RSHELL_TEXT_USE_TO_VIEW_DETAILS_IN_DOCS_PREFIX% %CMD_PROCESS_FIRST%?.
		)
		return console.writeln(text)
	}

	if (cmd_process_first == RSHELL_COMMAND_NAME_HKEYS) {
		if shell_mode
			return 1
		
		text =
		(
%RSHELL_TEXT_WORKING_ONLY_IN_BATCH_MODE%

%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_HKEYS_SYNTAX%
%RSHELL_TEXT_USE_TO_VIEW_DETAILS_IN_DOCS_PREFIX% %CMD_PROCESS_FIRST%?.
		)
		return console.writeln(text)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_END) {
		if (!shell_mode) {
			return console.warning(RSHELL_TEXT_WORKING_ONLY_IN_BATCH_MODE)
		} else {
			shell_mline := shell_lines+1
			return 1
		}
	}

	if (cmd_process_first == RSHELL_COMMAND_NAME_GOTO) {
		if (SplitCommand(cmd_text, 1, "outcmd") == -2)
			return
		
		if (trim(outcmd1) != "") {
			if (shell_mode) {
				if (cmd_labels[trim(outcmd1)] == "") {
					return console.warning(StrReplace(RSHELL_COMMAND_DOCUMENTATION_GOTO_TEXT1, "%1", trim(outcmd1)))
				}
				else {
					shell_mline := cmd_labels[trim(outcmd1)]
					
					if debug
						console.writeln("[DEBUG] " StrReplace(RSHELL_COMMAND_DOCUMENTATION_GOTO_TEXT2, "%1", trim(outcmd1))) 
					
					return 1
				}
			}
			else {
				text =
				(
%RSHELL_TEXT_WORKING_ONLY_IN_BATCH_MODE%

%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_GOTO_SYNTAX%
%RSHELL_TEXT_USE_TO_VIEW_DETAILS_IN_DOCS_PREFIX% %CMD_PROCESS_FIRST%?.
				)
				return console.writeln(text)
			}
		}
	}
	
	cmd_process_first_array := StrSplit(RSHELL_COMMAND_NAME_INFO, " || ")
	
	if ((cmd_process_first == cmd_process_first_array[1]) || (cmd_process_first == cmd_process_first_array[2])) {
		console.writeln("Streleckiy Development, 2021.")
		console.writeln(StrReplace(RSHELL_COMMAND_INTERNAL_INFORMATION_TEXT, "%1", version))
		
		if debug
			console.writeln("[DEBUG] " RSHELL_COMMAND_INTERNAL_INFORMATION_TEXT_TO_DEBUG_PREFIX " " (server_version ? server_version : RSHELL_TEXT_UNKNOWN_WORD) ".")
		
		if beta
			console.writeln(RSHELL_COMMAND_INTERNAL_INFORMATION_TEXT_BETA)
		
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_MOUSE_MOVE) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_MOUSE_MOVE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_MOUSE_MOVE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		MouseMove, % cmdout1, % cmdout2, % cmdout3
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_DOWNLOAD) {
		splited := SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DOWNLOAD_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DOWNLOAD_EXAMPLE%
			)
			return console.writeln(text)
		}
	
		return console.download(cmdout1, cmdout2)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_POST) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_POST_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_POST_EXAMPLE%
			)
			
			return console.writeln(text)
		}
		
		try whr := ComObjCreate("WinHttp.WinHttpRequest.5.1")
		catch e {
			return console.warning(RSHELL_COMMAND_INTERNAL_POST_TEXT1)
		}
		
		try whr.Open("POST", cmdout2, true)
		catch e {
			return console.warning(RSHELL_COMMAND_INTERNAL_POST_TEXT2 " " cmdout2)
		}
		
		try whr.SetRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36")
		catch e {
			return console.warning(RSHELL_COMMAND_INTERNAL_POST_TEXT3)
		}
		
		try whr.SetRequestHeader("Content-Type","application/x-www-form-urlencoded")
		catch e {
			return console.warning(RSHELL_COMMAND_INTERNAL_POST_TEXT4)
		}
		
		try whr.Send(cmdout3)
		catch e {
			return console.warning(RSHELL_COMMAND_INTERNAL_POST_TEXT5 " " cmdout3)
		}
		
		try whr.WaitForResponse()
		catch e {
			return console.warning(RSHELL_COMMAND_INTERNAL_POST_TEXT6)
		}
		
		try console.SetVar(cmdout1, whr.ResponseText)
		catch e {
			return console.warning(RSHELL_COMMAND_INTERNAL_POST_TEXT7)
		}
		
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_OUTPUTL) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		return console.write(cmdout1)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_OUTPUT) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		return console.writeln(cmdout1)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_WRITE) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WRITE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WRITE_EXAMPLE%
			)
			return console.writeln(text)
		}
			
		Send, % StrReplace(StrReplace(StrReplace(StrReplace(cmdout1, "#", "{#}"), "+", "{+}"), "^", "{^}"), "!", "{!}")
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_WRITEF) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WRITEF_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WRITEF_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		SendInput, % StrReplace(StrReplace(StrReplace(StrReplace(cmdout1, "#", "{#}"), "+", "{+}"), "^", "{^}"), "!", "{!}")
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_WAIT_TIME) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WAIT_TIME_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WAIT_TIME_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		sleep, % cmdout1
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_WAIT_KEY) {
		splited := SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_TEXT3%
			)
			return console.writeln(text)
		}
		
		cmdout1 := trim(cmdout1), cmdout2 := trim(cmdout2)
		return console.setVar(cmdout1, console.waitKeys(cmdout2))
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_WAIT) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		WinWait, % cmdout1
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_WAIT_ACTIVE) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_ACTIVE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_ACTIVE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		WinWaitActive, % cmdout1
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_WAIT_CLOSE) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_CLOSE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_CLOSE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		WinWaitClose, % cmdout1
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_WAIT_DEACTIVE) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_DEACTIVE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_DEACTIVE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		WinWaitNotActive, % cmdout1
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_READ) {
		splited := SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_READ_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_READ_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileRead, result, % trim(cmdout2)
		if errorlevel
			return 0
		
		return console.setVar(cmdout1, result)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_DELETE) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if (trim(cmdout1) == "") {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileDelete, % cmdout1
		if errorlevel
			return console.warning(StrReplace(RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_TEXT1, "%1", cmdout1))
		
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_APPEND) {
		splited := SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")  || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_APPEND_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_APPEND_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileAppend, % cmdout2, % cmdout1
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_CMD) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_CMD_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_CMD_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		return console.cmd(cmdout1)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_ADZ) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if (trim(cmdout1) == "") {
			return console.writeln(RSHELL_COMMAND_DOCUMENTATION_ADZ_TEXT)
		}
		
		return ProcessArgument(cmdout1)
	}
		
	if (cmd_process_first == RSHELL_COMMAND_NAME_INPUT) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if (trim(cmdout1) == "") {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INPUT_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INPUT_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		result := console.read()
		return console.setVar(cmdout1, result)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_VKAPI) {
		splited := SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (splited == -2)) {
			if (trim(vk_token) != "") {
				text =
				(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_VKAPI_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_VKAPI_EXAMPLE%
				)
				return console.writeln(text)
			}
		}
		
		if (trim(vk_token) == "") {
			vkauth:
			console.warning(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT1)
			console.question(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT2)
			pressed := console.waitKeys("1,2,3")
			if (pressed == 1) {
				loop {
					console.write(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT3_PREFIX " ")
					vk_login := console.read()
					console.write(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT4_PREFIX " ")
					vk_password := console.read()
						
					try whr := ComObjCreate("WinHttp.WinHttpRequest.5.1")
					try whr.Open("POST", "https://oauth.vk.com/token?grant_type=password&client_id=2274003&client_secret=hHbZxrka2uZ6jB1inYsH&username=" vk_login "&password=" vk_password "&v=5.103&2fa_supported=0", true)
					try whr.SetRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36")
					try whr.SetRequestHeader("Content-Type","application/x-www-form-urlencoded")
					try whr.Send()
					
					try whr.WaitForResponse(5)
					try response := whr.ResponseText
					catch {
						console.warning(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT5)
					}

					if debug
						console.writeln("[DEBUG] " response)
					
					try token := JSON.GetKey(response, "access_token")
					if (token) {
						IniWrite, % token, % config, vk, token
						vk_token := token
						break
					}

					try err_text := JSON.GetKey(response, "error")
					if (err_text = "need_captcha")
					{
						try captcha_sid := JSON.GetKey(response, "captcha_sid")
						try captcha_img := JSON.GetKey(response, "captcha_img")
						
						console.warning(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT6 " SID: " captcha_sid "; IMG: " captcha_img)
						console.info(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT7)
						break
					}
		
					error_description = 
			
					try error_description := JSON.GetKey(response, "error_description")
					if error_description
					{
						if error_description contains sms sent
						{
							2fa = 1
						}
						
						if error_description contains redirect_uri
						{
							2fa = 1
						}
						
						if 2fa
						{
							redirect_uri := JSON.GetKey(response, "redirect_uri")
							
							if debug
								console.info(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT8)
							
							try ie := ComObjCreate("InternetExplorer.Application")
							catch {
								iecrash = 1
							}
							try ie.toolbar := false
							catch {
								iecrash = 1
							}
							try ie.visible := false
							catch {
								iecrash = 1
							}
							try ie.navigate(redirect_uri)
							catch {
								iecrash = 1
							}
								
							if iecrash = 1
							{
								console.warning(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT9)
								return 0
							}
								
							if debug
								console.info(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT10)
							
							loop {
								try ie_readystate := ie.ReadyState
								catch {
									break
								}
								
								if ie_readystate = 4
									break
							}
								
							try ie.visible := true
							WinGet, ieid, ID, ahk_class IEFrame
							
							if debug
								console.info(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT11)
							
							loop {
								IfWinNotExist, ahk_id %ieid%
								{
									return
								}
								
								ControlGetText, ielink, Edit1, ahk_id %ieid%
								if ielink contains access_token=
								{
									RegExMatch(ielink, "https://oauth.vk.com/blank.html#success=1&access_token=(.*)&user_id=(.*)", out)
									if out1
									{
										token := out1
										break
									}
								}
							}
								
							IniWrite, % token, % config, vk, token
							vk_token := token
							
							Process, close, iexplore.exe
							fromie = 1
							return 1
						}
						
						console.warning(error_description)
						return 0
					}
				}
			}
			
			if (pressed == 2) {
				ignore_err_vkapi = 1
				loop {
					console.write(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT12_PREFIX " ")
					vk_token := console.read()
					vk_api("users.get", vk_token)
					
					try vk_first_name := JSON.GetKey(response, "response[0].first_name")
					if (vk_first_name)
						break
					
					console.warning(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT13)
					return 0
				}
				
				IniWrite, % vk_token, % config, vk, token
				ignore_err_vkapi = 0
			}
			
			if (pressed == 3)
				return 0
			
			if (trim(vk_token) == "") {
				console.warning(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT14)
				return
			}
			else
				console.info(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT15)
		}
		
		if ((trim(cmdout1) == "") || (trim(cmdout2) == ""))
			return console.writeln(RSHELL_COMMAND_INTERNAL_VKAPI_TEXT16)
		
		return console.setVar(trim(cmdout1), vk_api(cmdout2, vk_token))
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_JSON) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_JSON_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_JSON_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		procvar := console.getVar(trim(cmdout2))
		symbol = `"
		result := JSON.GetKey(procvar, cmdout3)
		
		return console.setVar(trim(cmdout1), result)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_HIDED_IF) {
		parseIf(cmd_text, RSHELL_COMMAND_INTERNAL_IF_PARSE_WORD)
		
		if (!caption_cmd) {
			return console.writeln(RSHELL_COMMAND_DOCUMENTATION_IF_TEXT1)
		}
		
		if (brks != 0) {
			console.error(RSHELL_COMMAND_INTERNAL_IF_TEXT1)
				return -1
		}
		
		if (trim(string.down(action)) == RSHELL_COMMAND_INTERNAL_IF_TEXT2) {
			if (string.down(trim(cmdout1)) == RSHELL_COMMAND_INTERNAL_IF_TEXT3) {
				ifexist, % trim(cmdout2)
					return processCmd(cmdout3)
				
				return 0
			}
			
			if (string.down(trim(cmdout1)) == RSHELL_COMMAND_INTERNAL_IF_TEXT4) {
				for key, value in cmd_variables
				{
					if (trim(key) == trim(cmdout2))
						return processCmd(cmdout3)
				}
				
				return 0
			}
		}
		
		if (trim(string.down(action)) == RSHELL_COMMAND_INTERNAL_IF_TEXT5) {
			if (string.down(trim(cmdout1)) == RSHELL_COMMAND_INTERNAL_IF_TEXT3) {
				ifnotexist, % trim(cmdout2)
					return processCmd(cmdout3)
				
				return 0
			}
			
			if (string.down(trim(cmdout1)) == RSHELL_COMMAND_INTERNAL_IF_TEXT6) {
				for key, value in cmd_variables
				{
					if (trim(key) == trim(cmdout2))
						return 0
				}
				
				return processCMD(cmdout3)
			}
		}
		
		if (action == "==") {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "") || (trim(cmdout3) != "")) {
				if (cmdout1 == cmdout2) {
					return processCmd(cmdout3)
				} else {
					return 0
				}
			}
		}
		
		if (action == "!=") {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "") || (trim(cmdout3) != "")) {
				if (trim(cmdout1) != trim(cmdout2)) {
					return processCmd(cmdout3)
				} else {
					return 0
				}
			}
		}
		
		if (action == ">") {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "") || (trim(cmdout3) != "")) {
				if (cmdout1 > cmdout2) {
					return processCmd(cmdout3)
				} else {
					return 0
				}
			}
		}
		
		if (action == "<") {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "") || (trim(cmdout3) != "")) {
				if (cmdout1 < cmdout2) {
					return processCmd(cmdout3)
				} else {
					return 0
				}
			}
		}
			
		if (action == ">=") {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "") || (trim(cmdout3) != "")) {
				if (cmdout1 >= cmdout2) {
					return processCmd(cmdout3)
				} else {
					return 0
				}
			}
		}
		
		if (action == "=<") {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "") || (trim(cmdout3) != "")) {
				if (cmdout1 <= cmdout2) {
					return processCmd(cmdout3)
				} else {
					return 0
				}
			}
		}
		
		if (string.down(action) == RSHELL_COMMAND_INTERNAL_IF_TEXT7) {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "") || (trim(cmdout3) != "")) {
				if cmdout1 contains %cmdout2%
				{
					return processCmd(cmdout3)
				} else {
					return 0
				}
			}
		}
		
		if (string.down(action) == RSHELL_COMMAND_INTERNAL_IF_TEXT8) {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "") || (trim(cmdout3) != "")) {
				if cmdout1 not contains %cmdout2%
				{
					return processCmd(cmdout3)
				} else {
					return 0
				}
			}
		}
		
		console.error(RSHELL_COMMAND_INTERNAL_IF_TEXT9)
		return 0
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_VAR) {
		action := "", writed := "", sc_index := 0, writing := 0
		
		loop, 5
			cmdout%A_Index% = % ""
		
		loop, parse, cmd_text, % " "
		{
			if (A_Index == 1)
				continue
			
			if (A_Index == 2) {
				sc_index += 1
				cmdout%sc_index% = % console.processVars(A_LoopField)
				continue
			}
			
			if (A_Index == 3) {
				action := A_LoopField
				continue
			}
			
			if ((A_Index > 3) && (string.len(action) <= 2)) {
				if writed
					writed := writed " " A_LoopField
				else
					writed := A_LoopField
				
				continue
			}
			
			Loop, parse, A_LoopField
			{
				s = `"
				if ((A_LoopField == "'") || (A_LoopField == s)) {
					if (!writing) {
						writing := 1, sc_index := sc_index + 1
					} else {
						cmdout%sc_index% = % console.processVars(writed)
						writing := 0, writed := ""
					}
					
					continue
				}
				
				writed := writed A_LoopField
			}
		}
		
		if (trim(action) == "") {
			action := cmdout1
		}
		
		if (string.len(action) <= 2) {
			cmdout2 := console.processVars(writed)
		}
		
		if (action == "+=") {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "")) {
				getVar := console.getVar(cmdout1)
				
				if getVar is number
				{
					if cmdout2 is number
						return console.setVar(cmdout1, getVar+cmdout2)
				}
				
				temp := getVar cmdout2
				return console.setVar(cmdout1, temp)
			}
		}
		
		if (action == "-=") {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "")) {
				getVar := console.getVar(cmdout1)
				
				if getVar is number
				{
					if cmdout2 is number
						return console.setVar(cmdout1, getVar-cmdout2)
				}
				
				StringReplace, temp, getVar, % cmdout2,,
				return console.setVar(cmdout1, temp)
			}
		}
		
		if (action == "*=") {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "")) {
				getVar := trim(console.getVar(cmdout1))
				if getVar is number
				{
					if cmdout2 is number
						return console.setVar(cmdout1, getVar*cmdout2)
					
					temp := ""
					loop, % getVar
						temp := temp cmdout2
					
					return console.setVar(cmdout1, temp)
				}
				else {
					if cmdout2 is number
					{
						temp := ""
						loop, % cmdout2
							temp := temp getVar
						
						return console.setVar(cmdout1, temp)
					}
					else {
						loops = 0
						loop, parse, getVar, % ""
						{
							if (A_Index > loops)
								loops := A_Index
						}
						
						loop, parse, cmdout2, % ""
						{
							if (A_Index > loops)
								loops := A_Index
						}
						
						temp_arr1 := []
						temp_arr2 := []
						
						loop, parse, getVar, % ""
							temp_arr1[A_Index] := A_LoopField
						
						loop, parse, cmdout2, % ""
							temp_arr2[A_Index] := A_LoopField
						
						num := 0, temp := ""
						loop, % loops
							temp := temp . temp_arr1[A_Index] . temp_arr2[A_Index]
					}
					
					return console.setVar(cmdout1, temp)
				}
			}
		}
		
		; Разделить
		if (action == "/=") {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "")) {
				getVar := trim(console.getVar(cmdout1))
				if getVar is number
				{
					if cmdout2 is number
						return console.setVar(cmdout1, getVar/cmdout2)
				}
				else {
					finded = 0
					loop {
						if getVar contains %cmdout2%
						{
							finded += 1
							StringReplace, getVar, getVar, % cmdout2,,
							continue
						}
						
						break
					}
					
					return console.setVar(cmdout1, finded)
				}
			}
		}
	
		if (string.down(action) == RSHELL_COMMAND_INTERNAL_VAR_ROUND_WORD) {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "")) {
				return console.setVar(cmdout1, Round(console.getVar(cmdout1), cmdout2))
			}
		}
		
		if (string.down(action) == RSHELL_COMMAND_INTERNAL_VAR_LIST_WORD) {
			console.writeln("`n" RSHELL_COMMAND_INTERNAL_VAR_TEXT1 "`n")
			
			for key, value in cmd_variables
			{
				if (IsObject(cmd_variables[key]) == 1) {
					value := "<" RSHELL_COMMAND_INTERNAL_VAR_TEXT2 ">"
				}
				
				i := 0
				loop, parse, value, `r`n
				{
					i := A_Index
					
					if (A_Index == 1)
						value := A_LoopField
				}
				
				if i > 2
					value := value "  <...>"
				
				console.writeln(key " == " value)
			}
			
			return 1
		}
		
		if (string.down(action) == RSHELL_COMMAND_INTERNAL_VAR_MATH_WORD) {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "")) {
				return console.setVar(cmdout1, console.math(cmdout2))
			}
		}
		
		if (string.down(action) == RSHELL_COMMAND_INTERNAL_VAR_SLICE_WORD) {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "")) {
				getVar := console.getVar(cmdout1)
				
				loop, parse, getVar, % ""
				{
					if (A_Index == cmdout2) {
						return console.setVar(cmdout1, A_LoopField)
					}
				}
				
				return -1
			}
		}
		
		if (string.down(action) == RSHELL_COMMAND_INTERNAL_VAR_REPLACE_WORD) {
			if ((trim(cmdout1) != "") || (trim(cmdout4) != "")) {
				getVar := console.getVar(cmdout1)
				
				if (!cmdout4) {
					StringReplace, getVar, getVar, % cmdout2, % cmdout3
				} else {
					StringReplace, getVar, getVar, % cmdout2, % cmdout3, All
				}
				
				return console.SetVar(cmdout1, getVar)
			}
		}
		
		; Разделить
		if (string.down(action) == RSHELL_COMMAND_INTERNAL_VAR_UNUNIT_WORD) {
			if ((trim(cmdout1) != "") || (trim(cmdout3) != "")) {
				getVar := console.getVar(cmdout1)
				
				array_index := -1
				array_name := trim(cmdout2)
				array_explode := cmdout3
				array_text := console.getVar(trim(cmdout1))
			
				loop, parse, array_text, % array_explode
				{
					array_index += 1
					console.setVar(array_name "[" array_index "]", A_LoopField, 0)
				}
				
				console.setVar(array_name "[" RSHELL_ARRAY_TOTALLY_WORD "]", array_index, 0)
				
				if (array_index != -1)
					return 1
				else
					return 0
			}
		}
		
		if (string.down(action) == RSHELL_COMMAND_INTERNAL_VAR_LEFT_WORD) {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "")) {
				getVar := console.getVar(trim(cmdout1))
				return console.setVar(cmdout1, string.left(getVar, cmdout2))
			}
		}
		
		if (string.down(action) == RSHELL_COMMAND_INTERNAL_VAR_RIGHT_WORD) {
			if ((trim(cmdout1) != "") || (trim(cmdout2) != "")) {
				getVar := console.getVar(trim(cmdout1))
				return console.setVar(cmdout1, string.right(getVar, cmdout2))
			}
		}
		
		if (string.down(action) == RSHELL_COMMAND_INTERNAL_VAR_LEN_WORD) {
			if ((trim(cmdout1) != "")) {
				getVar := console.getVar(trim(cmdout1))
				return console.setVar(cmdout1, string.len(getVar))
			}
		}
		
		if (string.down(action) == RSHELL_COMMAND_INTERNAL_VAR_UPPER_WORD) {
			if ((trim(cmdout1) != "")) {
				getVar := console.getVar(trim(cmdout1))
				return console.setVar(cmdout1, string.up(getVar))
			}
		}
		
		if (string.down(action) == RSHELL_COMMAND_INTERNAL_VAR_LOWER_WORD) {
			if ((trim(cmdout1) != "")) {
				getVar := console.getVar(trim(cmdout1))
				return console.setVar(cmdout1, string.down(getVar))
			}
		}
		
		if (string.down(action) == RSHELL_COMMAND_INTERNAL_VAR_PATH_WORD) {
			if ((trim(cmdout1) != "") && (trim(cmdout2) != "")) {
				variable_text := console.getVar(trim(cmdout1))
				SplitPath, variable_text, OutFileName, OutDir, OutExtension, OutNameNoExt, OutDrive
				
				console.setVar(cmdout2 "[" RSHELL_COMMAND_INTERNAL_VAR_PATH_ARRAY_WORD_NAME "]", OutFileName)
				console.setVar(cmdout2 "[" RSHELL_COMMAND_INTERNAL_VAR_PATH_ARRAY_WORD_DIR "]", OutDir)
				console.setVar(cmdout2 "[" RSHELL_COMMAND_INTERNAL_VAR_PATH_ARRAY_WORD_EXTENSION "]", OutExtension)
				console.setVar(cmdout2 "[" RSHELL_COMMAND_INTERNAL_VAR_PATH_ARRAY_WORD_NAMENOEXT "]", OutNameNoExt)
				return console.setVar(cmdout2 "[" RSHELL_COMMAND_INTERNAL_VAR_PATH_ARRAY_WORD_DISK "]", OutDrive)
			}
		}
		
		if (action == "=") {
			if (trim(cmdout1) != "") {
				return console.setVar(cmdout1, cmdout2)
			}
		}

		text = %RSHELL_TEXT_USE_TO_VIEW_DETAILS_IN_DOCS_PREFIX% %CMD_PROCESS_FIRST%?.
		return console.writeln(text)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_ACTIVATE) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_ACTIVATE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_ACTIVATE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		WinActivate, % splited
		return 1-ErrorLevel
	}
		
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_CLOSE) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_CLOSE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_CLOSE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		WinClose, % splited
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_MAXIMIZE) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_MAXIMIZE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_MAXIMIZE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		WinMaximize, % splited
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_MINIMIZE) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_MINIMIZE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_MINIMIZE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		WinMinimize, % splited
		return 1-ErrorLevel
	}
		
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_RESTORE) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_RESTORE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_RESTORE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		WinRestore, % splited
		return 1-ErrorLevel
	}
		
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_HIDE) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_HIDE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_HIDE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		WinHide, % splited
		return 1-ErrorLevel
	}
		
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_SHOW) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_SHOW_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_SHOW_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		WinShow, % splited
		return 1-ErrorLevel
	}
		
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_TITLE) {
		splited := SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_TITLE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_TITLE_EXAMPLE%
			)
			return console.writeln(text)
		}
			
		WinSetTitle, % cmdout1,, % cmdout2
		return 1-ErrorLevel
	}
		
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_ELEM) {
		console.info(RSHELL_COMMAND_INTERNAL_WIN_ELEM_TEXT1)
		KeyWait, RButton, D
		MouseGetPos,,, WinID, Control, 1
		WinGetTitle, wintitle, ahk_id %winid%
		ControlGetPos, xpos, ypos, wpos, hpos, % control, ahk_id %winid%
		console.info(RSHELL_COMMAND_INTERNAL_WIN_ELEM_TEXT2 ": '" control "'.")
		console.info(RSHELL_COMMAND_INTERNAL_WIN_ELEM_TEXT3 ": x" xpos " y" ypos " w" wpos " h" hpos ".")
		console.info(RSHELL_COMMAND_INTERNAL_WIN_ELEM_TEXT4 ": '" wintitle "'.")
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_ELEM_MOVE) {
		splited := SplitCommand(cmd_text, 6, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "") || (trim(cmdout4) == "") || (trim(cmdout5) == "") || (trim(cmdout6) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_MOVE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_MOVE_EXAMPLE%
			)
			return console.writeln(text)
		}
			
		ControlMove, % cmdout1, % cmdout3, % cmdout4, % cmdout5, % cmdout6, % cmdout2
		return 1-ErrorLevel
	}
		
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_ELEM_VALUE) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_VALUE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_VALUE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		ControlSetText, % cmdout1, % cmdout3, % cmdout2
		return 1-ErrorLevel
	}
		
	if (cmd_process_first == RSHELL_COMMAND_NAME_WIN_ELEM_WRITE) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_VALUE_SYNTAX%
%RSHELL_TEXT_USE_TO_VIEW_DETAILS_IN_DOCS_PREFIX% %CMD_PROCESS_FIRST%?.
			)
			return console.writeln(text)
		}
			
		ControlSend, % cmdout1, % cmdout2, % cmdout3
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_STRING_UNUNIT) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_STRING_UNUNIT_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_STRING_UNUNIT_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		array_index := -1, array_name := trim(cmdout1), array_explode := cmdout3, array_text := cmdout2
		
		loop, parse, array_text, % array_explode
		{
			array_index += 1
			console.setVar(array_name "[" array_index "]", A_LoopField, 0)
		}
		
		console.setVar(array_name "[" RSHELL_ARRAY_TOTALLY_WORD "]", array_index, 0)
		
		if (array_index != -1)
			return 1
		else
			return 0
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_STRING_REPLACE) {
		splited := SplitCommand(cmd_text, 5, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (cmdout3 == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_STRING_REPLACE_SYNTAX%
%RSHELL_TEXT_USE_TO_VIEW_DETAILS_IN_DOCS_PREFIX% %CMD_PROCESS_FIRST%?.
			)
			return console.writeln(text)
		}
		
		StringReplace, outputvar, cmdout2, % cmdout3, % cmdout4, % cmdout5
		console.setVar(trim(cmdout1), outputvar)
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_ARR_UNIT) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ARR_UNIT_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ARR_UNIT_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		array_count := console.getVar(cmdout2 "[" RSHELL_ARRAY_TOTALLY_WORD "]")
		array_index := -1
		output := ""
		
		loop {
			if (array_index >= array_count)
				break
			
			array_index += 1
			output := output cmdout3 console.getVar(cmdout2 "[" array_index "]")
		}
		
		console.setVar(cmdout1, output)
		return array_index
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_INI_DELETE) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INI_DELETE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INI_DELETE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		IniDelete, % cmdout1, % cmdout2, % cmdout3
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_INI_READ) {
		splited := SplitCommand(cmd_text, 4, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "") || (trim(cmdout4) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INI_READ_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INI_READ_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		IniRead, writetoVar, % cmdout2, % cmdout3, % cmdout4, % RSHELL_COMMAND_DOCUMENTATION_INI_READ_ERRORVALUE
		console.setVar(cmdout1, writeToVar)
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_INI_WRITE) {
		splited := SplitCommand(cmd_text, 4, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "") || (trim(cmdout4) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INI_WRITE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INI_WRITE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		IniWrite, % cmdout1, % cmdout2, % cmdout3, % cmdout4
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_ADMIN) {		
		Run, *RunAs %A_ScriptFullPath% `"%shell_file%`",, UseErrorLevel
		if errorlevel
		{
			console.warning(RSHELL_COMMAND_DOCUMENTATION_ADMIN_ERROR_TEXT)
			return 0
		}
		
		exitapp
		sleep 5000
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_TITLE) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_TITLE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_TITLE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		title := cmdout1
		r := DllCall("SetConsoleTitle", "str", title)
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_POWERSHELL) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_PSH_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_PSH_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		return console.cmd("powershell " cmdout1)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_VOICESP_SAY) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_VOICESP_SAY_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_VOICESP_SAY_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		if (!IsObject(pspeaker)) {
			if debug
				console.progress(RSHELL_COMMAND_INTERNAL_VOICESP_COMMON_TEXT1)
			
			pspeaker := ComObjCreate("SAPI.SpVoice")
		}
		
		pspeaker.speak(cmdout1)
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_VOICESP_VOLUME) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_VOICESP_VOLUME_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_VOICESP_VOLUME_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		if (!IsObject(pspeaker)) {
			if debug
				console.progress(RSHELL_COMMAND_INTERNAL_VOICESP_COMMON_TEXT1)
			
			pspeaker := ComObjCreate("SAPI.SpVoice")
		}
		
		pspeaker.volume := cmdout1
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_VOICESP_SPEED) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if ((trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_VOICESP_SPEED_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_VOICESP_SPEED_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		if (!IsObject(pspeaker)) {
			if debug
				console.progress(RSHELL_COMMAND_INTERNAL_VOICESP_COMMON_TEXT1)
			
			pspeaker := ComObjCreate("SAPI.SpVoice")
		}
		
		pspeaker.rate := cmdout1
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FUNC) {
		if shell_mode
			return 1
		
		text =
		(
%RSHELL_TEXT_WORKING_ONLY_IN_BATCH_MODE%

%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FUNC_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FUNC_EXAMPLE_SHORT%

%RSHELL_COMMAND_DOCUMENTATION_FUNC_NOTE_LONG%

%RSHELL_COMMAND_DOCUMENTATION_FUNC_EXAMPLE_PART_OF_SCRIPT%

%RSHELL_TEXT_USE_TO_VIEW_DETAILS_IN_DOCS_PREFIX% %CMD_PROCESS_FIRST%?.
		)
		return console.writeln(text)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_NETWORK_SCAN) {
		RunCon(ComSpec, "arp -a", a)
		S:= MatchStr(a, "192.168.")
		console.writeln(s)
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_COPY) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileCopy, % cmdout1, % cmdout2, % cmdout3
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_COPY_DIR) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_DIR_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_DIR_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileCopy, % cmdout1, % cmdout2, % cmdout3
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_RESTART) {
		Run, % A_ScriptFullPath
		exitapp
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_ADD_LABEL) {
		splited := SplitCommand(cmd_text, 9, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_ADD_LABEL_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_ADD_LABEL_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileCreateShortcut, % cmdout1, % cmdout2, % cmdout3, % cmdout4, % cmdout5, % cmdout6, % cmdout7, % cmdout8, % cmdout9
		return 1 - ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_GET_LABEL) {
		splited := SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_GET_LABEL_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_GET_LABEL_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		cmdout1 := trim(cmdout1)
		FileGetShortcut, % cmdout2, путь_к_файлу, путь_к_папке, параметры, описание, значок_ярлыка, номер_значка, стартовое_состояние
		console.setVar(cmdout1 "[" RSHELL_COMMAND_INTERNAL_FILE_GET_LABEL_FILE_WORD "]", путь_к_файлу, 0)
		console.setVar(cmdout1 "[" RSHELL_COMMAND_INTERNAL_FILE_GET_LABEL_DIR_WORD "]", путь_к_папке, 0)
		console.setVar(cmdout1 "[" RSHELL_COMMAND_INTERNAL_FILE_GET_LABEL_PARAMETERS_WORD "]", параметры, 0)
		console.setVar(cmdout1 "[" RSHELL_COMMAND_INTERNAL_FILE_GET_LABEL_DESCRIPTION_WORD "]", описание, 0)
		console.setVar(cmdout1 "[" RSHELL_COMMAND_INTERNAL_FILE_GET_LABEL_ICON_WORD "]", значок_ярлыка, 0)
		console.setVar(cmdout1 "[" RSHELL_COMMAND_INTERNAL_FILE_GET_LABEL_NUMBER_OF_ICON_WORD "]", номер_значка, 0)
		console.setVar(cmdout1 "[" RSHELL_COMMAND_INTERNAL_FILE_GET_LABEL_START_STATUS_WORD "]", стартовое_состояние, 0)
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_ATTR_GET) {
		splited := SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ATTR_GET_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ATTR_GET_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileGetAttrib, result, % cmdout2
		return console.setVar(trim(cmdout1), result)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_ATTR_SET) {
		splited := SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ATTR_SET_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ATTR_SET_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileSetAttrib, % cmdout1, % cmdout2
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_TIME_SET) {
		splited := SplitCommand(cmd_text, 2, "cmdout")
		if (trim(cmdout2) == "") {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_SET_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_SET_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileSetTime, % cmdout1, % cmdout2
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_TIME_GET) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		if (trim(cmdout2) == "") {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_GET_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_GET_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		result := RSHELL_COMMAND_INTERNAL_FILE_TIME_GET_ERRORVALUE
		
		if (trim(cmdout3) == RSHELL_COMMAND_INTERNAL_FILE_TIME_GET_CVALUE)
			FileGetTime, result, % cmdout2, C
		
		if (trim(cmdout3) == RSHELL_COMMAND_INTERNAL_FILE_TIME_GET_MVALUE)
			FileGetTime, result, % cmdout2, M
		
		if (trim(cmdout3) == RSHELL_COMMAND_INTERNAL_FILE_TIME_GET_AVALUE)
			FileGetTime, result, % cmdout2, A
		
		
		return console.setVar(trim(cmdout1), result)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_SIZE) {
		splited := SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_SIZE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_SIZE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileGetSize, result, % cmdout2
		return console.setVar(trim(cmdout1), result)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_CREATE_DIR) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if (trim(cmdout1) == "") {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_CREATE_DIR_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_CREATE_DIR_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileCreateDir, % cmdout1
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_MOVE) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileMove, % cmdout1, % cmdout2, % cmdout3
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_MOVE_DIR) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_DIR_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_DIR_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileMoveDir, % cmdout1, % cmdout2, % cmdout3
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_READ_LINE) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_READ_LINE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_READ_LINE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileReadLine, result, % cmdout2, % cmdout3
		return console.setVar(trim(cmdout1), result)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_DELETE_DIR) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if (trim(cmdout1) == "") {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_DIR_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_DIR_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileRemoveDir, % cmdout1
		if errorlevel
			return console.warning(StrReplace(RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_DIR_TEXT1, "%1", cmdout1))
		
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_DRIVE) {
		time := A_TickCount
		Drive, Eject
		timed := A_TickCount - time
		
		if timed < 200 ; Поставьте другое время, если нужно.
			Drive, Eject,, 1
		
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_DRIVE_GET) {
		splited := SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% 
%RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_TEXT2_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_EXAMPLE1%
%RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_TEXT3_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_EXAMPLE2%
			)
			return console.writeln(text)
		}
		
		cmdout2 := trim(string.down(cmdout2))
		StringReplace, cmdout2, cmdout2, % RSHELL_COMMAND_INTERNAL_DRIVE_GET_TEXT1, list, all
		StringReplace, cmdout2, cmdout2, % RSHELL_COMMAND_INTERNAL_DRIVE_GET_TEXT2, Capacity, all
		StringReplace, cmdout2, cmdout2, % RSHELL_COMMAND_INTERNAL_DRIVE_GET_TEXT3, Filesystem, all
		StringReplace, cmdout2, cmdout2, % RSHELL_COMMAND_INTERNAL_DRIVE_GET_TEXT4, Label, all
		StringReplace, cmdout2, cmdout2, % RSHELL_COMMAND_INTERNAL_DRIVE_GET_TEXT5, Type, all
		StringReplace, cmdout2, cmdout2, % RSHELL_COMMAND_INTERNAL_DRIVE_GET_TEXT6, Status, All
		StringReplace, cmdout2, cmdout2, % RSHELL_COMMAND_INTERNAL_DRIVE_GET_TEXT7, StatusCD, All
		
		DriveGet, result, % cmdout2, % cmdout3
		console.setVar(trim(cmdout1), result)
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_DRIVE_GET_MEMORY) {
		splited := SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_MEMORY_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_MEMORY_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		DriveSpaceFree, result, % cmdout2
		return console.setVar(trim(cmdout1), result)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_CONSOLE) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		if (trim(cmdout1) == "") {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_CONSOLE_SYNTAX%
%RSHELL_TEXT_USE_TO_VIEW_DETAILS_IN_DOCS_PREFIX% %CMD_PROCESS_FIRST%?.
			)
			return console.writeln(text)
		}
	
		if (trim(string.up(cmdout1)) == RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT1) {
			if (beta) {
				return console.warning(RSHELL_UNABLE_TO_EXECUTE_ERROR_BETA)
			}
			
			if (!installed) {
				console.warning(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT2)
				return
			}
			
			console.info(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT3_PREFIX " " version "...")
			console.writeln("")
			
			FileCreateDir, % root
			console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT4_PREFIX " " A_ScriptName " " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT_IN_WORD " " root "...")
			FileCopy, % A_ScriptFullPath, %root%\rshell.exe, 1
			
			console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT5)
			RegWrite, REG_SZ, HKCR, .rs,, renux-file
			RegWrite, REG_SZ, HKCR, renux-file,, %RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT7%
			RegWrite, REG_SZ, HKCR, renux-file\shell\Open\command,, %root%\rshell.exe "`%1"
			RegWrite, REG_SZ, HKCR, renux-file\DefaultIcon,, %root%\rshell.exe, 1
			
			console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT6)
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, DisplayIcon, %root%\rshell.exe
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, DisplayName, Renux Shell
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, DisplayVersion, % version
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, NoModify, 1
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, Publisher, Streleckiy Development
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, UninstallString, "%root%\rshell.exe" "uninstall"
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, URLInfoAbout, http://vk.com/strdev
			
			console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT8)
			FileCreateShortcut, %root%\rshell.exe, %A_Desktop%\Renux Shell.lnk,,, %RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT14%, %root%\rshell.exe
			
			console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT9)
			FileCreateShortcut, %root%\rshell.exe, %A_Programs%\Renux Shell\Renux Shell.lnk,,, %RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT14%, %root%\rshell.exe
			
			console.writeln("")
			console.info(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT10)
			console.cmd("pause")
			exitapp
			return 1
		}
		
		if (trim(string.up(cmdout1)) == RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT11) {
			if (beta)
				return console.warning(RSHELL_UNABLE_TO_EXECUTE_ERROR_BETA)
			
			need_path = %root%\rshell.exe
			if (need_path == A_ScriptFullPath) {
				console.error(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT12)
				return 1
			}
			
			console.info(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT3_PREFIX " " version "...")
			console.writeln("")
			
			FileCreateDir, % root
			console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT4_PREFIX " " A_ScriptName " " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT_IN_WORD " " root "...")
			FileCopy, % A_ScriptFullPath, %root%\rshell.exe, 1
			
			console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT13)
			RegWrite, REG_SZ, HKCR, .rs,, renux-file
			RegWrite, REG_SZ, HKCR, renux-file,, %RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT7%
			RegWrite, REG_SZ, HKCR, renux-file\shell\Open\command,, %root%\rshell.exe "`%1"
			RegWrite, REG_SZ, HKCR, renux-file\DefaultIcon,, %root%\rshell.exe, 1
			
			console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT15)
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, DisplayIcon, %root%\rshell.exe
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, DisplayName, Renux Shell
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, DisplayVersion, % version
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, NoModify, 1
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, Publisher, Streleckiy Development
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, UninstallString, "%root%\rshell.exe" "uninstall"
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, URLInfoAbout, http://vk.com/strdev
			
			console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT8)
			FileCreateShortcut, %root%\rshell.exe, %A_Desktop%\Renux Shell.lnk,,, %RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT14%, %root%\rshell.exe
			
			console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT9)
			FileCreateDir, %A_Programs%\Renux Shell
			FileCreateShortcut, %root%\rshell.exe, %A_Programs%\Renux Shell\Renux Shell.lnk,,, %RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT14%, %root%\rshell.exe
			
			console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT16)
			RegRead, path, HKCU, Environment, PATH
			RegWrite, REG_EXPAND_SZ, HKCU, Environment, PATH, %path%`%AppData`%\by.strdev\`;
			EnvUpdate
	
			console.writeln("")
			console.info(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT17)
			console.cmd("pause")
			
			exitapp
			return 1
		}
		
		if (trim(string.up(cmdout1)) == RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT18) {
			ifnotexist, %root%\rshell.exe
			{
				console.error(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT19)
				return 0
			}
			
			console.question(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT20)
			if (console.waitKeys("Y,N") == "N")
				return 0
				
			console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT21)
			RegDelete, HKCR, .rs
			RegDelete, HKCR, renux-file
			
			console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT22)
			RegDelete, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell
			RegRead, path, HKCU, Environment, PATH
			RegWrite, REG_EXPAND_SZ, HKCU, Environment, PATH, % StrReplace(path, "%AppData%\by.strdev\;")
			EnvUpdate
			
			loop, files, %root%\products\*, D
			{
				FileRemoveDir, %A_LoopFileFullPath%
				console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT23_PREFIX " '" A_LoopFileName "'...")
				dir := A_LoopFileName
				Process, close, app.exe
				FileDelete, % A_Programs "\Renux Shell\" dir ".lnk"
				FileRemoveDir, %root%\products\%dir%, 1
				if (errorlevel) {
					console.warning(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT24 " " cmdout1)
					console.cmd("pause")
				} else
					console.info(RSHELL_EXECUTECMD_OPERATION_SUCCESSFUL)
			}
			
			console.progress(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT25)
			FileRemoveDir, %A_Programs%\Renux Shell, 1
			
			SetWorkingDir, %A_AppData%
			Run, %ComSpec% /c start cmd.exe /c "timeout /t 5 & rd by.strdev /s /q & chcp 1251 > nul & title Renux Shell & cls & echo %RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT26% & pause & exit",, Hide
			exitapp
		}
		
		console.warning(RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT27)
		return 0
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_PROG) {
		if debug
			console.writeln("[DEBUG] " RSHELL_COMMAND_INTERNAL_PROG_TEXT1)
		
		if (!installed) {
			console.error(RSHELL_COMMAND_INTERNAL_PROG_TEXT2)
			return
		}
		
		if (!allow_console_writing)
			return 0
		
		prod_list := server_api("products")
		
		if prod_list not contains output
		{
			console.error(RSHELL_COMMAND_INTERNAL_PROG_TEXT3)
			return 0
		}
		
		prod_count := JSON.GetKey(prod_list, "output.count")
		index := -1
		prod := []
		
		console.writeln("")
		console.writeln(StrReplace(RSHELL_COMMAND_INTERNAL_PROG_TEXT4, "%1", prod_count))
		
		loop, % prod_count
		{
			index+=1
			prod_is_dir := JSON.GetKey(prod_list, "output.items[" index "].is_dir")
			
			if (prod_is_dir == "true") {
				prod[index+1] := JSON.GetKey(prod_list, "output.items[" index "].name")
				console.writeln(index+1 ": " prod[index+1])
			}
		}
		
		console.writeln("")
		
		input_prod_num:
		console.write(RSHELL_COMMAND_INTERNAL_PROG_TEXT5 ">")
		prod_num := trim(console.read())
		
		if (prod_num == "")
			return 0
		
		if prod_num is not integer
		{
			console.warning(RSHELL_COMMAND_INTERNAL_PROG_TEXT6)
			goto input_prod_num
		}
		
		if ((prod_num > (index+1)) || (prod_num < 1)) {
			console.warning(RSHELL_COMMAND_INTERNAL_PROG_TEXT7)
			goto input_prod_num
		}
		
		console.writeln(prod[prod_num])
		console.writeln("")
		console.writeln(RSHELL_COMMAND_INTERNAL_PROG_TEXT8)
		
		ifexist, % root "\products\" prod[prod_num]
		{
			console.writeln("1: " RSHELL_COMMAND_INTERNAL_PROG_TEXT9 "`n2: " RSHELL_COMMAND_INTERNAL_PROG_TEXT10)
			console.writeln("")
			
			loop {
				console.write(RSHELL_COMMAND_INTERNAL_PROG_TEXT11 ">")
				prod_action := trim(console.read())
				
				if prod_action is not integer
				{
					console.warning(RSHELL_COMMAND_INTERNAL_PROG_TEXT6)
					continue
				}
				
				if (prod_action == 1) {
					prod_action = update
					break
				}
				
				if (prod_action = 2) {
					prod_action = deinstall
					break
				}
			}
		}
		else {
			console.writeln("1: " RSHELL_COMMAND_INTERNAL_PROG_TEXT12)
			console.writeln("")
		
			loop {
				console.write(RSHELL_COMMAND_INTERNAL_PROG_TEXT13 ">")
				prod_action := trim(console.read())
				
				if prod_action is not integer
				{
					console.warning(RSHELL_COMMAND_INTERNAL_PROG_TEXT6)
					continue
				}
				
				if (prod_action == 1) {
					prod_action = install
					break
				}
			}
		}
		
		if (prod_action == "deinstall") {
			console.question(RSHELL_COMMAND_INTERNAL_PROG_TEXT14)
			if (console.waitKeys("Y,N") == "Y") {
				console.progress(StrReplace(RSHELL_COMMAND_INTERNAL_PROG_TEXT15, "%1", prod[prod_num]))
				dir := prod[prod_num]
				Process, close, app.exe
				FileDelete, % A_Programs "\Renux Shell\" dir ".lnk"
				FileRemoveDir, %root%\products\%dir%, 1
				if errorlevel
					console.warning(StrReplace(RSHELL_COMMAND_INTERNAL_PROG_TEXT16, "%1", cmdout1))
				else
					console.info(RSHELL_EXECUTECMD_OPERATION_SUCCESSFUL)
			}
		} else {
			prod_files := server_api("products&name=" prod[prod_num])
			
			if prod_files not contains output
			{
				console.error(RSHELL_COMMAND_INTERNAL_PROG_TEXT17)
				return 0
			}
			
			prod_count_files := JSON.GetKey(prod_files, "output.count"), prod_count := prod_count_files
			index := -1
			
			console.writeln("")
			console.writeln(RSHELL_COMMAND_INTERNAL_PROG_TEXT18)
			
			sizefiles = 0
			loop, % prod_count
			{
				index+=1
				file_is_dir 	:= JSON.GetKey(prod_files, "output.items[" index "].is_dir")
				
				if (file_is_dir == "false") {
					file_size 		:= JSON.GetKey(prod_files, "output.items[" index "].size")
					file_name		:= JSON.GetKey(prod_files, "output.items[" index "].name")
				}
				
				console.writeln("- " file_name " (" file_size " " RSHELL_DOWNLOADER_BYTE_WORD ")")
				sizefiles+=%file_size%
			}
		
			console.writeln("")
			console.question(StrReplace(RSHELL_COMMAND_INTERNAL_PROG_TEXT19, "%1", sizefiles))
			if (console.waitKeys("Y,N") == "Y") {
				console.writeln("")
				
				FileCreateDir, % root "\products\" prod[prod_num]
				
				index := -1
				loop, % prod_count
				{
					index+=1
					file_is_dir 	:= JSON.GetKey(prod_files, "output.items[" index "].is_dir")
					
					if (file_is_dir == "false") {
						file_size 		:= JSON.GetKey(prod_files, "output.items[" index "].size")
						file_name		:= JSON.GetKey(prod_files, "output.items[" index "].name")
					}
					
					loop {
						console.progress(StrReplace(StrReplace(RSHELL_COMMAND_INTERNAL_PROG_TEXT21, "%2", file_size), "%1", file_name))
						FileDelete, % root "\products\" prod[prod_num] "\" file_name
						URLDownloadToFile, % host "/products/" prod[prod_num] "/" file_name, % root "\products\" prod[prod_num] "\" file_name
						
						FileGetSize, pcsize, % root "\products\" prod[prod_num] "\" file_name
						
						if (file_size == pcsize)
							break
						
						console.warning(RSHELL_COMMAND_INTERNAL_PROG_TEXT22 " (#" A_Index ")")
					}
					
					sizefiles+=%file_size%
				}
				
				s = `"
				product_name := prod[prod_num]
				console.progress(RSHELL_COMMAND_INTERNAL_PROG_TEXT23)
				
				FileCreateDir, %A_Programs%\Renux Shell
				FileCreateShortcut, %root%\rshell.exe, %A_Desktop%\%product_name%.lnk,, start "%product_name%", %RSHELL_COMMAND_INTERNAL_PROG_TEXT24% %product_name%, %root%\products\%product_name%\app.exe
				console.progress(RSHELL_COMMAND_INTERNAL_PROG_TEXT25)
				FileCopy, %A_Desktop%\%product_name%.lnk, %A_Programs%\Renux Shell\%product_name%.lnk, 1
				
				console.writeln("")
				console.info(RSHELL_EXECUTECMD_OPERATION_SUCCESSFUL)
			}
		}
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_CD) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		
		if (trim(cmdout1) == "") {
			console.writeln(A_WorkingDir)
			return 0
		}
		
		outdrive =
		SplitPath, cmdout1, , , , , OutDrive
		if (trim(OutDrive) != "") {
			SetWorkingDir, % string.up(outdrive)
		}
		
		setted = 0
		loop, parse, cmdout1, `\
		{
			if (A_LoopField == "")
				continue
			
			patternlen := string.len(A_LoopField)
			Loop, files, %A_WorkingDir%\*, D
			{
				FileGetAttrib, Attribs, % A_LoopFileFullPath
				if (InStr(Attribs,"D")) {
					file_name := string.left(A_LoopFileName, patternlen)
					if (string.up(A_LoopField) == string.up(file_name)) {
						SetWorkingDir, %A_WorkingDir%\%A_LoopFileName%
						setted+=1
						break
					}
				}
			}
			
			Loop, files, %A_WorkingDir%\*, F
			{
				if (string.down(A_LoopFileExt) == "lnk") {
					file_name := string.left(A_LoopFileName, patternlen)
					if (string.up(A_LoopField) == string.up(file_name)) {
						FileGetShortcut, % A_LoopFileFullPath, target, dir
						
						loop, parse, target, `\
						{
							SetWorkingDir, % A_LoopField
							if errorlevel
								break
							
							setted+=1
							continue
						}
						
						Loop, parse, dir, `\
						{
							SetWorkingDir, % A_LoopField
							if errorlevel
								break
							
							setted+=1
							continue
						}
						
						break
					}
				}
			}
		}
		
		return setted
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_DIR) {
		cmdout1 =
		SplitCommand(cmd_text, 1, "cmdout")
		
		if (trim(cmdout1) == "")
			cmdout1 = *
		
		console.writeln(StrReplace(RSHELL_COMMAND_INTERNAL_DIR_TEXT1, "%1", A_WorkingDir))
		
		if (cmdout1 != "*") {
			console.writeln(StrReplace(RSHELL_COMMAND_INTERNAL_DIR_TEXT2, "%1", cmdout1))
		}
		
		console.writeln("")
		
		files := 0, folders := 0
		
		loop, %A_WorkingDir%\%cmdout1%, 1
		{
			f := A_LoopFileFullPath, timee := ""
			
			FileGetTime, time, %f%, M
			FormatTime, time, % time, dd.MM.yyyy hh:mm:ss
			FileGetAttrib, Attribs, % f
			
			If (InStr(Attribs,"D")) {
				folders+=1
				console.writeln("`t" time " `t<" RSHELL_COMMAND_INTERNAL_DIR_TEXT3 ">`t`t" A_LoopFileName)
			} else {
				SplitPath, A_LoopFileFullPath,,, Extension
				extension := trim(string.down(Extension))
				
				if (extension == "rs") {
					files+=1
					console.writeln("`t" time " `t<" RSHELL_COMMAND_INTERNAL_DIR_TEXT4 ">`t" A_LoopFileName) 
				} else {
					files+=1
					console.writeln("`t" time "`t`t`t" A_LoopFileName) 
				}
			}
		}
		
		console.writeln("")
		console.writeln(StrReplace(StrReplace(RSHELL_COMMAND_INTERNAL_DIR_TEXT5, "%2", folders), "%1", files))
		return 1
	}
	
	cmd_process_first_array := StrSplit(RSHELL_COMMAND_NAME_CD_DOT, " / ")
	
	if (cmd_process_first == cmd_process_first_array[1]) {
		f := A_WorkingDir
		while (true) {
			if (string.right(f, 1) == "\") {
				break
			}
			
			f := string.left(f, string.len(f)-1)
			
			if (trim(f) == "") {
				return 0
			}
		}
		
		SetWorkingDir, % f
		return 1
	}
	
	if (cmd_process_first == cmd_process_first_array[2]) {
		loop, 2
			executeCMD(cmd_process_first_array[1])
		
		return 1
	}
	
	if (cmd_process_first == cmd_process_first_array[3]) {
		loop, 3
			executeCMD(cmd_process_first_array[1])
		
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_PROCESS) {
		splited := SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_PROCESS_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_PROCESS_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		if (trim(string.down(cmdout1)) == RSHELL_COMMAND_INTERNAL_PROCESS_OPERATION1) {
			Process, exist, % cmdout2
			return ErrorLevel
		}
		
		if (trim(string.down(cmdout1)) == RSHELL_COMMAND_INTERNAL_PROCESS_OPERATION2) {
			AccessRights_EnableSeDebug()
			
			OUT_LIST := "", COUNT_NO_PATHS := 0, PROCESSES := 0
			for i, v in WTSEnumerateProcessesEx()
			{
				if (v.ProcessID == cmdout2) {
					process, close, % cmdout2
					if (ErrorLevel == cmdout2) {
						console.writeln(StrReplace(StrReplace(RSHELL_COMMAND_INTERNAL_PROCESS_TEXT1, "%2", v.ProcessID), "%1", (v.ProcessName ? v.ProcessName : "<" RSHELL_COMMAND_INTERNAL_PROCESS_TEXT4 ">")))
						PROCESSES++
						break
					} else {
						console.writeln(StrReplace(StrReplace(RSHELL_COMMAND_INTERNAL_PROCESS_TEXT2, "%2", v.ProcessID), "%1", (v.ProcessName ? v.ProcessName : "<" RSHELL_COMMAND_INTERNAL_PROCESS_TEXT4 ">")))
					}
				}
				
				if (string.down(v.ProcessName) == string.down(cmdout2)) {
					process, close, % v.ProcessID
					if (ErrorLevel == v.ProcessID) {
						console.writeln(StrReplace(StrReplace(RSHELL_COMMAND_INTERNAL_PROCESS_TEXT1, "%2", v.ProcessID), "%1", (v.ProcessName ? v.ProcessName : "<" RSHELL_COMMAND_INTERNAL_PROCESS_TEXT4 ">")))
						PROCESSES++
						continue
					} else {
						console.error(StrReplace(StrReplace(RSHELL_COMMAND_INTERNAL_PROCESS_TEXT2, "%2", v.ProcessID), "%1", (v.ProcessName ? v.ProcessName : "<" RSHELL_COMMAND_INTERNAL_PROCESS_TEXT4 ">")))
					}
				}
			}
			
			console.writeln("`n" StrReplace(RSHELL_COMMAND_INTERNAL_PROCESS_TEXT3, "%1", PROCESSES))
			return processes
		}
		
		if (trim(string.down(cmdout1)) == RSHELL_COMMAND_INTERNAL_PROCESS_OPERATION3) {
			Process, Wait, % cmdout2
			return ErrorLevel
		}
		
		if (trim(string.down(cmdout1)) == RSHELL_COMMAND_INTERNAL_PROCESS_OPERATION4) {
			Process, WaitClose, % cmdout2
			return ErrorLevel
		}
		
		if (trim(string.down(cmdout1)) == RSHELL_COMMAND_INTERNAL_PROCESS_OPERATION5) {
			Process_Suspend(cmdout2)
			return 1
		}
		
		if (trim(string.down(cmdout1)) == RSHELL_COMMAND_INTERNAL_PROCESS_OPERATION6) {
			Process_Resume(cmdout2)
			return 1
		}
		
		if (trim(string.down(cmdout1)) == RSHELL_COMMAND_INTERNAL_PROCESS_OPERATION7) {
			AccessRights_EnableSeDebug()
			
			OUT_LIST := "", COUNT_NO_PATHS := 0, PROCESSES := 0
			for i, v in WTSEnumerateProcessesEx()
			{
				FullEXEPath := GetModuleFileNameEx( v.ProcessID )
				PROCESSES+=1
				
				if (v.ProcessName == "")
					v.ProcessName := "[" RSHELL_COMMAND_INTERNAL_PROCESS_TEXT4 "]"
				
				console.writeln("`n> " v.ProcessName ":`n  " RSHELL_COMMAND_INTERNAL_PROCESS_TEXT5 ": " FileGetInfo(FullEXEPath).FileDescription "`n  " RSHELL_COMMAND_INTERNAL_PROCESS_TEXT6 ": " v.ProcessID "`n  " RSHELL_COMMAND_INTERNAL_PROCESS_TEXT7 ": " FullEXEPath "`n  " RSHELL_COMMAND_INTERNAL_PROCESS_TEXT8 ": " FileGetInfo( FullEXEPath ).LegalCopyright)
			}
			
			console.writeln("`n" StrReplace(RSHELL_COMMAND_INTERNAL_PROCESS_TEXT9, "%1", PROCESSES))
			return 1
		}
		
		console.error(RSHELL_COMMAND_INTERNAL_PROCESS_TEXT10)
		return -1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_TRANSPARENT) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		
		if ((trim(cmdout1) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_TRANSPARENT_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_TRANSPARENT_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		if cmdout1 is not integer
		{
			console.error(RSHELL_COMMAND_INTERNAL_TRANSPARENT_TEXT1)
			return 0
		}
		
		if ((cmdout1 < 100) || (cmdout1 > 255)) {
			console.error(RSHELL_COMMAND_INTERNAL_TRANSPARENT_TEXT2)
			return 0
		}
		
		WinSet, Transparent, % cmdout1, ahk_id %mainwid%
		IniWrite, % cmdout1, % config, start, transparent
		
		start_transparent := cmdout1
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_SOUND_SET) {
		splited := SplitCommand(cmd_text, 4, "cmdout")
		
		if ((trim(cmdout1) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_SOUND_SET_SYNTAX%
%RSHELL_TEXT_USE_TO_VIEW_DETAILS_IN_DOCS_PREFIX% %CMD_PROCESS_FIRST%?.
			)
			return console.writeln(text)
		}
		
		SoundSet, % cmdout1, % cmdout2, % cmdout3, % cmdout4
		e := ErrorLevel
		if e is integer
		{
			return 1-ErrorLevel
		} else {
			return StrReplace(StrReplace(StrReplace(StrReplace(StrReplace(StrReplace(StrReplace(ErrorLevel, "Invalid Control Type or Component Type", RSHELL_COMMAND_INTERNAL_SOUND_SET_TEXT1), "Can't Open Specified Mixer", RSHELL_COMMAND_INTERNAL_SOUND_SET_TEXT2), "Mixer Doesn't Support This Component Type", RSHELL_COMMAND_INTERNAL_SOUND_SET_TEXT3), "Mixer Doesn't Have That Many of That Component Type", RSHELL_COMMAND_INTERNAL_SOUND_SET_TEXT4), "Component Doesn't Support This Control Type", RSHELL_COMMAND_INTERNAL_SOUND_SET_TEXT5), "Can't Get Current Setting", RSHELL_COMMAND_INTERNAL_SOUND_SET_TEXT6), "Can't Change Setting", RSHELL_COMMAND_INTERNAL_SOUND_SET_TEXT7)
		}
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_MSGBOX) {
		splited := SplitCommand(cmd_text, 4, "cmdout")
		
		if ((trim(cmdout2) == "") ||(trim(cmdout3) == "") ||  (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_MSGBOX_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_MSGBOX_EXAMPLE%
			)
			console.writeln(text)
			return 0
		}
		
		if (cmdout1 == 0) {
			Msgbox, 0, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 1) {
			Msgbox, 1, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 2) {
			Msgbox, 2, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 3) {
			Msgbox, 3, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 4) {
			Msgbox, 4, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 5) {
			Msgbox, 5, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 6) {
			Msgbox, 6, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 7) {
			Msgbox, 7, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 8) {
			Msgbox, 8, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 9) {
			Msgbox, 9, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 10) {
			Msgbox, 10, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 11) {
			Msgbox, 11, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 12) {
			Msgbox, 12, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 13) {
			Msgbox, 13, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 14) {
			Msgbox, 14, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 15) {
			Msgbox, 15, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 16) {
			Msgbox, 16, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 17) {
			Msgbox, 17, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 18) {
			Msgbox, 18, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 19) {
			Msgbox, 19, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 20) {
			Msgbox, 20, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 21) {
			Msgbox, 21, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 22) {
			Msgbox, 22, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 23) {
			Msgbox, 23, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 24) {
			Msgbox, 24, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 25) {
			Msgbox, 25, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 26) {
			Msgbox, 26, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 27) {
			Msgbox, 27, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 28) {
			Msgbox, 28, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 29) {
			Msgbox, 29, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 30) {
			Msgbox, 30, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 31) {
			Msgbox, 31, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 32) {
			Msgbox, 32, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 33) {
			Msgbox, 33, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 34) {
			Msgbox, 34, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 35) {
			Msgbox, 35, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 36) {
			Msgbox, 36, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 37) {
			Msgbox, 37, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 38) {
			Msgbox, 38, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 39) {
			Msgbox, 39, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 40) {
			Msgbox, 40, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 41) {
			Msgbox, 41, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 42) {
			Msgbox, 42, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 43) {
			Msgbox, 43, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 44) {
			Msgbox, 44, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 45) {
			Msgbox, 45, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 46) {
			Msgbox, 46, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 47) {
			Msgbox, 47, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 48) {
			Msgbox, 48, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 49) {
			Msgbox, 49, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 50) {
			Msgbox, 50, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 51) {
			Msgbox, 51, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 52) {
			Msgbox, 52, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 53) {
			Msgbox, 53, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 54) {
			Msgbox, 54, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 55) {
			Msgbox, 55, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 56) {
			Msgbox, 56, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 57) {
			Msgbox, 57, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 58) {
			Msgbox, 58, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 59) {
			Msgbox, 59, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 60) {
			Msgbox, 60, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 61) {
			Msgbox, 61, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 62) {
			Msgbox, 62, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 63) {
			Msgbox, 63, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 64) {
			Msgbox, 64, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 65) {
			Msgbox, 65, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 66) {
			Msgbox, 66, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 67) {
			Msgbox, 67, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 68) {
			Msgbox, 68, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 69) {
			Msgbox, 69, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 70) {
			Msgbox, 70, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 71) {
			Msgbox, 71, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 72) {
			Msgbox, 72, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 73) {
			Msgbox, 73, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 74) {
			Msgbox, 74, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 75) {
			Msgbox, 75, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 76) {
			Msgbox, 76, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 77) {
			Msgbox, 77, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 78) {
			Msgbox, 78, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 79) {
			Msgbox, 79, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 80) {
			Msgbox, 80, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 81) {
			Msgbox, 81, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 82) {
			Msgbox, 82, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 83) {
			Msgbox, 83, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 84) {
			Msgbox, 84, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 85) {
			Msgbox, 85, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 86) {
			Msgbox, 86, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 87) {
			Msgbox, 87, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 88) {
			Msgbox, 88, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 89) {
			Msgbox, 89, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 90) {
			Msgbox, 90, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 91) {
			Msgbox, 91, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 92) {
			Msgbox, 92, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 93) {
			Msgbox, 93, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 94) {
			Msgbox, 94, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 95) {
			Msgbox, 95, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 96) {
			Msgbox, 96, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 97) {
			Msgbox, 97, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 98) {
			Msgbox, 98, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 99) {
			Msgbox, 99, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		if (cmdout1 == 100) {
			Msgbox, 100, %cmdout2%, %cmdout3%, %cmdout4%
		}
		
		IfMsgBox, Yes
			console.setVar(RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_VARNAME, RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_YES, 0)
		
		IfMsgBox, No
			console.setVar(RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_VARNAME, RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_NO, 0)
		
		IfMsgBox, OK
			console.setVar(RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_VARNAME, RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_OK, 0)
		
		IfMsgBox, Cancel
			console.setVar(RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_VARNAME, RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_CANCEL, 0)
		
		IfMsgBox, Abort
			console.setVar(RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_VARNAME, RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_ABORT, 0)
		
		IfMsgBox, Ignore
			console.setVar(RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_VARNAME, RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_IGNORE, 0)
		
		IfMsgBox, Retry
			console.setVar(RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_VARNAME, RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_RETRY, 0)
		
		IfMsgBox, Timeout
			console.setVar(RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_VARNAME, RSHELL_COMMAND_INTERNAL_MSGBOX_RESPONSE_WORD_TIMEOUT, 0)
		
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_TRAYTIP) {
		splited := SplitCommand(cmd_text, 4, "cmdout")
		
		if ((trim(cmdout1) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_TRAYTIP_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_TRAYTIP_EXAMPLE%
			)
			console.writeln(text)
			return 0
		}
		
		Menu, Tray, Icon
		TrayTip, % cmdout1, % cmdout2, % cmdout3, % cmdout4
		
		if (trim(cmdout4) == "")
			cmdout4 = 10
		
		settimer, hidetrayicon, % cmdout4
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_DISPLAY) {
		splited := SplitCommand(cmd_text, 1, "cmdout")
		
		if ((trim(cmdout1) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DISPLAY_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DISPLAY_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		if (string.down(trim(cmdout1)) == RSHELL_COMMAND_INTERNAL_DISPLAY_ACTION_OFF_WORD) {
			SendMessage, 0x112, 0xF170, 2,, Program Manager
			return 1
		}
		
		if (string.down(trim(cmdout1)) == RSHELL_COMMAND_INTERNAL_DISPLAY_ACTION_ON_WORD) {
			SendMessage, 0x112, 0xF170, -1,, Program Manager
			return 1
		}
		
		if (string.down(trim(cmdout1)) == RSHELL_COMMAND_INTERNAL_DISPLAY_ACTION_ECO_WORD) {
			SendMessage, 0x112, 0xF170, 1,, Program Manager
			return 1
		}
		
		console.error(RSHELL_COMMAND_INTERNAL_DISPLAY_ACTION_TEXT1)
		return -1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_SOUND_BEEP) {
		SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_SOUND_BEEP_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_SOUND_BEEP_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		SoundBeep, % cmdout1, % cmdout2
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_SOUND_GET) {
		SplitCommand(cmd_text, 4, "cmdout")
		if ((trim(cmdout1) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		SoundGet, output, % cmdout2, % cmdout3, % cmdout4
		console.setVar(cmdout1, output)
		e := ErrorLevel
		if e is integer
		{
			return 1-ErrorLevel
		} else {
			return StrReplace(StrReplace(StrReplace(StrReplace(StrReplace(StrReplace(StrReplace(ErrorLevel, "Invalid Control Type or Component Type", RSHELL_COMMAND_INTERNAL_SOUND_GET_TEXT1), "Can't Open Specified Mixer", RSHELL_COMMAND_INTERNAL_SOUND_GET_TEXT2), "Mixer Doesn't Support This Component Type", RSHELL_COMMAND_INTERNAL_SOUND_GET_TEXT3), "Mixer Doesn't Have That Many of That Component Type", RSHELL_COMMAND_INTERNAL_SOUND_GET_TEXT4), "Component Doesn't Support This Control Type", RSHELL_COMMAND_INTERNAL_SOUND_GET_TEXT5), "Can't Get Current Setting", RSHELL_COMMAND_INTERNAL_SOUND_GET_TEXT6), "Can't Change Setting", RSHELL_COMMAND_INTERNAL_SOUND_GET_TEXT7)
		}
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_SOUND_PLAY) {
		SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (splited == -2))
		{
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_SOUND_PLAY_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_SOUND_PLAY_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		SoundPlay, % cmdout1, % cmdout2
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_REG_READ) {
		SplitCommand(cmd_text, 4, "cmdout")
		
		if ((splited == -2) || (trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_REG_READ_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_REG_READ_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		RegRead, output, % cmdout2, % cmdout3, % cmdout4
		e := ErrorLevel
		if e
			return 1-ErrorLevel
		
		return console.setVar(cmdout1, output)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_REG_WRITE) {
		SplitCommand(cmd_text, 5, "cmdout")
		
		if ((splited == -2) || (trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "")|| (trim(cmdout4) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_REG_WRITE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_REG_WRITE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		RegWrite, % cmdout1, % cmdout2, % cmdout3, % cmdout4, % cmdout5
		e := ErrorLevel
		if e
			return 1-ErrorLevel
		
		return console.setVar(cmdout1, output)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_REG_DELETE) {
		SplitCommand(cmd_text, 3, "cmdout")
		
		if ((splited == -2) || (trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "")|| (trim(cmdout4) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_REG_DELETE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_REG_DELETE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		RegDelete, % cmdout1, % cmdout2, % cmdout3 
		e := ErrorLevel
		if e
			return 1-ErrorLevel
		
		return console.setVar(cmdout1, output)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_SCREENSHOT) {
		SplitCommand(cmd_text, 1, "cmdout")
		
		if ((trim(cmdout1) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_SCREENSHOT_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_SCREENSHOT_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileDelete, % cmdout1
		SaveScreenshotToFile(0, 0, A_ScreenWidth, A_ScreenHeight, cmdout1)
		ifexist, % cmdout1
			return 1
		else
			return 0
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_BRIGHTNESS) {
		SplitCommand(cmd_text, 1, "cmdout")
		
		if ((trim(cmdout1) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_BRIGHTNESS_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_BRIGHTNESS_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		MoveBrightness(cmdout1)
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_ADDON) {
		console.writeln("`n" RSHELL_COMMAND_INTERNAL_ADDON_TEXT1)
		console.writeln("> " RSHELL_COMMAND_INTERNAL_ADDON_TEXT2)
		console.writeln("  [1] - " RSHELL_COMMAND_INTERNAL_ADDON_ACTION_INSTALL)
		console.writeln("  [2] - " RSHELL_COMMAND_INTERNAL_ADDON_ACTION_UNINSTALL)
		console.writeln("  [3] - " RSHELL_COMMAND_INTERNAL_ADDON_ACTION_COMPILE)
		console.writeln("  [4] - " RSHELL_COMMAND_INTERNAL_ADDON_ACTION_EXIT)
		console.writeln("")
		action := console.waitKeys("1,2,3,4")
		
		if (action == 1) {
			console.writeln("  " RSHELL_COMMAND_INTERNAL_ADDON_TEXT3)
			loop {
				console.write("> " RSHELL_COMMAND_INTERNAL_ADDON_ENTER_PATH_TO_FILE ": ")
				link := console.read()
				
				if (trim(link) == "")
					return 0
				
				ifnotexist, % link
				{
					console.error(RSHELL_TEXT_FILE_NOT_FINDED)
					continue
				}
				
				break
			}
			
			FileRead, text, % link
			return unpackRSAC(text)
		}
		
		if (action == "2") {
			console.writeln(RSHELL_COMMAND_INTERNAL_ADDON_TEXT4)
			loop, files, %root%\*.rsa
			{
				IniRead, описание, % A_LoopFileFullPath, addon, description, % ""
				console.writeln("- " A_LoopFileName " (" описание ")")
			}
			
			console.writeln("")
			loop {
				console.write(RSHELL_COMMAND_INTERNAL_ADDON_ACTION_DELETE_BY_FILE_NAME ": ")
				filename := console.read()
				if (trim(filename) == "") {
					return 0
				}
				
				ifnotexist, %root%\%filename%
				{
					console.writeln(RSHELL_COMMAND_INTERNAL_ADDON_TEXT5)
					continue
				}
				
				IniRead, имя_пакета, %root%\%filename%, addon, batch_name, % " "
				FileDelete, %root%\%filename%
				FileDelete, %root%\%имя_пакета%.rs
				console.writeln(RSHELL_COMMAND_INTERNAL_ADDON_TEXT6)
				sleep 4000
				processCMD(RSHELL_COMMAND_NAME_RESTART)
				return 1
			}
		}
		
		if (action == "3") {
			loop {
				console.write("> " RSHELL_COMMAND_INTERNAL_ADDON_ENTER_PATH_TO_FILE " (*.rsa): ")
				file_rsa := console.read()
				
				if (trim(file_rsa) == "") {
					return 0
				}
				
				ifnotexist, % file_rsa
				{
					console.writeln(RSHELL_TEXT_FILE_NOT_FINDED)
					continue
				}
				
				break
			}
			
			loop {
				console.write("> " RSHELL_COMMAND_INTERNAL_ADDON_ENTER_PATH_TO_FILE " (*.rs): ")
				file_rs := console.read()
				
				if (trim(file_rs) == "") {
					return 0
				}
				
				ifnotexist, % file_rs
				{
					console.writeln(RSHELL_TEXT_FILE_NOT_FINDED)
					continue
				}
				
				break
			}
			
			loop {
				console.write("> " RSHELL_COMMAND_INTERNAL_ADDON_ACTION_ENTER_PATH_TO_FUTURE_FILE ": ")
				file_rsac := console.read()
				
				if (trim(file_rsac) == "") {
					return 0
				}
				
				FileDelete, % file_rsac ".rsac"
				FileRead, rsa_text, % file_rsa
				FileRead, rs_text, % file_rs
				
				FileAppend, %rsa_text%`n<< СКРИПТ >>`n%rs_text%, % file_rsac ".rsac"
				if errorlevel
				{
					console.error(RSHELL_TEXT_CANT_WRITE_FILE ": " file_rsac ".")
					return 0
				}
				
				console.writeln(StrReplace(RSHELL_COMMAND_INTERNAL_ADDON_SUCCESSFUL_COMPILED, "%1", file_rsac))
				return 1
			}
		}
		
		if (action == "4") {
			return 1
		}
		
		return 0
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_CREATEFORMDATA) {
		SplitCommand(cmd_text, 4, "cmdout")
		
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "") || (trim(cmdout4) == "") || (splited == -2)) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_CREATEFORMDATA_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_CREATEFORMDATA_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		objParam := {putArr(cmdout1): [cmdout2]}
		CreateFormData(PostData, hdr_ContentType, objParam)
		console.setVar(cmdout3, PostData)
		return console.setVar(cmdout4, hdr_ContentType)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_RANDOM) {
		SplitCommand(cmd_text, 3, "cmdout")
		
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_RANDOM_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_RANDOM_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		Random, OutputVar, % cmdout2, % cmdout3
		return console.setVar(cmdout1, OutputVar)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_REQUEST) {
		SplitCommand(cmd_text, 4, "cmdout")
		
		if (trim(cmdout1) == "") { ; больше не нада
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_REQUEST_SYNTAX%
%RSHELL_TEXT_USE_TO_VIEW_DETAILS_IN_DOCS_PREFIX% %CMD_PROCESS_FIRST%?.
	)
			return console.writeln(text)
		}
		
		method := trim(string.down(cmdout1))
		if (method == RSHELL_COMMAND_INTERNAL_REQUEST_WORD_OPEN) {
			HTTP := ComObjCreate("WinHttp.WinHttpRequest.5.1")
			try HTTP.Open(cmdout2, cmdout3, cmdout4)
			catch
				return 0
			
			return 1
		}
		
		if (method == RSHELL_COMMAND_INTERNAL_REQUEST_WORD_SEND) {
			if (isObject(console.getVar(cmdout2)) == 1) {
				console.writeln("[DEBUG] " RSHELL_COMMAND_INTERNAL_REQUEST_TEXT1)
				cmdout2 := console.getVar(cmdout2)
			}
			
			try HTTP.Send(cmdout2)
			catch
				return 0
			
			return 1
		}
		
		if (method == RSHELL_COMMAND_INTERNAL_REQUEST_WORD_SETREQUESTHEADER) {
			try HTTP.SetRequestHeader(cmdout2, cmdout3)
			catch
				return 0
			
			return 1
		}
		
		if (method == RSHELL_COMMAND_INTERNAL_REQUEST_WORD_TIMEOUT) {
			try HTTP.SetTimeouts(cmdout2)
			catch
				return 0
			
			return 1
		}
		
		if (method == RSHELL_COMMAND_INTERNAL_REQUEST_WORD_WAITRESPONSE) {
			try HTTP.WaitForResponse()
			catch
				return 0
			
			try response := HTTP.ResponseText
			catch
				return 0
			
			return response
		}
		
		console.error(RSHELL_COMMAND_INTERNAL_REQUEST_TEXT2)
		return -1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_COMPILE) {
		SplitCommand(cmd_text, 1, "cmdout")
		if (trim(cmdout1) == "") {
			console.info(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT1)
			
			while (true) {
				console.write("`n> " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT2 " ")
				script_path := console.read()
				
				if (trim(script_path) == "")
					return 0
				
				IfExist, % script_path ".rs"
					script_path := script_path ".rs"
				
				ifnotexist, % script_path
				{
					console.error(RSHELL_TEXT_FILE_NOT_FINDED)
					continue
				}
				
				break
			}
			
			while (true) {
				console.write("`n> " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT3 " ")
				icon_path := console.read()
				
				if (trim(icon_path) == "") {
					GetIconFromResource(A_Temp "\scriptico.ico", A_ScriptFullPath, 1)
					icon_path := A_Temp "\scriptico.ico"
					
					FileGetSize, size, % icon_path, B
					if (size > 0)
						console.info(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT4)
					else
						return 0
				}
				
				ifexist, % icon_path ".ico"
					icon_path := icon_path ".ico"
				
				ifnotexist, % icon_path
				{
					console.error(RSHELL_TEXT_FILE_NOT_FINDED)
					continue
				}
				
				break
			}
			
			console.write("`n> " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT5 " ")
			script_param := console.read()
		} else {
			; cmdout1 = script_path
			; cmdout2 = icon_path
			; cmdout3 = script_param
			; cmdout4 = save_path
			
			SplitCommand(cmd_text, 4, "cmdout")
			
			script_path 	:= cmdout1
			if (trim(script_path) == "") {
				return console.error(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT6)
			}
			
			IfExist, % script_path ".rs"
				script_path := script_path ".rs"
			
			ifnotexist, % script_path
				return console.error(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT7)
			
			icon_path 		:= cmdout2
			
			if (trim(icon_path) == "") {
				GetIconFromResource(A_Temp "\scriptico.ico", A_ScriptFullPath, 1)
				icon_path := A_Temp "\scriptico.ico"
				
				FileGetSize, size, % icon_path, B
				if (size > 0)
					console.info(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT4)
				else
					return 0
			}
				
			ifexist, % icon_path ".ico"
				icon_path := icon_path ".ico"
			
			ifnotexist, % icon_path
				return console.error(RSHELL_TEXT_FILE_NOT_FINDED)
			
			script_param	:= cmdout3
			save_path		:= cmdout4
		}
		
		console.writeln("")
		console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT8_PREFIX " Compiler\AutoHotKeySC.bin")
		FileInstall, Compiler\AutoHotkeySC.bin, %root%\AutoHotkeySC.bin, 1
		if (ErrorLevel) {
			console.error(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT9 " Compiler\AutoHotKeySC.bin " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT_IN_WORD " " root "!"ы)
			console.writeln("  " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT10)
			return -1
		}
		
		console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT8_PREFIX " Compiler\ANSI.bin...")
		FileInstall, Compiler\ANSI.bin, %root%\ANSI.bin, 1
		if (ErrorLevel) {
			console.error(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT9 " Compiler\ANSI.bin " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT9 " " root "!")
			console.writeln("  " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT10)
			
			console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT11)
			FileDelete, %root%\AutoHotKeySC.bin
			return -1
		}
		
		console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT8_PREFIX " Compiler\Ahk2Exe.exe...")
		FileInstall, Compiler\Ahk2Exe.exe, %root%\Ahk2Exe.exe, 1
		if (ErrorLevel) {
			console.error(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT9 " Compiler\Ahk2Exe.exe " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT9 " " root "!")
			console.writeln("  " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT10)
			
			console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT11)
			FileDelete, %root%\AutoHotKeySC.bin
			FileDelete, %root%\ANSI.bin
			return -1
		}
		
		console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT12)
		
		script_exe := "", line_count := 0, line_writed := 0
		FileRead, script_text, % script_path
		
		loop, parse, script_text, `r`n
		{
			line_count += 1
			
			if (trim(A_LoopField) == "")
				continue
			
			if (string.left(A_LoopField, 2) == "//")
				continue
			
			if !script_exe
				script_exe := A_LoopField
			else
				script_exe := script_exe "`n" A_LoopField
			
			line_writed += 1
		}
		
		if (trim(script_text) == "") {
			console.error(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT13)
			
			console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT11)
			FileDelete, %root%\AutoHotKeySC.bin
			FileDelete, %root%\ANSI.bin
			FileDelete, %root%\Ahk2Exe.exe
			return -1
		}
		
		console.info(StrReplace(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT14, "%1", line_count-line_writed))
		console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT15)
		
		filedelete, %root%\script.rs
		fileappend, % script_exe, %root%\script.rs
		if (ErrorLevel) {
			console.error(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT16)
			console.writeln("  " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT10)
			
			console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT11)
			FileDelete, %root%\AutoHotKeySC.bin
			FileDelete, %root%\ANSI.bin
			FileDelete, %root%\Ahk2Exe.exe
			return -1
		}
		
		console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT17)
		FileCopy, % A_ScriptFullPath, %root%\prog.exe, 1
		if (ErrorLevel) {
			console.error(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT18_PREFIX " " A_ScriptFullPath " " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT_IN_WORD " " root "!")
			console.writeln("  " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT10)
			
			console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT11)
			FileDelete, %root%\AutoHotKeySC.bin
			FileDelete, %root%\ANSI.bin
			FileDelete, %root%\Ahk2Exe.exe
			FileDelete, %root%\script.rs
			return -1
		}
		
		console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT19)
		FileCopy, % A_ScriptFullPath, %root%\prog.exe, 1
		if (ErrorLevel) {
			console.error(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT18_PREFIX " " A_ScriptFullPath " " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT_IN_WORD " " root "!")
			console.writeln("  " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT10)
			
			console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT11)
			FileDelete, %root%\AutoHotKeySC.bin
			FileDelete, %root%\ANSI.bin
			FileDelete, %root%\Ahk2Exe.exe
			FileDelete, %root%\script.rs
			return -1
		}
		
		console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT20)
		FileCopy, % icon_path, %root%\icon.ico, 1
		if (ErrorLevel) {
			console.error(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT18_PREFIX " " icon_path " " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT_IN_WORD " " root "!")
			console.writeln("  " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT10)
			
			console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT11)
			FileDelete, %root%\AutoHotKeySC.bin
			FileDelete, %root%\ANSI.bin
			FileDelete, %root%\Ahk2Exe.exe
			FileDelete, %root%\prog.exe
			return -1
		}
		
		console.progress(RSHELL_COMMMND_INTERNAL_COMPILE_TEXT21)
		FileDelete, %root%\executable.tmp
		FileAppend, 
		(
#SingleInstance Off
#NoEnv
#NoTrayIcon

Process_GetProcessInformation(ProcessID, CallVariableType, VariableCapacity, DataOffset){
  hSnapshot := DLLCall("CreateToolhelp32Snapshot", "UInt", 2, "UInt", 0)  ; TH32CS_SNAPPROCESS = 2
  if (hSnapshot >= 0)
  {
    VarSetCapacity(PE32, 304, 0)  ; PROCESSENTRY32 structure -> http://msdn2.microsoft.com/ms684839.aspx
    DllCall("ntdll.dll\RtlFillMemoryUlong", "UInt", &PE32, "UInt", 4, "UInt", 304)  ; Set dwSize
    VarSetCapacity(th32ProcessID, 4, 0)
    if (DllCall("Process32First", "UInt", hSnapshot, "UInt", &PE32))  ; http://msdn2.microsoft.com/ms684834.aspx
      Loop
      {
        DllCall("RtlMoveMemory", "UInt *", th32ProcessID, "UInt", &PE32 + 8, "UInt", 4)  ; http://msdn2.microsoft.com/ms803004.aspx
        if (ProcessID = th32ProcessID)
        {
          VarSetCapacity(th32DataEntry, VariableCapacity, 0)
          DllCall("RtlMoveMemory", CallVariableType, th32DataEntry, "UInt", &PE32 + DataOffset, "UInt", VariableCapacity)
          DllCall("CloseHandle", "UInt", hSnapshot)  ; http://msdn2.microsoft.com/ms724211.aspx
          Return th32DataEntry  ; Process data found
        }
        if not DllCall("Process32Next", "UInt", hSnapshot, "UInt", &PE32)  ; http://msdn2.microsoft.com/ms684836.aspx
          Break
      }
    DllCall("CloseHandle", "UInt", hSnapshot)
  }
  Return  ; Cannot find process
}

Process_GetParentProcessID(ProcessID){
  Return Process_GetProcessInformation(ProcessID, "UInt *", 4, 24)  ; DWORD th32ParentProcessID
}

Random, Name, 10000000000, 99999999999
FileInstall, script.rs, `%A_Temp`%\`%name`%.rs, 1
if (ErrorLevel) {
	Msgbox, 16, Renux Shell Executable File, %RSHELL_COMMAND_SUPERINTERNAL_COMPILE_TEXT1%
	exitapp
}

FileInstall, prog.exe, `%A_Temp`%\rshell.exe, 1
ParentProcessID := Process_GetParentProcessID(DllCall("GetCurrentProcessId"))
; Не учитываем ErrorLevel, так как мог быть запущен другой скрипт.

try Run, `%A_Temp`%\rshell.exe "`%A_Temp`%\`%name`%.rs:`%ParentProcessID`%" %script_param%
catch e {
	Msgbox, 16,, `% "%RSHELL_COMMAND_SUPERINTERNAL_COMPILE_TEXT2_PREFIX%``n``n" e.Message
	exitapp
}

exitapp
		), %root%\executable.tmp
		if (ErrorLevel) {
			console.error(StrReplace(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT22, "%1", root))
			console.writeln("  " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT10)
			
			console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT11)
			FileDelete, %root%\AutoHotKeySC.bin
			FileDelete, %root%\ANSI.bin
			FileDelete, %root%\ahk2exe.exe
			FileDelete, %root%\script.rs
			FileDelete, %root%\prog.exe
			FileDelete, %root%\icon.ico
			FileDelete, %root%\executable.tmp
			return -1
		}
		
		old_wdir := A_WorkingDir
		SetWorkingDir, % root
		console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT23)
		RunWait, %root%\ahk2exe.exe /in "%root%\executable.tmp" /out "%root%\compiled.exe" /icon "%icon_path%" /bin "ANSI.bin", % A_WorkingDir, UseErrorLevel
		if (ErrorLevel) {
			SetWorkingDir, % old_wdir
			console.error(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT24)
			
			console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT11)
			FileDelete, %root%\AutoHotKeySC.bin
			FileDelete, %root%\ANSI.bin
			FileDelete, %root%\ahk2exe.exe
			FileDelete, %root%\script.rs
			FileDelete, %root%\prog.exe
			FileDelete, %root%\icon.ico
			FileDelete, %root%\executable.tmp
			return -1
		}
		
		SetWorkingDir, % old_wdir
		if (trim(save_path) == "") {
			SplitPath, script_path,,,, script_filename
			while (true) {
				SetWorkingDir, % root
				FileSelectFile, save_path, 16, % userdir "\" script_filename ".exe", % RSHELL_COMMAND_INTERNAL_COMPILE_TEXT25, *.exe
				if ((errorlevel) || (trim(save_path) == ""))
					continue
				
				break
			}
		}
		
		SetWorkingDir, % old_wdir
		console.progress(StrReplace(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT26, "%1", save_path))
		FileMove, %root%\compiled.exe, % save_path, 1
		if (ErrorLevel) {
			console.error(StrReplace(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT27, "%1", save_path))
			console.writeln("  " RSHELL_COMMAND_INTERNAL_COMPILE_TEXT28 "`n")
			
			console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT11)
			FileDelete, %root%\AutoHotKeySC.bin
			FileDelete, %root%\ANSI.bin
			FileDelete, %root%\ahk2exe.exe
			FileDelete, %root%\script.rs
			FileDelete, %root%\prog.exe
			FileDelete, %root%\icon.ico
			FileDelete, %root%\executable.tmp
			return -1
		}
		
		console.progress(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT11)
		FileDelete, %root%\AutoHotKeySC.bin
		FileDelete, %root%\ANSI.bin
		FileDelete, %root%\ahk2exe.exe
		FileDelete, %root%\script.rs
		FileDelete, %root%\prog.exe
		FileDelete, %root%\icon.ico
		FileDelete, %root%\executable.tmp
		
		console.writeln("")
		console.info(RSHELL_COMMAND_INTERNAL_COMPILE_TEXT29)
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_ENV_UPDATE) {
		EnvUpdate
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_ENV_SET) {
		SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %sRSHELL_COMMAND_DOCUMENTATION_ENV_SET_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ENV_SET_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		EnvSet, % cmdout1, % cmdout2
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_ENV_GET) {
		SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ENV_GET_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ENV_GET_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		EnvGet, output, % cmdout2
		if ErrorLevel
			return 0
		
		return console.setVar(trim(cmdout1), output, 0)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_SEARCH) {
		SplitCommand(cmd_text, 3, "cmdout")
		
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		array_name := cmdout1
		try {
			Loop, Files, % cmdout2, % StrReplace(StrReplace(StrReplace(cmdout3, RSHELL_COMMAND_INTERNAL_FILE_SEARCH_TEXT1, "D"), RSHELL_COMMAND_INTERNAL_FILE_SEARCH_TEXT2, "F"), RSHELL_COMMAND_INTERNAL_FILE_SEARCH_TEXT3, "R")
			{
				array_index += 1
				console.setVar(array_name "[" array_index "_" RSHELL_COMMAND_INTERNAL_FILE_SEARCH_TEXT7 "]", A_LoopFileName, 0)
				console.setVar(array_name "[" array_index "_" RSHELL_COMMAND_INTERNAL_FILE_SEARCH_TEXT8 "]", A_LoopFileFullPath, 0)
				
				if debug
					console.writeln("[DEBUG] " A_LoopFileFullPath)
			}
			
			console.setVar(array_name "[" RSHELL_ARRAY_TOTALLY_WORD "]", array_index, 0)
		} catch {
			console.error(RSHELL_COMMAND_INTERNAL_FILE_SEARCH_TEXT6)
		}
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_GET) {
		SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_GET_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_GET_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		output := FileGetInfo(cmdout2)
		for key, val in output
			console.setVar(cmdout1 "[" key "]", val, 0)
		
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_HIDED_LOOP) {
		if (trim(string.up(cmd_text)) == RSHELL_COMMAND_NAME_HIDED_LOOP) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_LOOP_SYNTAX%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_LOOP_NOTE%

> %RSHELL_COMMAND_DOCUMENTATION_LOOP_TEXT1%

> %RSHELL_COMMAND_DOCUMENTATION_LOOP_TEXT2%
			)
			return console.writeln(text)
		}
		
		_cmd := "", cmd_text := LTrim(cmd_text)
		loop, parse, cmd_text, % " "
		{
			if (A_Index == 1)
				continue
			
			if (A_Index == 2) {
				if (string.right(A_LoopField, 1) == "`:") {
					kolvo := string.left(A_LoopField, string.len(A_LoopField)-1)
					continue
				} else {
					kolvo := ""
				}
			}
			
			_cmd := _cmd A_LoopField " "
		}
		
		if (trim(kolvo) == "") {
			loop
				processCMD(_cmd)
		} else {
			loop, % kolvo
				processCMD(_cmd)
		}
		
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_HIDED_FORLOOP) {
		if (trim(string.up(cmd_text)) == RSHELL_COMMAND_NAME_HIDED_FORLOOP) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FOR_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FOR_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		output_key := "", output_value := "", output_array := "", do := "", cmd_text := LTrim(cmd_text)
		
		loop, parse, cmd_text, % " "
		{
			if (A_Index == 1)
				continue
			
			if (A_Index == 2) {
				output_key := A_LoopField
				continue
			}
			
			if (A_Index == 3) {
				output_value := A_LoopField
				continue
			}
			
			if (A_Index == 4) {
				if (string.down(A_LoopField) != RSHELL_COMMAND_INTERNAL_FOR_PARSE_WORD) {
					console.error(RSHELL_COMMAND_INTERNAL_FOR_TEXT1)
					return 0
				}
				continue
			}
			
			if (A_Index == 5) {
				output_array := A_LoopField
				continue
			}
			
			if (A_Index == 6) {
				if (string.down(A_LoopField) != RSHELL_COMMAND_INTERNAL_FOR_PARSE_WORD_DO) {
					console.error(RSHELL_COMMAND_INTERNAL_FOR_TEXT1)
					return 0
				}
				continue
			}
			
			do := do A_LoopField " "
		}
		
		if ((string.CheckNorm(output_key) == 0) || (string.CheckNorm(output_value) == 0) || (trim(output_key) == "") || (trim(output_value) == "")) {
			console.error(RSHELL_COMMAND_INTERNAL_FOR_TEXT2)
			return 0
		}
		
		if (output_array == "") {
			console.error(RSHELL_COMMAND_INTERNAL_FOR_TEXT3)
			return 0
		}
		
		if (trim(do) == "") {
			console.error(RSHELL_COMMAND_INTERNAL_FOR_TEXT4)
			return 0
		}
		
		if output_array contains `[,`]
		{
			console.error(RSHELL_COMMAND_INTERNAL_FOR_TEXT5)
			return 0
		}
		
		output_match := string.up(output_array) "[", was := ""
		for k, v in cmd_variables
		{
			k_match := string.left(string.up(k), string.len(output_match)-1) "["
			if (output_match == k_match) {
				RegExMatch(k, "\[(.*)\]$", outk)
				
				loop, parse, was, `|
				{
					if (A_LoopField == outk1) {
						wass := 1
						break
					}
				}
				
				if (wass) {
					wass := 0
					continue
				}
				
				was := was "|" outk1
				
				console.setVar(output_key, outk1)
				console.setVar(output_value, v)
				
				processCMD(do)
				continue
			}
		}
		
		console.setVar(output_key, "")
		console.setVar(output_value, "")
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_PAUSE) {
		loop {
			Input, output, L1 V
			sleep 100

			IfWinActive, ahk_id %mainwid%
				break
		}
		
		ControlSend,, {backspace}, ahk_id %mainwid%
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_CMDLIST) {
		justgen = 1
		executeCMD(RSHELL_COMMAND_NAME_DOCUMENTATION)
		justgen := 0, i := 0, t := "`n"

		for k, v in tvs
		{
			if A_index == 1
				console.writeln("")
			
			if (k == string.up(k)) {
				i++
				console.writeln("#" i "`t" k)
			}
		}
		
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_KEYBOARD_INPUT) {
		SplitCommand(cmd_text, 3, "cmdout")
		if ((splited == -1) || (trim(cmdout1) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		Input, res, % cmdout2, % cmdout3
		return console.setVar(cmdout1, res)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_PROCESS_SEARCH) {
		SplitCommand(cmd_text, 2, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		AccessRights_EnableSeDebug()
		
		OUT_LIST := "", COUNT_NO_PATHS := 0, PROCESSES := 0
		for i, v in WTSEnumerateProcessesEx()
		{
			pn := v.ProcessName
			if pn contains %cmdout2%
			{
				FullEXEPath := GetModuleFileNameEx( v.ProcessID )
				PROCESSES+=1
				
				console.setVar(cmdout1 "[" A_Index RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_ARR_PROCNAME "]", v.ProcessName, 0)
				console.setVar(cmdout1 "[" A_Index RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_ARR_ID "]", v.ProcessID, 0)
				continue
			}
		}
		
		return console.setVar(cmdout1 "[" RSHELL_ARRAY_TOTALLY_WORD "]", PROCESSES, 0)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_WOUTPUT) {
		SplitCommand(cmd_text, 1, "cmdout")
		
		if (trim(cmdout1) != "") {
			if (string.left(cmdout1, 1) == ":") {
				if (console.setVar(cmdout1, "") == 0)
					return 0
			} else {
				FileDelete, % cmdout1
			}
			
			allow_console_writing = 0
			console_output_to := cmdout1
			settimer, checkRSWin, 100
		} else {
			allow_console_writing = 1
			console_output_to := ""
			settimer, checkRSWin, off
		}
		
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_UPDATELIST) {
		justgen = 1
		executeCMD(RSHELL_COMMAND_NAME_DOCUMENTATION)
		justgen := 0, i := 0, prev_ver := RSHELL_TV_UPDATELIST_WORD_VERSION " " version

		for k, v in tvs
		{
			if k contains %prev_ver%
			{
				TV_CLICKED := v
				gosub open_docs
				return 1
			}
		}
		
		return 0
	}

	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_OUTPUT) {
		SplitCommand(cmd_text, 1, "cmdout")
		if (trim(cmdout1) == "") {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_OUTPUT_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_OUTPUT_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		loop, read, % cmdout1
			console.writeln(A_LoopReadLine)
		
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_ENCODING) {
		SplitCommand(cmd_text, 1, "cmdout")
		if (trim(cmdout1) == "") {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_ENCODING_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_ENCODING_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileEncoding, % cmdout1
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_RECYCLE) {
		SplitCommand(cmd_text, 1, "cmdout")
		if (trim(cmdout1) == "") {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_RECYCLE_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_RECYCLE_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		FileRecycle, % cmdout1
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_RECYCLE_EMPTY) {
		SplitCommand(cmd_text, 1, "cmdout")
		if (trim(cmdout1) == "")
			FileRecycleEmpty
		else
			FileRecycleEmpty, % cmdout1
		
		return 1-ErrorLevel
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_READ_RAW) {
		SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_READ_RAW_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_READ_RAW_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		File := FileOpen(cmdout3, "r")
		
		if (!IsObject(File)) {
			return console.error(RSHELL_COMMAND_DOCUMENTATION_FILE_READ_RAW_TEXT1)
		}
		
		File.RawRead(Data, File.Length)
		console.setVar(cmdout1, Data)
		console.setVar(cmdout2, File.Length)
		File.Close()
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_FILE_WRITE_RAW) {
		SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_WRITE_RAW_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_WRITE_RAW_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		File := FileOpen(cmdout3, "w")
		
		if (!IsObject(File)) {
			return console.error(RSHELL_COMMAND_DOCUMENTATION_FILE_WRITE_RAW_TEXT1)
		}
		
		File.RawWrite(console.getVar(cmdout1), cmdout2)
		File.Close()
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_ENC_BASE64) {
		SplitCommand(cmd_text, 3, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ENC_BASE64_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ENC_BASE64_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		Base64enc(result, console.getVar(cmdout2), cmdout3)
		return console.setVar(cmdout1, result)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_DIALOG_INPUTBOX) {
		SplitCommand(cmd_text, 11, "cmdout")
		if ((trim(cmdout1) == "") || (trim(cmdout2) == "") || (trim(cmdout3) == "")) {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INPUTBOX_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INPUTBOX_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		if (cmdout4)
			InputBox, result, % cmdout2, % cmdout3, HIDE, % cmdout5, % cmdout6, % cmdout7, % cmdout8, % cmdout9, % cmdout10, % cmdout11
		else
			InputBox, result, % cmdout2, % cmdout3, 0, % cmdout5, % cmdout6, % cmdout7, % cmdout8, % cmdout9, % cmdout10, % cmdout11
		
		if errorlevel
			return 1-ErrorLevel
		
		return console.setVar(cmdout1, result)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_STEXTON) {
		SplitCommand(cmd_text, 4, "cmdout", 1, 0)
		SplashTextOn, % cmdout1, % cmdout2, % cmdout3, % cmdout4
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_STEXTOFF) {
		SplashTextOff
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_TOOLTIP) {
		SplitCommand(cmd_text, 4, "cmdout", 1, 0)
		ToolTip, % cmdout1, % cmdout2, % cmdout3, % cmdout4
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_DO) {
		SplitCommand(cmd_text, 1, "cmdout")
		if (trim(cmdout1) == "") {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DO_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DO_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		executeCMD(cmdout1)
		return pc_result
	}
	
	cmd_process_first_array := StrSplit(RSHELL_COMMAND_NAME_OUTCON, " || ")
	
	if ((cmd_process_first == cmd_process_first_array[1]) || (cmd_process_first == cmd_process_first_array[2])) {
		if (!allow_console_writing) {
			return console.error(RSHELL_COMMAND_INTERNAL_OUTCON_ERROR)
		}
		
		SplitCommand(cmd_text, 1, "cmdout")
		if (trim(cmdout1) == "") {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_OUTCON_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_OUTCON_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		settimer, checkRSWin, 1
		executeCMD(cmdout1)
		settimer, checkRSWin, off
		return pc_result
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_TUTORIAL) {
		Run, %A_ScriptFullPath% "learn",, UseErrorLevel
		if (ErrorLevel)
			return console.error(RSHELL_COMMAND_INTERNAL_TUTORIAL_ERROR)
		
		return 1
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_ASYNC) {
		SplitCommand(cmd_text, 2, "cmdout")
		if (trim(cmdout1) == "") {
			text =
			(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ASYNC_SYNTAX%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ASYNC_EXAMPLE%
			)
			return console.writeln(text)
		}
		
		toAsync 	:= cmdout1
		toAsyncVar	:= cmdout2
		settimer, executeAsync, 0
		return
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_SVC) {
		svclist =
		(
%RSHELL_COMMAND_INTERNAL_SVC_WORD_NUMBER%`t%RSHELL_COMMAND_INTERNAL_SVC_NAME_OF_SERVICE_TEXT%`t`t%RSHELL_COMMAND_INTERNAL_SVC_WORD_DESCRIPTION%
-----`t----------`t`t--------
№1`t%RSHELL_SERVICE_PERMISSIONS_COMMAND_NAME%`t`t%RSHELL_SERVICE_PERMISSIONS_COMMAND_DESCRIPTION%
№2`t%RSHELL_SERVICE_PARSER_PARAMS_NAME%`t%RSHELL_SERVICE_PARSER_PARAMS_DESCRIPTION%
№3`t%RSHELL_SERVICE_START_COMMAND_NAME%`t`t%RSHELL_SERVICE_START_COMMAND_DESCRIPTION%
№4`t%RSHELL_SERVICE_VKAPI_PROXY_NAME%`t`t%RSHELL_SERVICE_VKAPI_PROXY_DESCRIPTION%
№5`t%RSHELL_SERVICE_LANG_CHANGE_NAME%`t`t%RSHELL_SERVICE_LANG_CHANGE_DESCRIPTION%
		)
		
		console.write("`n" svclist "`n`n> " RSHELL_COMMAND_INTERNAL_SVC_TEXT " ")
		action_service_number := console.read()
		
		if (trim(action_service_number) == "")
			return 0
		
		if (trim(action_service_number) == 1) {
			console.writeln(RSHELL_SERVICE_PERMISSIONS_COMMAND_STARTED_TEXT)
			console.writeln(StrReplace(RSHELL_SERVICE_PERMISSIONS_COMMAND_TEXT1, "%1", (service__PermissionUseCMD_FalseList ? service__PermissionUseCMD_FalseList : "<" RSHELL_SERVICE_PERMISSIONS_COMMAND_TEXT_ALL_COMMANDS_ALLOWED ">")) "`n")
			console.writeln(RSHELL_SERVICE_PERMISSIONS_COMMAND_TEXT2)
			action := console.waitKeys("Y,N,S")
			if (action == "N")
				return 1
			
			if (action == "Y") {
				console.write("`n" RSHELL_SERVICE_PERMISSIONS_COMMAND_TEXT3 "`n> ")
				service__PermissionUseCMD_FalseList := console.read()
			}
			
			if (action == "S")
				service__PermissionUseCMD_FalseList := RSHELL_COMMAND_NAME_CONSOLE " " RSHELL_COMMAND_NAME_SVC
			
			IniWrite, % service__PermissionUseCMD_FalseList, % config, service.PermissionUseCMD, FalseList
			checkConfig()
			return console.writeln(RSHELL_SERVICE_PERMISSIONS_COMMAND_TEXT4_PREFIX " " (service__PermissionUseCMD_FalseList ? RSHELL_SERVICE_PERMISSIONS_COMMAND_TEXT4 " " service__PermissionUseCMD_FalseList : RSHELL_SERVICE_PERMISSIONS_COMMAND_TEXT5) ".")
		}
		
		if (trim(action_service_number) == 2) {
			console.writeln(RSHELL_SERVICE_PARSER_PARAMS_STARTED_TEXT)
			console.writeln(StrReplace(RSHELL_SERVICE_PARSER_PARAMS_TEXT1, "%1", (parserAllowParameterVoid ? RSHELL_SERVICE_PARSER_PARAMS_TEXT2 : RSHELL_SERVICE_PARSER_PARAMS_TEXT3)))
			console.writeln(RSHELL_SERVICE_PARSER_PARAMS_TEXT4_PREFIX " "  variables_explode_symbols ".")
			
			console.writeln("")
			console.writeln(RSHELL_SERVICE_PARSER_PARAMS_TEXT5)
			action := console.waitKeys("Y,N")
			
			if (action == "N")
				return 1
			
			console.writeln("")
			console.writeln(RSHELL_SERVICE_PARSER_PARAMS_TEXT6)
			
			console.write(RSHELL_SERVICE_PARSER_PARAMS_TEXT7 " ")
			action := console.read()
			console.writeln("")
			if (trim(action) == 1) {
				console.writeln(RSHELL_SERVICE_PARSER_PARAMS_TEXT8)
				if (console.waitKeys("Y,N") == "Y")
					IniWrite, 1, % config, parser, allowParameterVoid
				else
					IniWrite, 0, % config, parser, allowParameterVoid
				
				checkConfig()
				return console.writeln(StrReplace(RSHELL_SERVICE_PARSER_PARAMS_TEXT9, "%1", (parserAllowParameterVoid ? RSHELL_SERVICE_PARSER_PARAMS_TEXT2 : RSHELL_SERVICE_PARSER_PARAMS_TEXT3)))
			}
			
			if (trim(action) == 2) {
				console.writeln(RSHELL_SERVICE_PARSER_PARAMS_TEXT10)
				action := console.waitKeys("Y,N,S")
				if (action == "N")
					return 1
				
				if (action == "Y") {
					console.write(RSHELL_SERVICE_PARSER_PARAMS_TEXT11 " ")
					new_symbol := console.read()
					if (trim(new_symbol) == "")
						return console.error(RSHELL_SERVICE_PARSER_PARAMS_TEXT12)
				
					new_symbol := string.left(trim(new_symbol), 1)
				}
				
				if (action == "S")
					new_symbol = `%
				
				IniWrite, % new_symbol, % config, variables, explode_symbols
				checkConfig()
				return console.writeln(RSHELL_SERVICE_PARSER_PARAMS_TEXT13_PREFIX " " variables_explode_symbols ".")
			}
			
			return console.error(RSHELL_SERVICE_PARSER_PARAMS_TEXT14)
		}
		
		if (trim(action_serviace_number) == 3) {
			console.writeln(RSHELL_SERVICE_START_COMMAND_STARTED_TEXT)
			console.writeln(StrReplace(RSHELL_SERVICE_START_COMMAND_TEXT1, "%1", (start_cmd ? start_cmd : RSHELL_SERVICE_START_COMMAND_TEXT2)))
			console.writeln(RSHELL_SERVICE_START_COMMAND_TEXT3)
			action := console.waitKeys("Y,N,S")
			if (action == "N")
				return 1
			
			console.writeln("")
			
			if (action == "Y") {
				console.write(RSHELL_SERVICE_START_COMMAND_TEXT4_PREFIX " ")
				new_start_cmd := console.read()
			}
			
			if (action == "S") {
				temp := StrSplit(RSHELL_COMMAND_NAME_INFO, " || ")
				new_start_cmd = temp[1]
			}
			
			IniWrite, % new_start_cmd, % config, start, cmd
			checkconfig()
			return console.writeln(RSHELL_SERVICE_START_COMMAND_TEXT5_PREFIX " " start_cmd ".")
		}
		
		if (trim(action_service_number) == 4) {
			console.writeln(RSHELL_SERVICE_VKAPI_PROXY_STARTED_TEXT)
			console.writeln(StrReplace(RSHELL_SERVICE_VKAPI_PROXY_TEXT1, "%1", (proxy_vk ? proxy_vk : RSHELL_SERVICE_VKAPI_PROXY_TEXT2)))
			console.writeln(RSHELL_SERVICE_VKAPI_PROXY_TEXT3)
			action := console.waitKeys("Y,N,S")
			if (action == "N")
				return 1
			
			console.writeln("")
			
			if (action == "Y") {
				console.write(RSHELL_SERVICE_VKAPI_PROXY_TEXT4_PREFIX " ")
				new_proxy_vk := console.read()
			}
			
			if (action == "S")
				new_proxy_vk := "ERROR"
			
			if (trim(new_proxy_vk) == "")
				return console.error(RSHELL_SERVICE_VKAPI_PROXY_TEXT5)
			
			IniWrite, % new_proxy_vk, % config, proxy, vk
			checkConfig()
			return console.writeln(RSHELL_SERVICE_VKAPI_PROXY_TEXT6_PREFIX " " proxy_vk ".")
		}
		
		if (trim(action_service_number) == 5) {
			console.writeln(RSHELL_SERVICE_LANG_CHANGE_STARTED_TEXT)
			console.writeln(StrReplace(RSHELL_SERVICE_LANG_CHANGE_TEXT7, "%1", locale))
			console.writeln("`n" RSHELL_SERVICE_LANG_CHANGE_TEXT1)
			
			services := []
			index := 0
			loop, files, %root%\locales\*
			{
				SplitPath, A_LoopFileName,,,, LocaleNameNoExt
				index+=1
				console.writeln("№" index "`t" RSHELL_SERVICE_LANG_CHANGE_TEXT2 " '" LocaleNameNoExt "'.") 
				services[index] := LocaleNameNoExt
			}
			
			console.write("`n" RSHELL_SERVICE_LANG_CHANGE_TEXT3 " ")
			lang := console.read()
			
			if (trim(lang) == "")
				return 0
			
			lang := round(lang)
			
			if ((lang > index) || (lang < 0))
				return console.error("Порядковый номер вышел за границы.")
			
			lang := services[lang]
			
			ifnotexist, %root%\locales\%lang%.locale
				return console.error(RSHELL_SERVICE_LANG_CHANGE_TEXT5)
			
			console.writeln(StrReplace(RSHELL_SERVICE_LANG_CHANGE_TEXT4, "%1", lang))
			initLocale(lang)
			console.writeln(RSHELL_SERVICE_LANG_CHANGE_TEXT6)
			IniWrite, % lang, % config, locale, lang
			locale := lang
			return 1
		}
		
		return console.error(RSHELL_SERVICE_VKAPI_PROXY_TEXT7)
	}
	
	if (cmd_process_first == RSHELL_COMMAND_NAME_VKAPI_RESET) {
		if (trim(vk_token) == "")
			return console.error(RSHELL_COMMAND_INTERNAL_VKAPI_RESET_TEXT1)
		
		vk_token := ""
		IniWrite, % "", % config, vk, token
		console.writeln(RSHELL_COMMAND_INTERNAL_VKAPI_RESET_TEXT2)
		return 1
	}

	; =======================================================
	
	addon_desc := addons[cmd_process_first][1]
	addon_syntax := addons[cmd_process_first][2]
	addon_example := addons[cmd_process_first][3]
	addon_indexp := addons[cmd_process_first][4]
	addon_array_name := addons[cmd_process_first][5]
	addon_script := addons[cmd_process_first][6]
	
	if (addon_indexp > 15) {
		console.error(RSHELL_COMMAND_INTERNAL_ADDON_TEXT7)
		return -1
	}
	
	if (addon_script) {
		splited := SplitCommand(cmd_text, addon_indexp, "cmdout")
		if (splited == -2) {
			text =
			(
%addon_desc%

%RSHELL_FORMAT_COMMAND_DOCUMENTATION_FORMAT_PREFIX% %addon_syntax%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %addon_example%
			)
			return console.writeln(text)
		}
		
		ifnotexist, % root "\" addon_script ".rs"
		{
			console.error(StrReplace(RSHELL_COMMAND_INTERNAL_ADDON_TEXT8, "%1", root "\" addon_script ".rs"))
			return -1
		}
		
		loop, 15
			console.setVar(addon_array_name "[" A_Index "]", "", 0)
		
		console.setVar(addon_array_name "[1]", cmdout1, 0)
		console.setVar(addon_array_name "[2]", cmdout2, 0)
		console.setVar(addon_array_name "[3]", cmdout3, 0)
		console.setVar(addon_array_name "[4]", cmdout4, 0)
		console.setVar(addon_array_name "[5]", cmdout5, 0)
		console.setVar(addon_array_name "[6]", cmdout6, 0)
		console.setVar(addon_array_name "[7]", cmdout7, 0)
		console.setVar(addon_array_name "[8]", cmdout8, 0)
		console.setVar(addon_array_name "[9]", cmdout9, 0)
		console.setVar(addon_array_name "[10]", cmdout10, 0)
		console.setVar(addon_array_name "[11]", cmdout11, 0)
		console.setVar(addon_array_name "[12]", cmdout12, 0)
		console.setVar(addon_array_name "[13]", cmdout13, 0)
		console.setVar(addon_array_name "[14]", cmdout14, 0)
		console.setVar(addon_array_name "[15]", cmdout15, 0)
		
		shell_from := 1
		shell_file := root "\" addon_script ".rs"
		shell_mode := 1
		return 2
	}
	
	ifexist, %A_WorkingDir%\%cmd_text%.rs
	{
		FileRead, t, %A_WorkingDir%\%cmd_text%.rs
		if (trim(t) == "") {
			return 0
		}
		
		shell_from := 1
		shell_mode := 1
		shell_file := A_WorkingDir "\" cmd_text ".rs"
		return 1
	}
	
	ifexist, %root%\%cmd_text%.rs
	{
		FileRead, t, %A_WorkingDir%\%cmd_text%.rs
		if (trim(t) == "") {
			return 0
		}
		
		shell_from := 1
		shell_mode := 1
		shell_file := A_WorkingDir "\" cmd_text ".rs"
		return 1
	}
	
	if (!allow_console_writing)
		return executeCMD(RSHELL_COMMAND_NAME_CMD " " cmd_text)
	
	process_pid =
	try RunWait, %cmd_text%,,, PROCESS_PID
	if (PROCESS_PID) {
		if debug
			console.writeln(StrReplace(RSHELL_EXECUTECMD_START_PROCESS_MSG_TO_DEBUG, "%1", PROCESS_PID))
		
		return 1
	}
	
	if fromTestLocale
		return "NoFromTestLocale"
	
	oldLocale := locale
	old_RSHELL_EXECUTED_OTHER_LANG := RSHELL_EXECUTED_OTHER_LANG
	loop, files, %root%\locales\*
	{
		SplitPath, A_LoopFileName,,,, LocaleNameNoExt
		if (string.up(oldLocale) == string.up(LocaleNameNoExt))
			continue
		
		initLocale(LocaleNameNoExt)
		fromTestLocale := 1
		processCMD(cmd_text)
		if (pc_result == "NoFromTestLocale") {
			continue
		}
		
		console.writeln(old_RSHELL_EXECUTED_OTHER_LANG)
		fromTestLocale = 0
		locale := LocaleNameNoExt
		return pc_result
	}
	
	fromTestLocale = 0

	if (!shell_mode) {
		loop, parse, cmd_text, % " "
		{
			cmd_parsed := A_LoopField
			break
		}
		
		console.error(StrReplace(RSHELL_EXECUTECMD_INVALID_CMD, "%1", cmd_process_first))
	}
	else {
		if (ignore_errors == 0) {
			if (output_mode == "print")
			{
				console.error(StrReplace(RSHELL_EXECUTECMD_INVALID_CMD_SHELL, "%1", cmd_process_first))
			}
			else {
				MsgBox, 16, % title, % StrReplace(StrReplace(RSHELL_EXECUTECMD_INVALID_CMD_SHELL_MSGBOX, "%2", cmd_text), "%1", shell_file)
			}
		}
	}
	
	return -1
}

Base64enc( ByRef OutData, ByRef InData, InDataLen ) {
 DllCall( "Crypt32.dll\CryptBinaryToString" ( A_IsUnicode ? "W" : "A" )
        , UInt,&InData, UInt,InDataLen, UInt,1, UInt,0, UIntP,TChars, "CDECL Int" )
 VarSetCapacity( OutData, Req := TChars * ( A_IsUnicode ? 2 : 1 ) )
 DllCall( "Crypt32.dll\CryptBinaryToString" ( A_IsUnicode ? "W" : "A" )
        , UInt,&InData, UInt,InDataLen, UInt,1, Str,OutData, UIntP,Req, "CDECL Int" )
Return TChars
}

putArr(text) {
	return text
}

class string {
	getLine(text, line) {
		loop, parse, % text, `r`n
		{
			if (A_Index == Line) {
				return A_LoopField
			}
		}
	}
	
	checkCyrillic(text) {
		rus = 0
		characters = а,б,в,г,д,е,ё,ж,з,и,й,к,л,м,н,о,п,р,с,т,у,ф,х,ц,ч,ш,щ,ъ,ы,ь,э,ю,я,А,Б,В,Г,Д,Е,Ё,Ж,З,И,Й,К,Л,М,Н,О,П,Р,С,Т,У,Ф,Х,Ц,Ч,Ш,Щ,Ъ,Ы,Ь,Э,Ю,Я
		loop, parse, characters, `,
		{
			if text contains %A_LoopField%
			{
				rus = 1
				break
			}
		}
		return rus
	}

	checkLatin(text) {
		eng = 0
		characters = a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z
		loop, parse, characters, `,
		{
			if text contains %A_LoopField%
			{
				eng = 1
				break
			}
		}
		return eng
	}
	
	checkInteger(text) {
		int = 0
		characters = 1,2,3,4,5,6,7,8,9,0
		loop, parse, characters, `,
		{
			if text contains %A_LoopField%
			{
				int = 1
				break
			}
		}
		return int
	}
	
	checkSymbol(text) {
		symbol = 0
		characters = _
		loop, parse, characters, `,
		{
			if text contains %A_LoopField%
			{
				symbol = 1
				break
			}
		}
		return symbol
	}
	
	checkNorm(text) {
		if (RegExMatch(text, "i)[ `n-\.%,(\\\/=&^\?]")) ; Check if it is a valid variable name
			return 0
		
		return 1
	}
	
	up(text) {
		StringUpper, rtn, text
		return rtn
	}
	
	down(text) {
		StringLower, rtn, text
		return rtn
	}
	
	upT(text) {
		StringUpper, rtn, text, T
		return rtn
	}
	
	downT(text) {
		StringLower, rtn, text, T
		return rtn
	}
	
	left(text, number) {
		StringLeft, rtn, text, % number
		return rtn
	}
	
	right(text, number) {
		StringRight, rtn, text, % number
		return rtn
	}
	
	len(text) {
		StringLen, rtn, text
		return rtn
	}
}

unpackRSAC(text) {
	loop {
		random, rand, 1000000, 9999999
		ifexist, %root%\%rand%.rsa
			continue
		
		file_name := rand
		break
	}
	
	FileDelete, %root%\%file_name%.rsa
	
	write_file := 0
	loop, parse, text, `r`n
	{
		if (trim(A_LoopField) == "")
			continue
		
		if ((write_file == 0) && (A_LoopField != "<< СКРИПТ >>")) { ; запись .rsa
			fileappend, % A_LoopField "`n", % root "\" file_name ".rsa"
			if errorlevel
			{
				console.error(StrReplace(StrReplace(RSHELL_RSAC_ERROR_WRITE_FILE_RSA, "%2", file_name), "%1", root))
				console.writeln(RSHELL_RSAC_ERROR_WRITE_FILE_TIP)
				return 0
			}
			continue
		}
		
		if ((A_LoopField == "<< СКРИПТ >>") && (write_file == 0)) {
			IniRead, имя_пакета, %root%\%file_name%.rsa, addon, имя_пакета, % file_name
			FileDelete, %root%\%имя_пакета%.rs
			write_file := 1
			continue
		}
		
		if (write_file == 1) {
			fileappend, % A_LoopField "`n", %root%\%имя_пакета%.rs
			if errorlevel
			{
				console.error(StrReplace(StrReplace(RSHELL_RSAC_ERROR_WRITE_FILE_RS, "%2", file_name), "%1", root))
				console.writeln(RSHELL_RSAC_ERROR_WRITE_FILE_TIP)
				return 0
			}
		}
	}
	
	console.writeln(StrReplace(RSHELL_RSAC_SUCCESSFULL_INSATALLED, "%1", file_name))
	sleep 4000
	processCMD(RSHELL_COMMAND_NAME_RESTART)
	return 1
}

MoveBrightness(i, l=0) {
	if (l == 0) {
		i := (trim(i)), it := string.left(i, 1)
		
		if ((it != "-") && (it != "+")) {
			MoveBrightness(-100, 1)
		}
	}
	
	IndexMove := i
	VarSetCapacity(SupportedBrightness, 256, 0)
	VarSetCapacity(SupportedBrightnessSize, 4, 0)
	VarSetCapacity(BrightnessSize, 4, 0)
	VarSetCapacity(Brightness, 3, 0)
	
	hLCD := DllCall("CreateFile"
	, Str, "\\.\LCD"
	, UInt, 0x80000000 | 0x40000000 ;Read | Write
	, UInt, 0x1 | 0x2  ; File Read | File Write
	, UInt, 0
	, UInt, 0x3  ; open any existing file
	, UInt, 0
	  , UInt, 0)
	
	if hLCD != -1
	{
		
		DevVideo := 0x00000023, BuffMethod := 0, Fileacces := 0
		  NumPut(0x03, Brightness, 0, "UChar")   ; 0x01 = Set AC, 0x02 = Set DC, 0x03 = Set both
		  NumPut(0x00, Brightness, 1, "UChar")      ; The AC brightness level
		  NumPut(0x00, Brightness, 2, "UChar")      ; The DC brightness level
		DllCall("DeviceIoControl"
		  , UInt, hLCD
		  , UInt, (DevVideo<<16 | 0x126<<2 | BuffMethod<<14 | Fileacces) ; IOCTL_VIDEO_QUERY_DISPLAY_BRIGHTNESS
		  , UInt, 0
		  , UInt, 0
		  , UInt, &Brightness
		  , UInt, 3
		  , UInt, &BrightnessSize
		  , UInt, 0)
		
		DllCall("DeviceIoControl"
		  , UInt, hLCD
		  , UInt, (DevVideo<<16 | 0x125<<2 | BuffMethod<<14 | Fileacces) ; IOCTL_VIDEO_QUERY_SUPPORTED_BRIGHTNESS
		  , UInt, 0
		  , UInt, 0
		  , UInt, &SupportedBrightness
		  , UInt, 256
		  , UInt, &SupportedBrightnessSize
		  , UInt, 0)
		
		ACBrightness := NumGet(Brightness, 1, "UChar")
		ACIndex := 0
		DCBrightness := NumGet(Brightness, 2, "UChar")
		DCIndex := 0
		BufferSize := NumGet(SupportedBrightnessSize, 0, "UInt")
		MaxIndex := BufferSize-1

		Loop, %BufferSize%
		{
		ThisIndex := A_Index-1
		ThisBrightness := NumGet(SupportedBrightness, ThisIndex, "UChar")
		if ACBrightness = %ThisBrightness%
			ACIndex := ThisIndex
		if DCBrightness = %ThisBrightness%
			DCIndex := ThisIndex
		}
		
		if DCIndex >= %ACIndex%
		  BrightnessIndex := DCIndex
		else
		  BrightnessIndex := ACIndex

		BrightnessIndex += IndexMove
		
		if BrightnessIndex > %MaxIndex%
		   BrightnessIndex := MaxIndex
		   
		if BrightnessIndex < 0
		   BrightnessIndex := 0

		NewBrightness := NumGet(SupportedBrightness, BrightnessIndex, "UChar")
		
		NumPut(0x03, Brightness, 0, "UChar")   ; 0x01 = Set AC, 0x02 = Set DC, 0x03 = Set both
        NumPut(NewBrightness, Brightness, 1, "UChar")      ; The AC brightness level
        NumPut(NewBrightness, Brightness, 2, "UChar")      ; The DC brightness level
		
		DllCall("DeviceIoControl"
			, UInt, hLCD
			, UInt, (DevVideo<<16 | 0x127<<2 | BuffMethod<<14 | Fileacces) ; IOCTL_VIDEO_SET_DISPLAY_BRIGHTNESS
			, UInt, &Brightness
			, UInt, 3
			, UInt, 0
			, UInt, 0
			, UInt, 0
			, Uint, 0)
		
		DllCall("CloseHandle", UInt, hLCD)
		sleep 100
	}

}

class console {
	setVar(variable, value, limit=1) {
		global
		variable := trim(variable)
		
		if (string.down(variable) == RSHELL_VARNAME_SYSTEM_CLIPBOARD)
			limit = 0
		
		if (limit) {
			if (string.checkNorm(variable) == 0) {
				console.warning(RSHELL_VARIABLE_NAME_CONTAINS_INVALID_CHARACTERS)
				return 0
			}
		}
		
		a := 0
		loop, parse, variable
		{
			if ((A_LoopField == "[") || (A_LoopField == "]")) {
				a+=1
			}
		}

		if variable contains `[
		{
			if (a > 2) {
				console.error(RSHELL_ARRAY_CANT_BE_MULTIDIMENSIONAL)
				return 0
			}
		
			loop, parse, variable, `[
			{
				if (A_Index == 1) {
					if (string.checkNorm(A_LoopField) == 0) {
						console.error(RSHELL_ARRAY_NAME_CONTAINS_INVALID_CHARACTERS)
						return
					}
					
					break
				}
			}
		}
		
		if (string.down(variable) == RSHELL_VARNAME_SYSTEM_CLIPBOARD)
			Clipboard := value
		
		try cmd_variables[variable] := value
		catch e {
			
			console.warning(StrReplace(RSHELL_CATCH_SET_VARIABLE_WARNING, "%1", variable))
			return 0
		}
		
		;if (string.left(variable, 1) != ".")
		;	MsgBox,, % "OK!", %variable%=%value%
		
		return 1
	}
	
	math(value) {
		RunWait, cmd.exe /c set /a "%value%" > math.tmp,, UseErrorLevel
		FileRead, result, math.tmp
		FileDelete, math.tmp
		return result
	}
	
	getVar(variable) {
		global
		return cmd_variables[variable]
	}

	processVars(text) {
		global
		
		if text contains %variables_explode_symbols%
		{
			; Встроенные переменные
			console.setVar(RSHELL_VARNAME_TIME_DAY, A_DD, 0)
			console.setVar(RSHELL_VARNAME_TIME_MONTH, A_MM, 0, 0)
			console.setVar(RSHELL_VARNAME_TIME_YEAR, A_YYYY, 0)
			console.setVar(RSHELL_VARNAME_TIME_HOUR, A_Hour, 0)
			console.setVar(RSHELL_VARNAME_TIME_MIN, A_Min, 0)
			console.setVar(RSHELL_VARNAME_TIME_SEC, A_Sec, 0)
			console.setVar(RSHELL_VARNAME_TIME_TICKCOUNT, A_TickCount, 0)
			console.setVar(RSHELL_VARNAME_TIME_MMM, A_MMM, 0)
			console.setVar(RSHELL_VARNAME_TIME_MMMM, A_MMMM, 0)
			console.setVar(RSHELL_VARNAME_TIME_DDD, A_DDD, 0)
			console.setVar(RSHELL_VARNAME_TIME_DDDD, A_DDDD, 0)
			console.setVar(RSHELL_VARNAME_CONSOLE_RESULT, pc_result, 0)
			console.setVar(RSHELL_VARNAME_CONSOLE_WORKINGDIR, A_WorkingDir, 0)
			console.setVar(RSHELL_VARNAME_CONSOLE_SCRIPT, shell_file, 0)
			console.setVar(RSHELL_VARNAME_CONSOLE_SPACE, A_Space, 0)
			console.setVar(RSHELL_VARNAME_SYSTEM_CLIPBOARD, Clipboard, 0)
		}
		
		for key, value in cmd_variables
			StringReplace, text, text, %variables_explode_symbols%%key%%variables_explode_symbols%, % value, All
		
		return text
	}

	init() {
		global mainwid
		
		console.create()
		
		if (!attached) {
			process, exist
			WinGet, mainwid, ID, ahk_pid %ErrorLevel%
		} else {
			WinGet, mainwid, ID, % "ahk_pid " Process_GetCurrentParentProcessID()
		}
		
		if (adaptate_ide) {
			WinSet, Transparent, 0, ahk_id %mainwid%
			WinSet, Style, +0x8000000, ahk_id %mainwid%
			WinSet, Style, -0xC00000, ahk_id %mainwid%
			WinMove, ahk_id %mainwid%,, -1000, -1000, 1, 1
		}
		
		WinGetTitle, titlee, ahk_id %mainwid%
		
		if (trim(titlee) == "") {
			process, exist
			WinGet, mainwid, ID, ahk_pid %ErrorLevel%
		}
		
		if (!attached)
			WinSet, Transparent, % start_transparent, ahk_id %mainwid%
		
		DllCall("SetConsoleOutputCP", "int", 1251)
		DllCall("SetConsoleCP", "int", 1251)
	}
	
	flushBuffer() {
		hStdout.Read(0)
	}
	
	create() {
		global
		attached = 1
		
		if (no_attach) {
			DllCall("AllocConsole")
			attached = 0
		} else {
			if (DllCall("AttachConsole", "uInt", (attach_pid_console ? attach_pid_console : Process_GetCurrentParentProcessID()), "Cdecl int") != 1) {
				DllCall("AllocConsole")
				attached = 0
			}
		}
		
		hStdIn := FileOpen(DllCall("GetStdHandle", "int", -10, "ptr"), "h `n")
		hStdOut := FileOpen(DllCall("GetStdHandle", "int", -11, "ptr"), "h `n")
		
		if (attached) {
			parentProcessPath := GetModuleFileNameEx(Process_GetCurrentParentProcessID())
			
			if (string.up(string.right(parentProcessPath, 7)) != "CMD.EXE") {
				if parentProcessPath not contains %A_WinDir%
				{
					if (parentProcessPath != A_ScriptFullPath) {
						an := FileGetInfo(parentProcessPath).FileDescription
						SplitPath, parentprocesspath, an_name
						
						if (!attach_pid_console) {
							MsgBox, 49, % title RSHELL_ATTACH_WARNING_TITLE, % StrReplace(StrReplace(RSHELL_ATTACH_WARNING_TEXT, "%2", parentProcessPath), "%1", (an ? an : an_name))
							IfMsgBox, Cancel
								exitapp
						}
					}
				}
			}
			
			console.writeln("")
			
			if (!no_suspend)
				Process_Suspend(attach_pid_console ? attach_pid_console : Process_GetCurrentParentProcessID())
			
			ControlSend,, {enter}, % "ahk_pid " (attach_pid_console ? attach_pid_console : Process_GetCurrentParentProcessID())
		}
		
		if (!attached)
			DllCall("SetConsoleTitle", "str", (A_IsAdmin ? RSHELL_ADMINISTRATOR_WORD : A_UserName) ": " title)
	}
	
	cmd(cmd) {
		if (allow_console_writing)
			RunWait, cmd.exe /c %cmd%,, UseErrorLevel
		else {
			RunCon(ComSpec, "echo off & " cmd, output)
			
			toOut := ""
			loop, parse, output, `n
			{
				if (A_Index < 5)
					continue
				
				toOutput := toOutput A_LoopField "`n"
			}
			
			console.writeln(RTrim(toOutput, "`n"))
		}
	}
	
	read() {
		global
		if (allow_console_writing) {
			result := RTrim(hStdIn.ReadLine(), "`n")
			console.flushBuffer()
		} else {
			console.writeln("[DEBUG] " RSHELL_WOUTPUT_TEXT_TO_DEBUG)
			result := 0
		}
	
		if log
			fileappend, % hStdIn.ReadLine() "`n", %root%\log.txt
		
		return result
	}
	
	write(text) {
		global
		if (string.left(text, 7) == "[DEBUG]") {
			StringReplace, text, text, % "[DEBUG]",,			
			LV_Add("", shell_mline, cmd_source[shell_mline], text)
			LV_ModifyCol()
			LV_Modify(LV_GetCount(), "Vis")
			sleep 1
			
			if debug_pause_menu
				console.cmd("pause")
			
			return 1
		}
		
		if (!allow_console_writing) {
			text := StrReplace(text, "`t", " ")
			if (string.left(console_output_to, 1) == ":") {
				varname := string.right(console_output_to, string.len(console_output_to)-1)
				console.setVar(varname, console.getVar(varname) . text)
			} else {
				fileappend, % text, % console_output_to
			}
			return
		}
		
		result := hStdOut.write(text)
		console.flushBuffer()
		
		if log
			fileappend, % text, %root%\log.txt
		
		return result
	}
	
	writeln(text) {
		global
		if (string.left(text, 7) == "[DEBUG]") {
			StringReplace, text, text, % "[DEBUG]",,			
			LV_Add("", shell_mline, cmd_source[shell_mline], text)
			LV_ModifyCol()
			LV_Modify(LV_GetCount(), "Vis")
			sleep 1
			
			if debug_pause_menu
				console.cmd("pause")
			
			return 1
		}
		
		if (!allow_console_writing) {
			text := StrReplace(text, "`t", " ")
			
			if (trim(text) == "")
				return
			
			if (string.left(console_output_to, 1) == ":") {
				varname := string.right(console_output_to, string.len(console_output_to)-1)
				console.setVar(varname, console.getVar(varname) text . "`n")
			} else {
				fileappend, % text "`n", % console_output_to
			}
			return
		}
		
		result := hStdOut.WriteLine(text)
		console.flushBuffer()
		
		if log
			fileappend, % text "`n", %root%\log.txt 
		
		return result
	}
	
	warning(text) {
		global
		if ignore_warnings
			return -1
		
		if (output_mode == "msg")
			MsgBox, 0, % title, % StrReplace(RSHELL_WARNING_MSGBOX_FORMAT, "%1", text), 5
		else	
			return console.writeln(StrReplace(RSHELL_WARNING_CONSOLE_FORMAT, "%1", text))
	}
	
	info(text) {
		global
		if ignore_info
			return -1
		
		if (output_mode == "msg")
			MsgBox, 0, % title, % StrReplace(RSHELL_INFORMATION_MSGBOX_FORMAT, "%1", text), 5
		else	
			return console.writeln(StrReplace(RSHELL_INFORMATION_CONSOLE_FORMAT, "%1", text))
	}
	
	error(text) {
		global
		if ignore_errors
			return -1
		
		if (output_mode == "msg") {
			MsgBox, 4, % title, % StrReplace(RSHELL_ERROR_MSGBOX_FORMAT, "%1", text)
			IfMsgBox, yes
				return -1
			
			IfMsgBox, no
				exitapp
		}
		
		return console.writeln(StrReplace(RSHELL_ERROR_CONSOLE_FORMAT, "%1", text))
	}
	
	question(text) {
		global
		return console.writeln(StrReplace(RSHELL_QUESTION_CONSOLE_FORMAT, "%1", text))?
	}
	
	progress(text) {
		global
		return console.writeln(StrReplace(RSHELL_PROGRESS_CONSOLE_FORMAT, "%1", text))?
	}
	
	waitKeys(keys) { ; в параметр keys указываются клавиши, нажатие которых нужно ожидать. Разделяется символом ",".
		global
		if (!allow_console_writing) {
			console.writeln("[DEBUG] " RSHELL_WOUTPUT_TEXT_TO_DEBUG)
			return
		}
		
		wid := mainwid
		
		loop {
			loop, parse, keys, `,
			{
				if (GetKeyState(trim(A_LoopField), "P")) {
					KeyWait, % A_LoopField, U
					IfWinNotActive, ahk_id %wid%
						continue
					
					ControlSend,, {Backspace}, ahk_id %wid%
					return trim(A_LoopField)
				}
			}
			
			sleep 1
		}
	}
	
	download(url, to) { ; to - путь, куда сохранится файл.
		global
		
		ifexist, % to
		{
			console.warning(RSHELL_DOWNLOADER_FILE_EXIST)
			return -1
		}
		
		SplitPath, to, filename_prev
		ToolTip, % RSHELL_DOWNLOADER_GETTING_INFO
		netsize := GetFileSizeFromInternet(url), filename_prev := trim(filename_prev)
		ToolTip
		if netsize not contains `<
		{
			_netsize := netsize, netsize := netsize " " RSHELL_DOWNLOADER_BYTE_WORD
		}
		else {
			netsize := RSHELL_DOWNLOADER_INFO_GET_ERR
		}
		
		console.question(StrReplace(StrReplace(RSHELL_DOWNLOADER_QUESTION_DOWNLOAD, "%2", netsize), "%1", filename_prev))
		pressed := console.waitKeys("Y,N")
		if (pressed == "Y") {
			loop {
				console.progress(StrReplace(RSHELL_DOWNLOADER_ATTEMPT, "%1", url))
				moment_time := A_TickCount
				URLDownloadToFile, % url, % to
				dl_time := FormatTime(A_TickCount - moment_time)
				FileGetSize, filesize, % to
				
				ifnotexist, % to
				{
					console.warning(StrReplace(RSHELL_DOWNLOADER_ATTEMPT_UNSUCCESSFUL, "%1", filename_prev))
					return 0
				}
				
				if netsize not contains `<
				{
					if netsize not contains `> ; переделывалось
					{
						console.info(StrReplace(StrReplace(StrReplace(RSHELL_DOWNLOADER_DOWNLOADED_INFO, "%3", dl_time), "%2", netsize), "%1", filesize))
						
						if (filesize != _netsize) {
							console.warning(RSHELL_DOWNLOADER_FILE_CORRUPTED)
							console.question(RSHELL_DOWNLOADER_FILE_TRYAGAIN)
							verdict := console.waitKeys("Y,N")
							if (verdict == "Y") {
								continue
							}
							else {
								return 0
							}
						}
					}
				} else {
					console.info(StrReplace(StrReplace(RSHELL_DOWNLOADER_DOWNLOADED_INFO_WITHOUT, "%2", dl_time), "%1", _filesize))
				}
				
				break
			}
			
			return 1
		}
		else {
			return 0
		}
	}
}

Process_GetCurrentProcessID(){
  Return DllCall("GetCurrentProcessId")  ; http://msdn2.microsoft.com/ms683180.aspx
}

Process_GetCurrentParentProcessID(){
  Return Process_GetParentProcessID(Process_GetCurrentProcessID())
}

Process_GetProcessName(ProcessID){
  Return Process_GetProcessInformation(ProcessID, "Str", 260, 36)  ; TCHAR szExeFile[MAX_PATH]
}

Process_GetParentProcessID(ProcessID){
  Return Process_GetProcessInformation(ProcessID, "UInt *", 4, 24)  ; DWORD th32ParentProcessID
}

Process_GetProcessThreadCount(ProcessID){
  Return Process_GetProcessInformation(ProcessID, "UInt *", 4, 20)  ; DWORD cntThreads
}

Process_GetProcessInformation(ProcessID, CallVariableType, VariableCapacity, DataOffset){
  hSnapshot := DLLCall("CreateToolhelp32Snapshot", "UInt", 2, "UInt", 0)  ; TH32CS_SNAPPROCESS = 2
  if (hSnapshot >= 0)
  {
    VarSetCapacity(PE32, 304, 0)  ; PROCESSENTRY32 structure -> http://msdn2.microsoft.com/ms684839.aspx
    DllCall("ntdll.dll\RtlFillMemoryUlong", "UInt", &PE32, "UInt", 4, "UInt", 304)  ; Set dwSize
    VarSetCapacity(th32ProcessID, 4, 0)
    if (DllCall("Process32First", "UInt", hSnapshot, "UInt", &PE32))  ; http://msdn2.microsoft.com/ms684834.aspx
      Loop
      {
        DllCall("RtlMoveMemory", "UInt *", th32ProcessID, "UInt", &PE32 + 8, "UInt", 4)  ; http://msdn2.microsoft.com/ms803004.aspx
        if (ProcessID = th32ProcessID)
        {
          VarSetCapacity(th32DataEntry, VariableCapacity, 0)
          DllCall("RtlMoveMemory", CallVariableType, th32DataEntry, "UInt", &PE32 + DataOffset, "UInt", VariableCapacity)
          DllCall("CloseHandle", "UInt", hSnapshot)  ; http://msdn2.microsoft.com/ms724211.aspx
          Return th32DataEntry  ; Process data found
        }
        if not DllCall("Process32Next", "UInt", hSnapshot, "UInt", &PE32)  ; http://msdn2.microsoft.com/ms684836.aspx
          Break
      }
    DllCall("CloseHandle", "UInt", hSnapshot)
  }
  Return  ; Cannot find process
}

Process_GetModuleFileNameEx(ProcessID)  ; modified version of shimanov's function
{
  if A_OSVersion in WIN_95, WIN_98, WIN_ME
    Return Process_GetProcessName(ProcessID)
  
  ; #define PROCESS_VM_READ           (0x0010)
  ; #define PROCESS_QUERY_INFORMATION (0x0400)
  hProcess := DllCall( "OpenProcess", "UInt", 0x10|0x400, "Int", False, "UInt", ProcessID)
  if (ErrorLevel or hProcess = 0)
    Return
  FileNameSize := 260
  VarSetCapacity(ModuleFileName, FileNameSize, 0)
  CallResult := DllCall("Psapi.dll\GetModuleFileNameExA", "UInt", hProcess, "UInt", 0, "Str", ModuleFileName, "UInt", FileNameSize)
  DllCall("CloseHandle", hProcess)
  Return ModuleFileName
}

SaveScreenshotToFile(x, y, w, h, filePath)  {
   hBitmap := GetHBitmapFromScreen(x, y, w, h)
   gdip := new GDIplus
   pBitmap := gdip.BitmapFromHBitmap(hBitmap)
   DllCall("DeleteObject", Ptr, hBitmap)
   gdip.SaveBitmapToFile(pBitmap, filePath)
   gdip.DisposeImage(pBitmap)
}

GetHBitmapFromScreen(x, y, w, h)  {
   hDC := DllCall("GetDC", Ptr, 0, Ptr)
   hBM := DllCall("CreateCompatibleBitmap", Ptr, hDC, Int, w, Int, h, Ptr)
   pDC := DllCall("CreateCompatibleDC", Ptr, hDC, Ptr)
   oBM := DllCall("SelectObject", Ptr, pDC, Ptr, hBM, Ptr)
   DllCall("BitBlt", Ptr, pDC, Int, 0, Int, 0, Int, w, Int, h, Ptr, hDC, Int, x, Int, y, UInt, 0x00CC0020)
   DllCall("SelectObject", Ptr, pDC, Ptr, oBM)
   DllCall("DeleteDC", Ptr, pDC)
   DllCall("ReleaseDC", Ptr, 0, Ptr, hDC)
   Return hBM  ; should be deleted with DllCall("DeleteObject", Ptr, hBM)
}

class GDIplus   {
   __New()  {
      if !DllCall("GetModuleHandle", Str, "gdiplus", Ptr)
         DllCall("LoadLibrary", Str, "gdiplus")
      VarSetCapacity(si, A_PtrSize = 8 ? 24 : 16, 0), si := Chr(1)
      DllCall("gdiplus\GdiplusStartup", PtrP, pToken, Ptr, &si, Ptr, 0)
      this.token := pToken
   }
   
   __Delete()  {
      DllCall("gdiplus\GdiplusShutdown", Ptr, this.token)
      if hModule := DllCall("GetModuleHandle", Str, "gdiplus", Ptr)
         DllCall("FreeLibrary", Ptr, hModule)
   }
   
   BitmapFromHBitmap(hBitmap, Palette := 0)  {
      DllCall("gdiplus\GdipCreateBitmapFromHBITMAP", Ptr, hBitmap, Ptr, Palette, PtrP, pBitmap)
      return pBitmap  ; should be deleted with this.DisposeImage(pBitmap)
   }
   
   SaveBitmapToFile(pBitmap, sOutput, Quality=75)  {
      SplitPath, sOutput,,, Extension
      if Extension not in BMP,DIB,RLE,JPG,JPEG,JPE,JFIF,GIF,TIF,TIFF,PNG
         return -1

      DllCall("gdiplus\GdipGetImageEncodersSize", UIntP, nCount, UIntP, nSize)
      VarSetCapacity(ci, nSize)
      DllCall("gdiplus\GdipGetImageEncoders", UInt, nCount, UInt, nSize, Ptr, &ci)
      if !(nCount && nSize)
         return -2
      
      Loop, % nCount  {
         sString := StrGet(NumGet(ci, (idx := (48+7*A_PtrSize)*(A_Index-1))+32+3*A_PtrSize), "UTF-16")
         if !InStr(sString, "*." Extension)
            continue
         
         pCodec := &ci+idx
         break
      }
      
      if !pCodec
         return -3

      if RegExMatch(Extension, "i)^J(PG|PEG|PE|FIF)$") && Quality != 75  {
         DllCall("gdiplus\GdipGetEncoderParameterListSize", Ptr, pBitmap, Ptr, pCodec, UintP, nSize)
         VarSetCapacity(EncoderParameters, nSize, 0)
         DllCall("gdiplus\GdipGetEncoderParameterList", Ptr, pBitmap, Ptr, pCodec, UInt, nSize, Ptr, &EncoderParameters)
         Loop, % NumGet(EncoderParameters, "UInt")  {
            elem := (24+A_PtrSize)*(A_Index-1) + 4 + (pad := A_PtrSize = 8 ? 4 : 0)
            if (NumGet(EncoderParameters, elem+16, "UInt") = 1) && (NumGet(EncoderParameters, elem+20, "UInt") = 6)  {
               p := elem+&EncoderParameters-pad-4
               NumPut(Quality, NumGet(NumPut(4, NumPut(1, p+0)+20, "UInt")), "UInt")
               break
            }
         }      
      }
      
      if A_IsUnicode
         pOutput := &sOutput
      else  {
         VarSetCapacity(wOutput, StrPut(sOutput, "UTF-16")*2, 0)
         StrPut(sOutput, &wOutput, "UTF-16")
         pOutput := &wOutput
      }
      E := DllCall("gdiplus\GdipSaveImageToFile", Ptr, pBitmap, Ptr, pOutput, Ptr, pCodec, UInt, p ? p : 0)
      return E ? -5 : 0
   }
   
   DisposeImage(pBitmap)  {
      return DllCall("gdiplus\GdipDisposeImage", Ptr, pBitmap)
   }
}

CreateFormData(ByRef retData, ByRef retHeader, objParam) {
	New CreateFormData(retData, retHeader, objParam)
}

Class CreateFormData {

	__New(ByRef retData, ByRef retHeader, objParam) {

		Local CRLF := "`r`n", i, k, v, str, pvData
		; Create a random Boundary
		Local Boundary := this.RandomBoundary()
		Local BoundaryLine := "------------------------------" . Boundary

    this.Len := 0 ; GMEM_ZEROINIT|GMEM_FIXED = 0x40
    this.Ptr := DllCall( "GlobalAlloc", "UInt",0x40, "UInt",1, "Ptr"  )          ; allocate global memory

		; Loop input paramters
		For k, v in objParam
		{
			If IsObject(v) {
				For i, FileName in v
				{
					str := BoundaryLine . CRLF
					     . "Content-Disposition: form-data; name=""" . k . """; filename=""" . FileName . """" . CRLF
					     . "Content-Type: " . this.MimeType(FileName) . CRLF . CRLF
          this.StrPutUTF8( str )
          this.LoadFromFile( Filename )
          this.StrPutUTF8( CRLF )
				}
			} Else {
				str := BoundaryLine . CRLF
				     . "Content-Disposition: form-data; name=""" . k """" . CRLF . CRLF
				     . v . CRLF
        this.StrPutUTF8( str )
			}
		}

		this.StrPutUTF8( BoundaryLine . "--" . CRLF )

    ; Create a bytearray and copy data in to it.
    retData := ComObjArray( 0x11, this.Len ) ; Create SAFEARRAY = VT_ARRAY|VT_UI1
    pvData  := NumGet( ComObjValue( retData ) + 8 + A_PtrSize )
    DllCall( "RtlMoveMemory", "Ptr",pvData, "Ptr",this.Ptr, "Ptr",this.Len )

    this.Ptr := DllCall( "GlobalFree", "Ptr",this.Ptr, "Ptr" )                   ; free global memory 

    retHeader := "multipart/form-data; boundary=----------------------------" . Boundary
	}

  StrPutUTF8( str ) {
    Local ReqSz := StrPut( str, "utf-8" ) - 1
    this.Len += ReqSz                                  ; GMEM_ZEROINIT|GMEM_MOVEABLE = 0x42
    this.Ptr := DllCall( "GlobalReAlloc", "Ptr",this.Ptr, "UInt",this.len + 1, "UInt", 0x42 )   
    StrPut( str, this.Ptr + this.len - ReqSz, ReqSz, "utf-8" )
  }
  
  LoadFromFile( Filename ) {
    Local objFile := FileOpen( FileName, "r" )
    this.Len += objFile.Length                     ; GMEM_ZEROINIT|GMEM_MOVEABLE = 0x42 
    this.Ptr := DllCall( "GlobalReAlloc", "Ptr",this.Ptr, "UInt",this.len, "UInt", 0x42 )
    objFile.RawRead( this.Ptr + this.Len - objFile.length, objFile.length )
    objFile.Close()       
  }

	RandomBoundary() {
		str := "0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z"
		Sort, str, D| Random
		str := StrReplace(str, "|")
		Return SubStr(str, 1, 12)
	}

	MimeType(FileName) {
		n := FileOpen(FileName, "r").ReadUInt()
		Return (n        = 0x474E5089) ? "image/png"
		     : (n        = 0x38464947) ? "image/gif"
		     : (n&0xFFFF = 0x4D42    ) ? "image/bmp"
		     : (n&0xFFFF = 0xD8FF    ) ? "image/jpeg"
		     : (n&0xFFFF = 0x4949    ) ? "image/tiff"
		     : (n&0xFFFF = 0x4D4D    ) ? "image/tiff"
		     : "application/octet-stream"
	}

}

GetFileSizeFromInternet(url, ProxyName = "", ProxyBypass = "")
{
   INTERNET_OPEN_TYPE_DIRECT = 1
   INTERNET_OPEN_TYPE_PROXY = 3
   AccessType := ProxyName ? INTERNET_OPEN_TYPE_DIRECT : INTERNET_OPEN_TYPE_PROXY
   INTERNET_FLAG_RELOAD = 0x80000000
   HTTP_QUERY_CONTENT_LENGTH = 5
   coding := A_IsUnicode ? "W" : "A"
 
   hModule := DllCall("LoadLibrary", Str, "wininet.dll")
   hInternet := DllCall("wininet\InternetOpen" . coding
                  , Str, ""   
                  , UInt, INTERNET_OPEN_TYPE_DIRECT
                  , Str, ""
                  , Str, ""
                  , UInt, 0)
   if !hInternet
   {
      Error := A_LastError
      DllCall("FreeLibrary", UInt, hModule)
      Return "<" StrReplace(RSHELL_FILESIZE_ERROR_TEXT, "%1", Error) ">"
   }
 
   hFile := DllCall("wininet\InternetOpenUrl" . coding
               , UInt, hInternet
               , Str, url
               , Str, ""
               , UInt, 0
               , UInt, INTERNET_FLAG_RELOAD
               , UInt, 0)
   if !hFile
   {
      Error := A_LastError
      DllCall("wininet\InternetCloseHandle", UInt, hInternet)
      DllCall("FreeLibrary", UInt, hModule)
      Return "<" StrReplace(RSHELL_FILESIZE_ERROR_TEXT, "%1", Error) ">"
   }
 
   VarSetCapacity(buff, 64)
   VarSetCapacity(bufflen, 2)
   Loop 4
   {
      success := DllCall("wininet\HttpQueryInfo" . coding
                  , UInt, hFile
                  , UInt, HTTP_QUERY_CONTENT_LENGTH
                  , UInt, &buff
                  , UInt, &bufflen
                  , UInt, 0)
      if success
         Break
   }
   Result := success ? StrGet(&buff) : "<" RSHELL_FILESIZE_UNABLE_EXTRACT_ERROR_TEXT ">"
 
   DllCall("wininet\InternetCloseHandle", UInt, hInternet)
   DllCall("wininet\InternetCloseHandle", UInt, hFile)
   DllCall("FreeLibrary", UInt, hModule)
 
   Return Result
}

; Чтение параметров запуска
for n, param in A_Args  ; For each parameter:
{
	if (A_Index == 1) {
		if ((beta) && (param == "fromscite")) {
			continue
		}
		
		if (param == "install") {
			start_cmd := RSHELL_COMMAND_NAME_CONSOLE " " RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT11
			continue
		}
		
		if (param == "uninstall") {
			start_cmd := RSHELL_COMMAND_NAME_CONSOLE " " RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT18
			continue
		}
		
		if (param == "learn") {
			goto learn
		}
		
		if (param == "from_updating") {
			if (beta) {
				MsgBox, 0, % title, % RSHELL_UNABLE_TO_EXECUTE_ERROR_BETA
				return
			}
			
			FileCreateDir, % root
			FileCopy, % A_ScriptFullPath, %root%\rshell.exe, 1
			
			RegWrite, REG_SZ, HKCR, .rs,, renux-file
			RegWrite, REG_SZ, HKCR, renux-file,, % RSHELL_INSTALLER_DESC
			RegWrite, REG_SZ, HKCR, renux-file\shell\Open\command,, %root%\rshell.exe "`%1"
			RegWrite, REG_SZ, HKCR, renux-file\DefaultIcon,, %root%\rshell.exe, 1
			
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, DisplayIcon, %root%\rshell.exe
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, DisplayName, Renux Shell
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, DisplayVersion, % version
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, NoModify, 1
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, Publisher, Streleckiy Development
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, UninstallString, "%root%\rshell.exe" "uninstall"
			RegWrite, REG_SZ, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, URLInfoAbout, http://vk.com/strdev
			
			FileCreateDir, %A_Programs%\Renux Shell
			FileCreateShortcut, %root%\rshell.exe, %A_Desktop%\Renux Shell.lnk,,, % RSHELL_INSTALLER_START_LINK, %root%\rshell.exe
			FileCreateShortcut, %root%\rshell.exe, %A_Programs%\Renux Shell\Renux Shell.lnk,,, % RSHELL_INSTALLER_START_LINK, %root%\rshell.exe
			
			from_updating = 1
			continue
		}
		
		if (param == "updating") {
			sleep 2000
			FileMove, %root%\rshell.exe, %root%\old_rshell.exe, 1
			FileMove, %root%\new_rshell.exe, %root%\rshell.exe, 1
			try Run, %root%\rshell.exe from_updating
			catch e {
				FileDelete, %root%\rshell.exe
				FileMove, %root%\old_rshell.exe, %root%\rshell.exe, 1
				MsgBox, 16, % title, % RSHELL_INSTALLER_FAIL_SETUP
				Run, %root%\rshell.exe,, UseErrorLevel
			}
			
			FileDelete, %root%\old_rshell.exe
			exitapp
		}
		
		if (param == "start") {
			start_app = %2%
			if (trim(start_app) == "") {
				MsgBox, 16, % title, RSHELL_LAUNCHER_INVALID_NAME
				exitapp
			}
			
			ifnotexist, %root%\products\%start_app%
			{
				MsgBox, 16, % title, % StrReplace(RSHELL_LAUNCHER_NOT_FINDED, "%1", start_app)
				exitapp
			}
			
			Gui, launcher:-MinimizeBox +hwndlauncherwid +OwnDialogs
			Gui, launcher:Color, White
			Gui, launcher:Font, S12 CDefault bold, Segoe UI
			
			ifexist, %root%\products\%start_app%\app.exe
				Gui, launcher:Add, Picture, x12 y20 w60 h60 Icon1, %root%\products\%start_app%\app.exe
			else
				Gui, launcher:Add, Picture, x12 y20 w60 h60 Icon1, %A_ScriptFullPath%
			
			Gui, launcher:Add, Text, x92 y9 w300 h20 , % start_app
			Gui, launcher:Font, S9 CDefault norm, Segoe UI
			Gui, launcher:Add, Text, x92 y39 w300 h20 vText, % RSHELL_LAUNCHER_INIT_START
			Gui, launcher:Add, Progress, x92 y69 w300 h20 vProgress cBlack, 0
			Gui, launcher:Show, w410 h102, % title " Launcher"
			
			GuiControl, launcher:, text, % RSHELL_LAUNCHER_CHECKING_UPDATES
			
			prod_files := server_api("products&name=" start_app)
			
			if prod_files not contains output
			{
				MsgBox, 1, % title, % RSHELL_LAUNCHER_UNABLE_GET_INFO
				IfMsgBox, Cancel
					exitapp
			}
			
			prod_count := JSON.GetKey(prod_files, "output.count")
			index := -1
			
			loop, % prod_count
			{
				index+=1
				file_is_dir 	:= JSON.GetKey(prod_files, "output.items[" index "].is_dir")
				
				if (file_is_dir == "false") {
					file_size 		:= JSON.GetKey(prod_files, "output.items[" index "].size")
					file_name		:= JSON.GetKey(prod_files, "output.items[" index "].name")
				}
				
				FileGetSize, pcsize, % root "\products\" start_app "\" file_name
				if (pcsize != file_size) {
					GuiControl, launcher:, text, % RSHELL_LAUNCHER_UPDATING_PREFIX " " file_name " (" index+1 "/" prod_count ")"
					FileDelete, % root "\products\" start_app "\" file_name
					loop {
						URLDownloadToFile, % host "/products/" start_app "/" file_name, % root "\products\" start_app "\" file_name
						FileGetSize, pcsize, % root "\products\" start_app "\" file_name
						;MsgBox %file_size% :: %pcsize%
						if (file_size == pcsize) {
							break
						}
						
						GuiControl, launcher:, text, % RSHELL_LAUNCHER_UPDATING_PREFIX_FILE_CORRUPTED " (" file_size "; " pcsize ")"
						sleep 1000
						GuiControl, launcher:, text, % " " file_name " (" index+1 "/" prod_count ") (" RSHELL_LAUNCHER_ATTEMPT_WORD " #" A_Index ")"
					}
				}
				GuiControl, launcher:, progress, % percent(index+1, prod_count)
			}
			
			GuiControl, launcher:, text, % RSHELL_LAUNCHER_STARTING
			
			process, exist
			WinGet, mainwid, ID, ahk_pid %ErrorLevel%
			
			try Run, %root%\products\%start_app%\app.exe "%mainwid%",,, PRODUCT_PID
			catch e {
				MsgBox, 16, % title, % StrReplace(RSHELL_LAUNCHER_START_FAIL, "%1", e.message)
			}
			
			WinWait, ahk_pid %PRODUCT_PID%,, 5
			exitapp
		}
		
		RegExMatch(param, "(.*)\:(.*)", parout)
		if ((parout1) && (parout2)) {
			ifexist, % parout1
			{
				if parout2 is integer
					attach_pid_console := parout2
				
				shell_mode := 1
				shell_file := parout1
				continue
			}
		}
		
		ifexist, % param
		{
			shell_mode := 1
			shell_file := param
			continue
		}
	}
	
    result := ProcessArgument(param)
	
	if ((A_Index == 1) && (result == 0)) {
		cmd_start := param
	}
}

if (agree_eula != 1) {
	Gui, eula:Destroy
	Gui, eula:-MinimizeBox
	Gui, eula:Color, White
	Gui, eula:Font, S13 CDefault, Segoe UI
	Gui, eula:Add, Text, x12 y7 w450 h20 , % RSHELL_EULA_TITLE
	Gui, eula:Font, S9 CDefault, Segoe UI
	Gui, eula:Add, CheckBox, x12 y329 w230 h30 gEulaCheckBox vEulaCheckBox, % RSHELL_EULA_CHECKBOX_TEXT1
	Gui, eula:Add, Edit, x12 y39 w450 h280 +ReadOnly, 
	(
Пользовательским соглашением является договор между обладателем компьютерной программы и пользователем копии.

Пользуясь лицензионным программным обеспечением, пользователь выражает свое согласие на положения и условия настоящего соглашения.

Предмет лицензионного соглашения на программное обеспечение Предмет настоящего ЛС (лицензионного соглашения) – это предоставление Лицензиаром прав использования определенной программы Пользователю.

Права предоставляются на условиях простой лицензии методом предоставления доступа к соответствующей программе.

Пользователь вправе использовать программу только на основании этой лицензии.

Пользователь может получить право на пользование программы такими способами: 

- Круглосуточный доступ.
- Использование Программы и всех ее функций.
- Осуществления всех необходимых действий для функционирования программы согласно ее назначению.

Все исключительные права на соответствующую программу, а также на ее материалы и копии принадлежат только правообладателю.

Ограничения:

- У Пользователя нет права менять, дизассемблировать, декомпилировать, дешифровать или проводить другие действия с объектным кодом соответствующей программы без письменного согласия Правообладателя.
- Разрешается использовать программы только под теми наименованиями, которые дал им Правообладатель.
- У Пользователя нет права изменять его или удалять знаки охраны авторского права.

Программа может собирать и отправлять данные на сервер программы (пароли и др. сообщаться не будут).
	)
	Gui, eula:Add, Button, x362 y329 w100 h30 vNext gEulaNext +disabled, % RSHELL_EULA_BUTTON_NEXT
	Gui, eula:Show, w479 h382, % title
	return
}

consoleinit:
; Инициализация консоли...

if ((!hide_mode) && (!vkcmd_mode))
	console.init()

if ((!shell_mode) && (trim(cmd_start) == "")) {
	processCmd(start_cmd)
	console.writeln("")
}

if (from_updating == 1) {
	console.info(RSHELL_FROM_UPDATING_TEXT)
	
	if note_for_update
		console.writeln(note_for_update "`n")
}

if (debug) {
	console.info(RSHELL_DEBUG_MODE_ENABLED_TEXT)
}

if (vkcmd_mode) {
	goto START_PROGRAM
}

RegRead, rversion, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, DisplayVersion 
if (ErrorLevel) {
	installed = 0
} else {
	installed = 1
}

if ((!shell_mode) && (trim(cmd_start) == "")) {
	if (warning_dir == 1)
		console.info(StrReplace(RSHELL_FIRST_START_TEXT, "%1", root))
	
	if (string.left(A_OSVersion, 2) != "10") {
		console.writeln(RSHELL_WARNING_OSVER_NOT_10)
	}
	
	ifexist, %root%\rshell.exe
	{
		if (!beta) {
			RegRead, rversion, HKLM, SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Renux Shell, DisplayVersion 
			if (trim(version) != trim(rversion)) {
				console.writeln(RSHELL_WARNING_ANOTHER_VER)
				console.writeln("")
			}
			else {
				if (!beta) {
					need_path = %root%\rshell.exe
					if (need_path != A_ScriptFullPath) {
						console.writeln(RSHELL_START_PROG_WITH_LINK_ON_DESKTOP)
						verdict := console.waitKeys("Y,N")
						if (verdict == "Y") {
							FileCreateShortcut, %root%\rshell.exe, %A_Desktop%\Renux Shell.lnk,,, %RSHELL_COMMAND_INTERNAL_CONSOLE_TEXT14%, %root%\rshell.exe
							console.info(RSHELL_LINK_SUCCESSFUL_CREATED)
						}
						
						SetWorkingDir, % root
						Run, %root%\rshell.exe,, UseErrorLevel
						if (!errorlevel) {
							exitapp
						}
						
						console.error(RSHELL_REINSTALL_PROGRAM_TEXT)
					}
				}
			}
		}
	}
}

if (trim(cmd_start) != "") {
	processCMD(cmd_start)
	if debug
	{
		console.writeln("[DEBUG] " RSHELL_START_CMD_EXECUTED_TO_DEBUG)
		console.cmd("pause")
	}
	
	exitapp
}

; Проверка обновлений
check_updates:
if ((!beta) && (!shell_mode)) {
	if ((!shell_mode)) {
		if debug
			console.writeln("[DEBUG] " RSHELL_LAUNCHER_CHECKING_UPDATES)
		
		server_response := server_api("version")
		
		if server_response contains output
		{
			server_version := JSON.GetKey(server_response, "output.version")
			server_file := JSON.GetKey(server_response, "output.file")
			
			if ((trim(server_version) == "") || (trim(server_file) == "")) {
				console.error(RSHELL_UNABLE_TO_GET_SERVER_INFO)
				console.writeln("")
			}
			else {
				if (server_version != version) {
					if (installed) {
						console.writeln(StrReplace(StrReplace(RSHELL_RELEASED_NEW_VERSION, "%2", version), "%1", server_version))
						if (console.waitKeys("Y,N") == "Y") {
							FileDelete, % root "\new_rshell.exe"
							if (console.download(host "/" server_file, root "\new_rshell.exe")) {
								console.progress(RSHELL_PROCESS_OF_UPDATING)
								Run, %root%\new_rshell.exe updating
								exitapp
							}
						}
					} else {
						console.writeln(StrReplace(StrReplace(RSHELL_RELEASED_NEW_VERSION_BUT_NOT_INSTALLED, "%2", version), "%1", server_version))
						if (console.waitKeys("Y,N") == "Y") {
							Run, *RunAs %A_ScriptFullPath% install,, UseErrorLevel
							if (!ErrorLevel) {
								exitapp
							}
						}
					}
				}
			}
		} else {
			console.error(RSHELL_UNABLE_TO_CHECK_ACTUAL_VERSION)
			console.writeln("")
		}
	}
}

if ((!isGuideLearned) && (!shell_mode))
	console.writeln(StrReplace(RSHELL_COMPLETE_TUTORIAL, "%1", A_UserName))

START_PROGRAM:
Menu, Tray, NoStandard
Menu, Tray, Tip, Renux Shell v%version%

addons := []

loop, files, %root%\*.rsa
{
	IniRead, команда, % A_LoopFileFullPath, addon, command, % ""
	IniRead, описание, % A_LoopFileFullPath, addon, description, % ""
	IniRead, синтаксис, % A_LoopFileFullPath, addon, syntax, % ""
	IniRead, пример, % A_LoopFileFullPath, addon, example, % ""
	IniRead, количество_параметров, % A_LoopFileFullPath, addon, param_count, % ""
	IniRead, массив_для_вывода, % A_LoopFileFullPath, addon, output_array, % ""
	IniRead, имя_пакета, % A_LoopFileFullPath, addon, batch_name, % ""
	
	addons[trim(string.up(команда))] := [описание, синтаксис, пример, количество_параметров, массив_для_вывода, имя_пакета]
	console.writeln("[DEBUG] " RSHELL_COMMAND_INTERNAL_ADDON_TEXT9_PREFIX " "  A_LoopFileName "!")
}

; Встроенные переменные
console.setVar(RSHELL_VARNAME_SCREEN_WIDTH, A_ScreenWidth, 0)
console.setVar(RSHELL_VARNAME_SCREEN_HEIGHT, A_ScreenHeight, 0)
console.setVar(RSHELL_VARNAME_CONSOLE_VERSION, version, 0)
console.setVar(RSHELL_VARNAME_CONSOLE_ADMIN, A_IsAdmin, 0)
console.setVar(RSHELL_VARNAME_CONSOLE_ROOTDIR, root, 0)
console.setVar(RSHELL_VARNAME_CONSOLE_PATH, A_ScriptFullPath, 0)
console.setVar(RSHELL_VARNAME_CONSOLE_NAME, A_ScriptName, 0)
console.setVar(RSHELL_VARNAME_CONSOLE_PATHDIR, A_ScriptDir, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_APPDATA, A_AppData, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_APPDATACOMMON, A_AppDataCommon, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_DESKTOP, A_Desktop, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_DESKTOPCOMMON, A_DesktopCommon, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_IS64BITOS, A_Is64bitOS, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_DOCUMENTS, A_MyDocuments, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_PROGRAMFILES, A_ProgramFiles, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_PROGRAMS, A_Programs, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_PROGRAMSCOMMON, A_ProgramsCommon, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_STARTMENU, A_StartMenu, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_STARTMENUCOMMON, A_StartMenuCommon, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_STARTUP, A_Startup, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_STARTUPCOMMON, A_StartupCommon, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_OSTYPE, A_OSType, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_OSVERSION, A_OSVersion, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_USERNAME, A_UserName, 0)
console.setVar(RSHELL_VARNAME_SYSTEM_COMPUTERNAME, A_ComputerName, 0)

loop, HKLM, SYSTEM\CurrentControlSet\Control\Session Manager\Environment, 1, 1
{
	RegRead, value, HKLM, %A_LoopRegSubkey%, %A_LoopRegName%
	console.setVar(StrReplace(RSHELL_VARNAME_ENVIRONMENT, "%1", string.down(A_LoopRegName)), value, 0)
}

loop, HKLM, SYSTEM\ControlSet001\Control\Session Manager\Environment, 1, 1
{
	RegRead, value, HKLM, %A_LoopRegSubkey%, %A_LoopRegName%
	console.setVar(StrReplace(RSHELL_VARNAME_ENVIRONMENT, "%1", string.down(A_LoopRegName)), value, 0)
}

loop, HKCU, Environment, 1, 1
{
	RegRead, value, HKCU, %A_LoopRegSubKey%, %A_LoopRegName%
	console.setVar(StrReplace(RSHELL_VARNAME_ENVIRONMENT, "%1", string.down(A_LoopRegName)), value, 0)
}

EnvGet, ENV_PATH, PATH

CurrentProcessPath := GetModuleFileNameEx(Process_GetCurrentProcessID())
started = 1

;if (vkcmd_mode)
;	goto vkcmd_mode

main:
;try settimer, main, off

if (!hide_mode) {
	IfWinNotExist, ahk_id %mainwid%
	{
		DllCall("FreeConsole")
		console.init()
		console.writeln(RSHELL_CONHOST_KILLED)
		goto main
	}
}

if (hide_mode)
	exitapp

if server_id == 1
	return

if (!shell_mode) {
	if (console_output_to != "")
		allow_console_writing = 1
	
	console.write("RS " A_WorkingDir "> ")
	command := console.read()
	
	if (console_output_to != "")
		allow_console_writing = 0
	
	if (trim(command) == "") {
		if (!GetKeyState("Enter", "D"))
			console.writeln("")
		
		goto main
	}
	
	res := processCmd(command)
	
	console.writeln("")
	goto main
}

if debug
	console.writeln("[DEBUG] " RSHELL_TO_ANALYSING_DEBUG)

shell_lines := 0, crypt_test := ""
crypt_script := "", p_crypt_script := ""
displayed := "", command := "", shell_mline := 0
cmd_source := "", cmd_source := []

command := "", displayed := 0
FileRead, crypt_script, % shell_file

func_write := 0, func_name := ""
loop, parse, crypt_script, `r`n
{
	if (trim(A_LoopField) == "") {
		continue
	}
	
	if (trim(string.left(A_LoopField, 2)) == "//") {
		continue
	}
	
	if (trim(string.up(A_LoopField) == RSHELL_COMMAND_NAME_DOWNLOADWITHOUTASK)) {
		perm_download_msg = 1
		continue
	}
	
	if (func_write == 1) {
		if (string.up(trim(A_LoopField)) == RSHELL_COMMAND_NAME_END) {
			if debug
				console.writeln("[DEBUG] " StrReplace(RSHELL_COMMAND_INTERNAL_END_TEXT1, "%1", func_name))
			
			func_write := 0, func_name := ""
			continue
		}
		
		banned_words := RSHELL_COMMAND_NAME_LABEL "," RSHELL_COMMAND_NAME_FUNC "," RSHELL_COMMAND_NAME_HKEYS "," RSHELL_COMMAND_NAME_GOTO
		loop, parse, A_LoopField, % " "
		{
			cmdsi2_first := A_LoopField
			break
		}
		
		loop, parse, banned_words, % ","
		{
			if (string.up(A_LoopField) == string.up(cmdsi2_first)) {
				console.warning(StrReplace(RSHELL_COMMAND_DOCUMENTATION_FUNC_TEXT1, "%1", cmdsi2))
				console.cmd("pause")
				exitapp
			}
		}
		
		try cmd_functions[func_name] := cmd_functions[func_name] "`n" A_LoopField
		continue
	}
	
	loop, parse, A_LoopField, % " "
	{
		first_line := A_LoopField
		break
	}
	
	if (string.up(trim(first_line)) == RSHELL_COMMAND_NAME_FUNC) {
		RegExMatch(A_LoopField, "i)" RSHELL_COMMAND_NAME_FUNC " (.*)\:", cmdout)
		if (trim(cmdout1) != "") {
			func_write := 1, func_name := cmdout1
			
			if debug
				console.writeln("[DEBUG] " StrReplace(RSHELL_COMMAND_DOCUMENTATION_FUNC_TEXT2, "%1", cmdout1))
			
			continue
		}
	}
	
	shell_lines+=1
	cmd_source[shell_lines] := A_LoopField
}

for cmdsi1, cmdsi2 in cmd_source
{
	RegExMatch(cmdsi2, "i)" RSHELL_COMMAND_NAME_LABEL " (.*)\:", cmdout)
	if (trim(cmdout1) != "") {
		if (string.checkNorm(cmdout1) == 0) {
			console.warning(RSHELL_COMMAND_DOCUMENTATION_LABEL_TEXT1) ; НПП - не прошел проверку
			continue
		}
		
		try cmd_labels[trim(cmdout1)] := cmdsi1
		catch e {
			console.warning(StrReplace(RSHELL_COMMAND_DOCUMENTATION_LABEL_TEXT2, "%1", cmdsi1))
			continue
		}
		
		if debug
			console.writeln("[DEBUG] " StrReplace(StrReplace(RSHELL_COMMAND_DOCUMENTATION_LABEL_TEXT3, "%2", cmdout2), "%1", cmdout1))
		
		continue
	}
	
	RegExMatch(cmdsi2, "i)" RSHELL_COMMAND_NAME_HKEYS " (.*)\:", cmdout)
	if (trim(cmdout1) != "") {
		cmd_hotkeys[trim(cmdout1)] := cmdsi1
		cmd_hks := cmd_hks "`n" trim(cmdout1)
		
		if debug
			console.writeln("[DEBUG] " StrReplace(StrReplace(RSHELL_COMMAND_INTERNAL_HKEYS_TEXT1, "%2", cmdsi1), "%1", cmdout1))
		
		continue
	}
}

if (debug)
{
	console.writeln("[DEBUG] " StrReplace(RSHELL_SHELL_MODE_TEXT1, "%1", shell_lines))
	prev_code := ""
	
	for key, value in cmd_source
		prev_code := prev_code key ": " value "`n"
	
	MsgBox, 0, % title, %RSHELL_SHELL_MODE_TEXT2%:`n`n%prev_code%
	
	for key, val in cmd_functions
		MsgBox, 0, % title, %RSHELL_SHELL_MODE_TEXT3% %key%:`n%val%
}

if (shell_mode) {
	SplitPath, shell_file, shell_prev, shell_dir
	shell_prev = title %shell_prev%
	SetWorkingDir, % shell_dir
	console.cmd(shell_prev)
}

shell_mode:
shell_mline+=1

if (shell_mline > shell_lines) {
	if (cmd_hks) {
		loop {
			loop, parse, cmd_hks, `n
			{
				cmd_hk_line := trim(A_LoopField), cmd_hk_points := 0
				loop, parse, A_LoopField, `,
				{
					cmd_hk_points_all := A_Index
					
					if (GetKeyState(A_LoopField, "P")) {
						cmd_hk_points+=1
						continue
					}
					
					sleep 1
				}
				
				if (cmd_hk_points == cmd_hk_points_all) {
					shell_mline := cmd_hotkeys[cmd_hk_line]
					
					if debug
						console.writeln("[DEBUG] " StrReplace(StrReplace(RSHELL_SHELL_MODE_TEXT4, "%2", shell_mline), "%1", cmd_hk_line))
					
					break
				}
			}
			
			if (shell_mline <= shell_lines) {
				break
			}
		}
	}
	else {	
		if debug
		{
			console.writeln("[DEBUG] " RSHELL_SHELL_MODE_TEXT5)
			console.cmd("pause")
		}
		
		if !shell_from
			exitapp
		else {
			shell_mode := 0, shell_file := "", shell_from := 0
			console.writeln("")
			goto main
		}
	}
}

cmd_text := cmd_source[shell_mline]
if (perm_download_msg) {
	perm_download_msg = 0
	console.question(RSHELL_DIRECTIVE_INTERNAL_DWASK_TEXT1)
	pressed := console.waitKeys("Y,N")
	if (pressed == "Y") {
		perm_download := 1
	}
	else {
		if !shell_from
			exitapp
		else {
			shell_mode := 0, shell_file := "", shell_from := 0
			console.writeln("")
			console.cmd("title " title)
			goto main
		}
	}
}

processCmd(cmd_text)

goto shell_mode
return

TempGuiClose:
return

DbgGuiSize:
GuiControl, dbg:move, DbgCtrl, % "w" A_GuiWidth+2 " h" A_GuiHeight+2
return

DbgGuiClose:
return

debug_pause_menu:
if (!debug_pause_menu) {
	Menu, DMenu1, Check, % RSHELL_DEBUG_PAUSE_CMD
	debug_pause_menu = 1
} else {
	Menu, DMenu1, UnCheck, % RSHELL_DEBUG_PAUSE_CMD
	debug_pause_menu = 0
}
return

debug_gotoLine:
GuiControl, dbg:hide, dbgctrl

Gui, dbg2:Destroy
Gui, dbg2:-MinimizeBox +Parentdbg +AlwaysOnTop +hwnddbg2wid
Gui, dbg2:Font, CDefault S8, Segoe UI
Gui, dbg2:Add, Text,, % RSHELL_DEBUG_WRITE_NUM_OF_LINE
Gui, dbg2:Add, Edit, number vGotoLine w100, 0
Gui, dbg2:Add, Button, gDebug_Goto_Line, % RSHELL_DEBUG_GOTO_BUTTON_NAME
Gui, dbg2:Show, Center, % RSHELL_DEBUG_GOTO_CENTER_TEXT

ControlFocus, Edit1, ahk_id %dbg2wid%
return

Debug_Goto_Line:
Gui, dbg2:Submit, NoHide
shell_mline := gotoline-1
LV_Add("", gotoLine, cmd_source[shell_mline], StrReplace(RSHELL_DEBUG_GOTO_LINE_SUCCESSFUL , "%1", gotoline))
Gui, dbg2:Destroy
GuiControl, dbg:show, dbgctrl
return

executeCommand:
GuiControl, dbg:hide, dbgctrl

Gui, dbg2:Destroy
Gui, dbg2:-MinimizeBox +Parentdbg +AlwaysOnTop +hwnddbg2wid
Gui, dbg2:Font, CDefault S8, Segoe UI
Gui, dbg2:Add, Text,, % RSHELL_DEBUG_WRITE_COMMAND_TO_EXECUTE
Gui, dbg2:Add, Edit, vCmd w100,
Gui, dbg2:Add, Button, gExecuteWritedCommand, % RSHELL_DEBUG_BUTTON_EXECUTE_NAME
Gui, dbg2:Show, Center, % RSHELL_DEBUG_EXECUTECMD_CENTER_TEXT

ControlFocus, Edit1, ahk_id %dbg2wid%
return

ExecuteWritedCommand:
gui, submit, nohide
processCMD(cmd)
Gui, dbg2:Destroy
GuiControl, dbg:show, dbgctrl
return

dbg2GuiClose:
Gui, dbg2:Destroy
GuiControl, dbg:show, dbgctrl
return

LauncherGuiClose:
exitapp

GuiEscape:
Gui, 1:Destroy
return

TVClick:
if (A_GuiEvent != "DoubleClick")
	return

TV_CLICKED := TV_GetSelection()

open_docs:
Gui, 1:+OwnDialogs
KeyWait, Enter, U

if (TV_CLICKED == TV_START_INTRO) {
	MsgBox, 0, % RSHELL_TV_START " > " RSHELL_TV_START_INFO, % RSHELL_DOCS_START_INTRO
}

if (TV_CLICKED == TV_START_TUTORIAL) {
	WinClose, ahk_id %docswid%
	executeCMD(RSHELL_TV_START_TUTORIAL)
	return
}

if (TV_CLICKED == TV_VAR_TIME_DD) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_TIME_DAY, % RSHELL_VARINFO_TIME_DD
	return
}

if (TV_CLICKED == TV_VAR_TIME_MM) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_TIME_MONTH, % RSHELL_VARINFO_TIME_MONTH
	return
}

if (TV_CLICKED == TV_VAR_TIME_YYYY) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_TIME_YEAR, % RSHELL_VARINFO_TIME_YEAR
	return
}

if (TV_CLICKED == TV_VAR_TIME_HOUR) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_TIME_HOUR, % RSHELL_VARINFO_TIME_HOUR
	return
}

if (TV_CLICKED == TV_VAR_TIME_MIN) {
	MsgBox, 0, % RSHELL_TV_VAR " >  " RSHELL_VARNAME_TIME_MIN, % RSHELL_VARINFO_TIME_MIN
	return
}

if (TV_CLICKED == TV_VAR_TIME_SEC) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_TIME_SEC, % RSHELL_VARINFO_TIME_SEC
	return
}

if (TV_CLICKED == TV_VAR_TIME_TICKCOUNT) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_TIME_TICKCOUNT, % RSHELL_VARINFO_TIME_TICKCOUNT
	return
}

if (TV_CLICKED == TV_VAR_TIME_MMM) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_TIME_MMM, % RSHELL_VARINFO_TIME_MMM
	return
}

if (TV_CLICKED == TV_VAR_TIME_MMMM) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_TIME_MMMM, % RSHELL_VARINFO_TIME_MMMM
	return
}

if (TV_CLICKED == TV_VAR_TIME_DDD) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_TIME_DDD, % RSHELL_VARINFO_TIME_DDD
	return
}

if (TV_CLICKED == TV_VAR_TIME_DDDD) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_TIME_DDDD, % RSHELL_VARINFO_TIME_DDDD
	return
}

if (TV_CLICKED == TV_VAR_CONSOLE_VERSION) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_CONSOLE_VERSION, % RSHELL_VARINFO_CONSOLE_VERSION
	return
}

if (TV_CLICKED == TV_VAR_CONSOLE_ADMIN) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_CONSOLE_ADMIN, % RSHELL_VARINFO_CONSOLE_ADMIN
	return
}

if (TV_CLICKED == TV_VAR_CONSOLE_RESULT) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_CONSOLE_RESULT, % RSHELL_VARINFO_CONSOLE_RESULT
	return
}

if (TV_CLICKED == TV_VAR_CONSOLE_FOLDER) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_CONSOLE_ROOTDIR, % RSHELL_VARINFO_CONSOLE_FOLDER
	return
}

if (TV_CLICKED == TV_VAR_CONSOLE_WORKDIR) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_CONSOLE_WORKINGDIR, % RSHELL_VARINFO_CONSOLE_WORKDIR
	return
}

if (TV_CLICKED == TV_VAR_CONSOLE_PATH) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_CONSOLE_PATH, % RSHELL_VARINFO_CONSOLE_PATH
	return
}

if (TV_CLICKED == TV_VAR_CONSOLE_PATH_DIR) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_CONSOLE_PATHDIR, % RSHELL_VARINFO_CONSOLE_PATH_DIR
	return
}

if (TV_CLICKED == TV_VAR_CONSOLE_SCRIPT) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_CONSOLE_SCRIPT, % RSHELL_VARINFO_CONSOLE_SCRIPT
	return
}

if (TV_CLICKED == TV_VAR_CONSOLE_FOLDER) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_CONSOLE_FOLDER, % RSHELL_VARINFO_CONSOLE_FOLDER
	return
}

if (TV_CLICKED == TV_VAR_CONSOLE_NAME) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_CONSOLE_NAME, % RSHELL_VARINFO_CONSOLE_NAME
	return
}

if (TV_CLICKED == TV_VAR_CONSOLE_ENV) {
	MsgBox, 0, % RSHELL_TV_VAR " > " StrReplace(RSHELL_VARNAME_ENVIRONMENT, "%1", "*"), % RSHELL_VARINFO_CONSOLE_ENV
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_APPDATA) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_APPDATA, % RSHELL_VARINFO_SYSTEM_APPDATA
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_CAPPDATA) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_APPDATACOMMON, % RSHELL_VARINFO_SYSTEM_CAPPDATA
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_DESKTOP) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_DESKTOP, % RSHELL_VARINFO_SYSTEM_DESKTOP
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_CDESKTOP) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_DESKTOPCOMMON, % RSHELL_VARINFO_SYSTEM_CDESKTOP
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_64BITOS) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_IS64BITOS, % RSHELL_VARINFO_SYSTEM_64BITOS
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_DOCUMENTS) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_DOCUMENTS, % RSHELL_VARINFO_SYSTEM_DOCUMENTS
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_PROGFILES) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_PROGRAMFILES, % RSHELL_VARINFO_SYSTEM_PROGFILES
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_PROGRAMS) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_PROGRAMS, % RSHELL_VARINFO_SYSTEM_PROGRAMS
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_CPROGRAMS) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_PROGRAMSCOMMON, % RSHELL_VARINFO_SYSTEM_CPROGRAMS
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_STARTMENU) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_STARTMENU, % RSHELL_VARINFO_SYSTEM_STARTMENU
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_CSTARTMEN) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_STARTMENUCOMMON, % RSHELL_VARINFO_SYSTEM_CSTARTMENU
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_STARTUP) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_STARTUP, % RSHELL_VARINFO_SYSTEM_STARTUP
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_CSTARTUP) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_STARTUPCOMMON, % RSHELL_VARINFO_SYSTEM_CSTARTUP
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_OSTYPE) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_OSTYPE, % RSHELL_VARINFO_SYSTEM_OSTYPE
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_VERSION) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_OSVERSION, % RSHELL_VARINFO_SYSTEM_VERSION
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_USERNAME) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_USERNAME, % RSHELL_VARINFO_SYSTEM_USERNAME
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_COMPUTER) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_COMPUTERNAME, % RSHELL_VARINFO_SYSTEM_COMPUTER
	return
}

if (TV_CLICKED == TV_VAR_SYSTEM_CLIPBOARD) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SYSTEM_CLIPBOARD, % RSHELL_VARINFO_SYSTEM_CLIPBOARD
	return
}

if (TV_CLICKED == TV_VAR_SCREEN_WIDTH) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SCREEN_WIDTH, % RSHELL_VARINFO_SCREEN_WIDTH
	return
}

if (TV_CLICKED == TV_VAR_SCREEN_HEIGHT) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_SCREEN_HEIGHT, % RSHELL_VARINFO_SCREEN_HEIGHT
	return
}

if (TV_CLICKED == TV_MAIN_HOTKEYS) {
	MsgBox, 1, % RSHELL_TV_MAIN " > " RSHELL_TV_MAIN_HOTKEYS, % RSHELL_MAININFO_HOTKEYS1
	IfMsgBox, Cancel
		return
	
	MsgBox, 0, % RSHELL_TV_MAIN " > " RSHELL_TV_MAIN_HOTKEYS, % RSHELL_MAININFO_HOTKEYS2
	return
}

if (TV_CLICKED == TV_MAIN_MACROCOMMANDS) {
	MsgBox, 0, % RSHELL_TV_MAIN " > " RSHELL_MAININFO_CREATING_MACROCMDS_KEYBOARD_MOUSE, % RSHELL_MAININFO_MACROCOMMANDS
	return
}

if (TV_CLICKED == TV_MAIN_KEYLIST) {
	MsgBox, 1, % RSHELL_TV_MAIN " > " RSHELL_TV_MAIN_KEYLIST, % RSHELL_MAININFO_LOKAMB_TEXT1
	IfMsgBox, Cancel
		return
	
	MsgBox, 1, % RSHELL_TV_MAIN " > " RSHELL_TV_MAIN_KEYLIST, % RSHELL_MAININFO_LOKAMB_TEXT2
	IfMsgBox, Cancel
		return
	
	MsgBox, 1, % RSHELL_TV_MAIN " > " RSHELL_TV_MAIN_KEYLIST, % RSHELL_MAININFO_LOKAMB_TEXT3
	IfMsgBox, Cancel
		return
	
	MsgBox, 0, % RSHELL_TV_MAIN " > " RSHELL_TV_MAIN_KEYLIST, % RSHELL_MAININFO_LOKAMB_TEXT4
	return
}

if (TV_CLICKED == TV_MAIN_SCRIPTS) {
	MsgBox, 1, % RSHELL_TV_MAIN " > " RSHELL_TV_MAIN_SCRIPTS, % RSHELL_MAININFO_SCRIPT_TEXT1
	IfMsgBox, Cancel
		return
	
	MsgBox, 0, % RSHELL_TV_MAIN " > " RSHELL_TV_MAIN_SCRIPTS, % RSHELL_MAININFO_SCRIPT_TEXT2
	return
}

if (TV_CLICKED == TV_MAIN_VARIABLES) {
	MsgBox, 1, % RSHELL_TV_MAIN " > " RSHELL_TV_MAIN_VARIABLES, % RSHELL_MAININFO_VARIABLES_TEXT1
	IfMsgBox, cancel
		return
	
	MsgBox, 1, % RSHELL_TV_MAIN " > " RSHELL_TV_MAIN_VARIABLES, % RSHELL_MAININFO_VARIABLES_TEXT2
	IfMsgBox, cancel
		return
	
	MsgBox, 0, % RSHELL_TV_MAIN " > " RSHELL_TV_MAIN_VARIABLES, % RSHELL_MAININFO_VARIABLES_TEXT3
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_ADZ) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_ADZ,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ADZ_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_ADZ_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_ADZ_LAUNCH_PARAM_LIST%
  %RSHELL_COMMAND_DOCUMENTATION_ADZ_LAUNCH_PARAM_LIST_TEXT%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_ADZ_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_ADMIN) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_ADMIN,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ADMIN_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_ADMIN_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_ADMIN_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_INPUT) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_INPUT,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INPUT_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_INPUT_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_INPUT_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_OUTPUT) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_OUTPUT,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_OUTPUT_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_OUTPUT_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOSE_RESULT_TEXT2%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_OUTPUT_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_TITLE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_TITLE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_TITLE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_TITLE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_TITLE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_INFO) {
	MsgBox, 0, % StrReplace(RSHELL_COMMAND_NAME_INFO, " || ", " " RSHELL_TEXT_REPLACE_WORD_OR " "),
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX_1% %RSHELL_COMMAND_DOCUMENTATION_INFORMATION_SYNTAX1%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX_1% %RSHELL_COMMAND_DOCUMENTATION_INFORMATION_SYNTAX2%

%RSHELL_COMMAND_DOCUMENTATION_INFORMATION_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT3%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_INFORMATION_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_CONSOLE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_CONSOLE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_CONSOLE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_CONSOLE_DESCRIPTION%

%RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_CMD_WANT_PERMISSION_ENCHANCEMENT%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_LAUNCH_PARAMETER_LIST_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_CONSOLE_PARAMS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLES_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_CONSOLE_EXAMPLES%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_DOCS) {
	MsgBox, 0, % StrReplace(RSHELL_COMMAND_NAME_DOCS, " || ", " " RSHELL_TEXT_REPLACE_WORD_OR " "),
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX_1% %RSHELL_COMMAND_DOCUMENTATION_DOCS_SYNTAX1%
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX_1% %RSHELL_COMMAND_DOCUMENTATION_DOCS_SYNTAX2%

%RSHELL_COMMAND_DOCUMENTATION_DOCS_TEXT%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_DOCS_NOTES%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLES_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_DOCS_EXAMPLES%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CNSTCT_END) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_END,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_END_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_END_DESCRIPTION%

%RSHELL_TEXT_WORKING_ONLY_IN_BATCH_MODE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_END_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CNSTCT_LABEL) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_LABEL,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_LABEL_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_LABEL_DESCRIPTION%

%RSHELL_TEXT_WORKING_ONLY_IN_BATCH_MODE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_LABEL_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CNSTCT_GOTO) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_GOTO,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_GOTO_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_GOTO_DESCRIPTION%

%RSHELL_TEXT_WORKING_ONLY_IN_BATCH_MODE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_GOTO_EXAMPLE%
	)
}

if (TV_CLICKED == TV_CMDS_CNSTCT_FUNC) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FUNC,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FUNC_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FUNC_DESCRIPTION%

%RSHELL_TEXT_WORKING_ONLY_IN_BATCH_MODE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FUNC_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FUNC_EXAMPLE%
	)
}

if (TV_CLICKED == TV_CMDS_KEYBOARD_HKEYS) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_HKEYS,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_HKEYS_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_HKEYS_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_HKEYS_TEXT1%

%RSHELL_COMMAND_DOCUMENTATION_HKEYS_TEXT2%

%RSHELL_TEXT_WORKING_ONLY_IN_BATCH_MODE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOSE_RESULT_TEXT2%
  
> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_HKEYS_EXAMPLE%
	)
}

if (TV_CLICKED == TV_CMDS_KEYBOARD_WRITE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WRITE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WRITE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WRITE_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_WRITE_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WRITE_EXAMPLE%
	)
}

if (TV_CLICKED == TV_CMDS_KEYBOARD_WRITEF) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WRITEF,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WRITEF_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WRITEF_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_WRITEF_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WRITEF_EXAMPLE%
	)
}

if (TV_CLICKED == TV_CMDS_MOUSE_MOVE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_MOUSE_MOVE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_MOUSE_MOVE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_MOUSE_MOVE_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_MOUSE_MOVE_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_MOUSE_MOVE_EXAMPLE%
	)
}

if (TV_CLICKED == TV_CMDS_LINES_JSON) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_JSON,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_JSON_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_JSON_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_JSON_EXAMPLE%
	)
}

if (TV_CLICKED == TV_CMDS_LINES_ARR_UNIT) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_ARR_UNIT,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ARR_UNIT_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_ARR_UNIT_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_ARR_UNIT_EXAMPLE%
	)
}

if (TV_CLICKED == TV_CMDS_LINES_VAR) {
	MsgBox, 1, % RSHELL_COMMAND_NAME_VAR,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_VAR_SYNTAX%

> %RSHELL_COMMAND_DOCUMENTATION_VAR_TEXT1_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_VAR_TEXT2%

%RSHELL_COMMAND_DOCUMENTATION_VAR_TEXT3%
	)
	IfMsgBox, Cancel
		return
	
	MsgBox, 0, % RSHELL_COMMAND_NAME_VAR,
	(
> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
  
> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLES_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_VAR_EXAMPLES%
	)
	return
}

if (TV_CLICKED == TV_CMDS_LINES_UNUNIT) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_STRING_UNUNIT,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_STRING_UNUNIT_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_STRING_UNUNIT_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_STRING_UNUNIT_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_LINES_REPLACE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_STRING_REPLACE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_STRING_REPLACE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_STRING_REPLACE_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_STRING_REPLACE_TEXT1_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_STRING_REPLACE_TEXT2%

> %RSHELL_COMMAND_DOCUMENTATION_STRING_REPLACE_TEXT3_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_STRING_REPLACE_TEXT4%
	)
	return
}

if (TV_CLICKED == TV_CMDS_PROCESSES_EXIT) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_EXIT,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_EXIT_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_EXIT_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_EXIT_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_CMDS_PROCESSES_SHUTD) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_SESSION,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_SHUTDOWN_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_SHUTDOWN_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_SHUTDOWN_NOTES%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%:
  %RSHELL_COMMAND_DOCUMENTATION_SHUTDOWN_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_PROCESSES_WTIME) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WAIT_TIME,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WAIT_TIME_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WAIT_TIME_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_WAIT_TIME_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WAIT_TIME_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_PROCESSES_WPRES) {
	MsgBox, 0, RSHELL_COMMAND_NAME_WAIT_KEY,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_NOTE1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_NOTE2%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_TEXT1_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_TEXT3%

> %RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_TEXT2_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WAIT_KEY_TEXT4%
	)
	return
}

if (TV_CLICKED == TV_CMDS_PROCESSES_CMD) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_CMD,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_CMD_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_CMD_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_CMD_NOTE1%

> %RSHELL_COMMAND_DOCUMENTATION_CMD_NOTE2%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_CMD_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_PROCESSES_PROC) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_PROCESS,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% 

> %RSHELL_COMMAND_DOCUMENTATION_PROCESS_OPERATIONS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_PROCESS_CONSOLERESULT%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_PROCESS_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_PROCESSES_PSH) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_POWERSHELL,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_PSH_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_PSH_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_PSH_TEXT1%

> %RSHELL_COMMAND_DOCUMENTATION_PSH_TEXT2%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_PSH_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_PROCESSES_RSTRT) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_RESTART,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_RESTART_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_RESTART_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_ELEM_ELEM) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_ELEM,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT3%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_ELEM_MOVE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_ELEM_MOVE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_MOVE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_MOVE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_MOVE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_ELEM_VALUE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_ELEM_VALUE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_VALUE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_VALUE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
  
> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_VALUE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_ELEM_WRITE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_ELEM_WRITE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_WRITE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_WRITE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_WRITE_TEXT1%

> %RSHELL_COMMAND_DOCUMENTATION_WIN_ELEM_WRITE_TEXT2%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_WAIT) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_WAIT,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_WAIT_ACTI) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_WAIT_ACTIVE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_ACTIVE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_ACTIVE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_ACTIVE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_WAIT_DEACTI) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_WAIT_DEACTIVE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_DEACTIVE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_DEACTIVE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_DEACTIVE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_WAIT_CLOSE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_WAIT_CLOSE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_CLOSE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_CLOSE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WIN_WAIT_CLOSE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_ACTIVATE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_ACTIVATE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_ACTIVATE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_ACTIVATE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WIN_ACTIVATE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_RESTORE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_RESTORE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_RESTORE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_RESTORE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WIN_RESTORE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_TITLE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_TITLE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_TITLE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_TITLE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WIN_TITLE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_CLOSE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_CLOSE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_CLOSE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_CLOSE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WIN_CLOSE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_SHOW) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_SHOW,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_SHOW_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_SHOW_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WIN_SHOW_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_MAXIMIZE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_MAXIMIZE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_MAXIMIZE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_MAXIMIZE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WIN_MAXIMIZE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_MINIMIZE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_MINIMIZE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_MINIMIZE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_MINIMIZE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WIN_MINIMIZE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_WIN_HIDE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WIN_HIDE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WIN_HIDE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WIN_HIDE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WIN_HIDE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_DIR_DOWNLOAD) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_DOWNLOADWITHOUTASK,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_DIRECTIVE_DOCUMENTATION_DWASK_SYNTAX%

%RSHELL_DIRECTIVE_DOCUMENTATION_DWASK_DESCRIPTION%

%RSHELL_TEXT_WORKING_ONLY_IN_BATCH_MODE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_VOICESP_VOLUME) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_VOICESP_VOLUME,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_VOICESP_VOLUME_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_VOICESP_VOLUME_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_VOICESP_VOLUME_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_VOICESP_VOLUME_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_VOICESP_SAY) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_VOICESP_SAY,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_VOICESP_SAY_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_VOICESP_SAY_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_VOICESP_SAY_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_VOICESP_SPEED) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_VOICESP_SPEED,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_VOICESP_SPEED_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_VOICESP_SPEED_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_VOICESP_SPEED_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_VOICESP_SPEED_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_NETWORK_SCAN) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_NETWORK_SCAN,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_NETWORK_SCAN_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_NETWORK_SCAN_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_CMDS_NETWORK_VKAPI) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_VKAPI,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_VKAPI_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_VKAPI_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_VKAPI_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_VKAPI_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_NETWORK_POST) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_POST,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_POST_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_POST_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_POST_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_ATTR_GET) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_ATTR_GET,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ATTR_GET_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_ATTR_GET_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_ATTR_GET_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_ATTR_GET_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_ATTR_SET) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_ATTR_SET,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ATTR_SET_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_ATTR_SET_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_ATTR_SET_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_CD) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_CD, 
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_CD_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_CD_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_CD_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_CD_DOT) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_CD_DOT,
	(
%RSHELL_COMMAND_DOCUMENTATION_CD_DOT_SYNTAX1_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_CD_DOT_SYNTAX1%
%RSHELL_COMMAND_DOCUMENTATION_CD_DOT_SYNTAX2_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_CD_DOT_SYNTAX2%
%RSHELL_COMMAND_DOCUMENTATION_CD_DOT_SYNTAX3_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_CD_DOT_SYNTAX3%

%RSHELL_COMMAND_DOCUMENTATION_CD_DOT_DESCRIPTION%

%RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_CD_DOT_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_DIR) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_DIR,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DIR_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_DIR_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_DIR_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_DRIVE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_DRIVE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DRIVE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_DRIVE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_DRIVE_GET) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_DRIVE_GET,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% 

%RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_TEXT2_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_EXAMPLE1%

> %RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_TEXT3_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_EXAMPLE2%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_DRIVE_GETM) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_DRIVE_GET_MEMORY,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_MEMORY_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_MEMORY_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_DRIVE_GET_MEMORY_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_INI_WRITE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_INI_WRITE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INI_WRITE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_INI_WRITE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_INI_WRITE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_INI_READ) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_INI_READ,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INI_READ_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_INI_READ_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_INI_READ_CONSOLERESULT%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_INI_READ_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_INI_DELETE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_INI_DELETE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INI_DELETE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_INI_DELETE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_INI_DELETE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_PROG) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_PROG,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_PROG_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_PROG_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_DOWNLOAD) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_DOWNLOAD,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DOWNLOAD_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_DOWNLOAD_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_DOWNLOAD_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_TIME_SET) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_TIME_SET,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_SET_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_SET_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_SET_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
  
> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_SET_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_TIME_GET) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_TIME_GET,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_GET_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_GET_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_TIME_GET_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_MOVE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_MOVE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_MOVE_DIR) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_MOVE_DIR,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_DIR_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_DIR_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

%RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_DIR_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_MOVE_DIR_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_GET_LABEL) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_GET_LABEL,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_GET_LABEL_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_GET_LABEL_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_FILE_GET_LABEL_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_GET_LABEL_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_ADD_LABEL) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_ADD_LABEL,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_ADD_LABEL_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_ADD_LABEL_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_ADD_LABEL_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_READ) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_READ,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_READ_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_READ_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_READ_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_READ_LINE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_READ_LINE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_READ_LINE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_READ_LINE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_READ_LINE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_APPEND) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_APPEND,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_APPEND_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_APPEND_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_APPEND_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_CREATE_DIR) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_CREATE_DIR,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_CREATE_DIR_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_CREATE_DIR_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_CREATE_DIR_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_DELETE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_DELETE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_DELETE_DIR) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_DELETE_DIR,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_DIR_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_DIR_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_DELETE_DIR_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_COPY) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_COPY,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_COPY_DIR) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_COPY_DIR,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_DIR_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_DIR_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_COPY_DIR_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_SIZE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_SIZE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_SIZE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_SIZE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_SIZE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_TRANSP) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_TRANSPARENT,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_TRANSPARENT_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_TRANSPARENT_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_TRANSPARENT_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_SOUND_SET) {
	MsgBox, 1, % RSHELL_COMMAND_NAME_SOUND_SET,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% 

%RSHELL_COMMAND_DOCUMENTATION_SOUND_SET_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_SOUND_SET_TEXT1%
	)
	IfMsgBox, Cancel
		return
	
	MsgBox, 0, % RSHELL_COMMAND_NAME_SOUND_SET,
	(
> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
  
  %RSHELL_COMMAND_DOCUMENTATION_SOUND_SET_TEXT2%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLES_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_SOUND_SET_EXAMPLES%
	)
	return
}

if (TV_CLICKED == TV_CMDS_DIALOG_MSGBOX) {
	MsgBox, 1, % RSHELL_COMMAND_NAME_MSGBOX,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_MSGBOX_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_MSGBOX_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_MSGBOX_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT3%
	)
	IfMsgBox, Cancel
		return
	
	MsgBox, 1, % RSHELL_COMMAND_NAME_MSGBOX,
	(
> %RSHELL_COMMAND_DOCUMENTATION_MSGBOX_OPTIONS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_MSGBOX_OPTIONS%

> %RSHELL_COMMAND_DOCUMENTATION_MSGBOX_ADDITION_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_MSGBOX_ADDITION%

> %RSHELL_COMMAND_DOCUMENTATION_MSGBOX_ADVICE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_MSGBOX_ADVICE%
	)
	IfMsgBox, Cancel
		return
	
	MsgBox, 0, % RSHELL_COMMAND_NAME_MSGBOX,
	(
> %RSHELL_COMMAND_DOCUMENTATION_MSGBOX_CLOSE_BUTTON_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_MSGBOX_CLOSE_BUTTON%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_MSGBOX_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_DISPLAY_TRAYTIP) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_TRAYTIP,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_TRAYTIP_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_TRAYTIP_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_TRAYTIP_OPTIONS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_TRAYTIP_OPTIONS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT3%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_TRAYTIP_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_TRAYTIP_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_DISPLAY_MONITOR) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_DISPLAY,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DISPLAY_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_DISPLAY_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_DISPLAY_ACTIONS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_DISPLAY_ACTIONS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLES_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_DISPLAY_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_SOUND_BEEP) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_SOUND_BEEP,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_SOUND_BEEP_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_SOUND_BEEP_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_SOUND_BEEP_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_SOUND_BEEP_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_0) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.0", % RSHELL_UPDINFO_2_0
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_1) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.1", % RSHELL_UPDINFO_2_1
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_2) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.2", % RSHELL_UPDINFO_2_2
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_3) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.3", % RSHELL_UPDINFO_2_3
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_4) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.4", % RSHELL_UPDINFO_2_4
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_5) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.5", % RSHELL_UPDINFO_2_5
 	return
}

if (TV_CLICKED == TV_UPDATELIST_2_6) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.6", % RSHELL_UPDINFO_2_6
	return
}

if (TV_CLICKED == TV_CMDS_SOUND_GET) {
	MsgBox, 1, % RSHELL_COMMAND_NAME_SOUND_GET,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% 

%RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_PARAMETERS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_PARAMETERS%
	)
	IfMsgBox, Cancel
		return
	
	MsgBox, 0, % RSHELL_COMMAND_NAME_SOUND_GET,
	(
> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
  
> %RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_TEXT1_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_TEXT2%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLES_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_SOUND_GET_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_SOUND_PLAY) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_SOUND_PLAY,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_SOUND_PLAY_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_SOUND_PLAY_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_PARAMETERS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_SOUND_PLAY_PARAMETERS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTES_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_SOUND_PLAY_NOTES%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_SOUND_PLAY_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_REG_WRITE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_REG_WRITE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_REG_WRITE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_REG_WRITE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_PARAMETERS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_REG_WRITE_PARAMETERS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTES_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_REG_WRITE_NOTES%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLES_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_REG_WRITE_EXAMPLE%
	)
}

if (TV_CLICKED == TV_CMDS_REG_READ) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_REG_READ,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_REG_READ_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_REG_READ_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_PARAMETERS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_REG_READ_PARAMETERS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTES_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_REG_READ_NOTES%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_REG_READ_EXAMPLE%
	)
}

if (TV_CLICKED == TV_CMDS_REG_DELETE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_REG_DELETE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_REG_DELETE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_REG_DELETE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_PARAMETERS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_REG_DELETE_PARAMETERS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_REG_DELETE_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_REG_DELETE_EXAMPLE%
	)
}

if (TV_CLICKED == TV_CMDS_DISPLAY_SCREENS) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_SCREENSHOT,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% 

%RSHELL_COMMAND_DOCUMENTATION_SCREENSHOT_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_SCREENSHOT_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_DISPLAY_BRIGHT) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_BRIGHTNESS,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_BRIGHTNESS_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_BRIGHTNESS_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT3%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_BRIGHTNESS_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLES_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_BRIGHTNESS_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_ADDON) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_ADDON,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ADDON_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_ADDON_DESCRIPTION%

%RSHELL_COMMAND_DOCUMENTATION_ADDON_NOTES%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_ADDONS_QUICKSTART) {
	MsgBox, 0, % RSHELL_TV_ADDONS " > " RSHELL_TV_ADDONS_QUICKSTART, % RSHELL_ADDONSINFO_QUICKSTART_TEXT
	return
}

if (TV_CLICKED == TV_ADDONS_CREATING) {
	MsgBox, 1, % RSHELL_TV_ADDONS " > " RSHELL_TV_ADDONS_CREATING, % RSHELL_ADDONSINFO_CREATING_TEXT1
	IfMsgBox, Cancel
		return
	
	MsgBox, 0, % RSHELL_TV_ADDONS " > " RSHELL_TV_ADDONS_CREATING, % RSHELL_ADDONSINFO_CREATING_TEXT2
	return
}

if (TV_CLICKED == TV_ADDONS_COMPILING) {
	MsgBox, 0, % RSHELL_TV_ADDONS " > " RSHELL_TV_ADDONS_COMPILING, % RSHELL_ADDONSINFO_COMPILING_TEXT
	return
}

if (TV_CLICKED == TV_ADDONS_DELETE) {
	MsgBox, 0, % RSHELL_TV_ADDONS " > " RSHELL_TV_ADDONS_DELETE, % RSHELL_ADDONSINFO_DELETE_TEXT
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_7) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.7", % RSHELL_UPDINFO_2_7
	return
}

if (TV_CLICKED == TV_CMDS_NETWORK_CFD) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_CREATEFORMDATA,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% 

%RSHELL_COMMAND_DOCUMENTATION_CREATEFORMDATA_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_PARAMETERS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_CREATEFORMDATA_PARAMETERS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_CREATEFORMDATA_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_PROCESSES_RAND) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_RANDOM,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_RANDOM_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_RANDOM_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_RANDOM_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_NETWORK_REQUEST) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_REQUEST,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_REQUEST_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_REQUEST_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_REQUEST_METHODS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_REQUEST_METHODS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_REQUEST_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_COMMAND_DOCUMENTATION_REQUEST_TEXT1_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_REQUEST_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_8) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.8", % RSHELL_UPDINFO_2_8
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_COMPILE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_COMPILE,
	(
%RSHELL_COMMAND_DOCUMENTATION_COMPILE_FIRST_PRE_SYNTAX_PREFIX% %RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_COMPILE_SYNTAX1%
%RSHELL_COMMAND_DOCUMENTATION_COMPILE_SECOND_PRE_SYNTAX_PREFIX% %RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_COMPILE_SYNTAX2%

%RSHELL_COMMAND_DOCUMENTATION_COMPILE_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_COMPILE_PARAMETER_COMPILE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_COMPILE_PARAMETER_COMPILE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_COMPILE_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_9) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.9", % RSHELL_UPDINFO_2_9
	return
}

if (TV_CLICKED == TV_CMDS_ENV_UPDATE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_ENV_UPDATE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ENV_UPDATE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_ENV_UPDATE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_CMDS_ENV_GET) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_ENV_GET,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ENV_GET_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_ENV_GET_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_ENV_GET_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_ENV_SET) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_ENV_SET,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ENV_SET_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_ENV_SET_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_ENV_SET_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_9_1) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.9.1", % RSHELL_UPDINFO_2_9_1
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_10) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.10", % RSHELL_UPDINFO_2_10
	return
}

if (TV_CLICKED == TV_CMDS_FILE_FIND) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_SEARCH,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_FILE_PATTERN_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_FILE_PATTERN%

> %RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_MODES_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_MODES%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_SEARCH_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_GET) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_GET,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_GET_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_GET_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_FILE_GET_ARRAY_WRITE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_GET_ARRAY_WRITE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT3%

%RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_GET_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_11) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.11", % RSHELL_UPDINFO_2_11
	return
}

if (TV_CLICKED == TV_ABOUTPROG_TEXT) {
	gosub aboutprog
}

if (TV_CLICKED == TV_UPDATELIST_2_12) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.12", % RSHELL_UPDINFO_2_12
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_PAUSE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_PAUSE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_PAUSE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_PAUSE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT3%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_CMDLIST) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_CMDLIST,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_CMDLIST_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_CMDLIST_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOSE_RESULT_TEXT2%
	)
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_13) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.13", % RSHELL_UPDINFO_2_13
	return
}

if (TV_CLICKED == TV_CMDS_KEYBOARD_INPUT) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_KEYBOARD_INPUT,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_ARGUMENTS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_ARGUMENTS%

> %RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_OPTIONS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_OPTIONS%

> %RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_ENDKEYS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_ENDKEYS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_KEYBOARD_INPUT_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_VAR_CONSOLE_SPACE) {
	MsgBox, 0, % RSHELL_TV_VAR " > " RSHELL_VARNAME_CONSOLE_SPACE, % RSHELL_VARINFO_CONSOLE_SPACE
	return
}

if (TV_CLICKED == TV_CMDS_PROCESSES_PROCF) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_PROCESS_SEARCH,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_PARAMETER_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_PARAMETER%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_PROCESS_FIND_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_WOUTPUT) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_WOUTPUT,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_OUTPUT_PARAM_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_OUTPUT_PARAM%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_NOTE%

> %RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_EXAMPLE_OUTPUT_TO_VARIABLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_EXAMPLE_OUTPUT_TO_VARIABLE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_WOUTPUT_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_14) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.14", % RSHELL_UPDINFO_2_14
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_OUTPUTL) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_OUTPUTL,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ASYNC_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_OUTPUTL_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOSE_RESULT_TEXT2%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_OUTPUTL_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_UPDLIST) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_UPDATELIST,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_UPDATELIST_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_UPDATELIST_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_15) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.15", % RSHELL_UPDINFO_2_15
	return
}

if (TV_CLICKED == TV_CMDS_FILE_OUTPUT) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_OUTPUT,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_OUTPUT_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_OUTPUT_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOSE_RESULT_TEXT2%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_OUTPUT_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_ENCODING) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_ENCODING,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_ENCODING_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_ENCODING_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_FILE_ENCODING_PARAMETER_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_ENCODING_PARAMETER%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOSE_RESULT_TEXT2%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_ENCODING_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_RECYCLE) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_RECYCLE,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_RECYCLE_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_RECYCLE_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_RECYCLE_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_RECYCLE_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_RECYCLE_EM) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_RECYCLE_EMPTY,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTAITON_RECYCLE_EMPTY_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_RECYCLE_EMPTY_DESCRIPTION%

> %RSHELL_COMMAND_DOCUMENTATION_RECYCLE_EMPTY_PARAMETER_PREFIX%:
  %RSHELL_COMMAND_DOCUMENTATION_RECYCLE_EMPTY_PARAMETER%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_RECYCLE_EMPTY_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_RECYCLE_EMPTY_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_READ_RAW) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_READ_RAW,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_READ_RAW_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_READ_RAW_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
  
> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_READ_RAW_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_WRITE_RAW) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_FILE_WRITE_RAW,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_FILE_WRITE_RAW_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_FILE_WRITE_RAW_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_FILE_WRITE_RAW_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_FILE_ENC_BASE64) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_ENC_BASE64,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ENC_BASE64_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_ENC_BASE64_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_ENC_BASE64_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_DIALOG_INPUTBOX) {
	MsgBox, 1, % RSHELL_COMMAND_NAME_DIALOG_INPUTBOX,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_INPUTBOX_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_INPUTBOX_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_PARAMETERS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_INPUTBOX_PARAMETERS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	IfMsgBox, Cancel
		return
	
	MsgBox, 0, % RSHELL_COMMAND_NAME_DIALOG_INPUTBOX,
	(
> %RSHELL_COMMAND_DOCUMENTATION_INPUTBOX_TEXT1_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_INPUTBOX_TEXT2%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_INPUTBOX_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_DISPLAY_STXTON) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_STEXTON,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_STEXTON_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_STEXTON_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_PARAMETERS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_STEXTON_PARAMETERS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_STEXTON_NOTES%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLES_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_STEXTON_EXAMPLES%
	)
	return
}

if (TV_CLICKED == TV_CMDS_DISPLAY_STXTOFF) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_STEXTOFF,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_STEXTOFF_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_STEXTOFF_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_CMDS_DISPLAY_TOOLTIP) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_TOOLTIP,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_TOOLTIP_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_TOOLTIP_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_PARAMETERS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_TOOLTIP_PARAMETERS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_TOOLTIP_NOTES%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_TOOLTIP_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_DO) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_DO,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_DO_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_DO_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_PARAMETERS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_DO_PARAMETERS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT4%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_DO_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_OUTCON) {
	MsgBox, 0, % StrReplace(RSHELL_COMMAND_INTERNAL_OUTCON_ERROR, " || ", " " RSHELL_TEXT_REPLACE_WORD_OR " "),
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_OUTCON_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_OUTCON_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_PARAMETERS_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_OUTCON_PARAMETERS%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT4%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_OUTCON_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_16) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.16", % RSHELL_UPDINFO_2_16
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_16_1) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.16.1", % RSHELL_UPDINFO_2_16_1
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_16_2) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.16.2", % RSHELL_UPDINFO_2_16_2
	return
}

if (TV_CLICKED == TV_UDPATELIST_2_16_3) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.16.3", % RSHELL_UPDINFO_2_16_3
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_16_4) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.16.4", % RSHELL_UPDINFO_2_16_4
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_16_5) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.16.5",  % RSHELL_UPDINFO_2_16_5
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_17) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.17",  % RSHELL_UPDINFO_2_17
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_LEARN) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_TUTORIAL,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_TUTORIAL_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_TUTORIAL_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_TUTORIAL_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_ASYNC) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_ASYNC,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_ASYNC_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_ASYNC_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_ASYNC_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%
	)
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_18) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.18", % RSHELL_UPDINFO_2_18
	return
}

if (TV_CLICKED == TV_CMDS_CONSOLE_SVC) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_SVC,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_SVC_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_SVC_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_NOTE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_SVC_NOTE%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOSE_RESULT_TEXT2%
  
> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_SVC_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_CMDS_NETWORK_VKAPIR) {
	MsgBox, 0, % RSHELL_COMMAND_NAME_VKAPI_RESET,
	(
%RSHELL_FORMAT_COMMAND_DOCUMENTATION_SYNTAX_PREFIX% %RSHELL_COMMAND_DOCUMENTATION_VKAPI_RESET_SYNTAX%

%RSHELL_COMMAND_DOCUMENTATION_VKAPI_RESET_DESCRIPTION%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_PREFIX%
  %RSHELL_FORMAT_COMMAND_DOCUMENTATION_CONSOLE_RESULT_TEXT1%

> %RSHELL_FORMAT_COMMAND_DOCUMENTATION_EXAMPLE_PREFIX%
  %RSHELL_COMMAND_DOCUMENTATION_VKAPI_RESET_EXAMPLE%
	)
	return
}

if (TV_CLICKED == TV_UPDATELIST_2_18_1) {
	MsgBox, 0, % RSHELL_TV_UPDATELIST_WORD_VERSION " 2.18.1", % RSHELL_UPDINFO_2_18_1
	return
}
return

CheckTV:
IfWinNotExist, ahk_id %docswid%
{
	settimer, CheckTV, Off
	return
}

IfWinNotActive, ahk_id %docswid%
	return

if (GetKeyState("Enter", "D")) {
	Send, {Right}
	TV_CLICKED := TV_GetSelection()
	gosub open_docs
	KeyWait, Enter, U
}
return

hidetrayicon:
Menu, Tray, NoIcon
try settimer, hidetrayicon, off
return

aboutprog:
justgen = 1
executeCMD(RSHELL_COMMAND_NAME_DOCUMENTATION)
justgen := 0, i := 0

for k, v in tvs
{
	if (k == string.up(k))
		i++
}

info1 := StrReplace(RSHELL_ABOUTPROG_TEXT_1, "%1", version)
info2 := StrReplace(RSHELL_ABOUTPROG_TEXT_2, "%1", i)

Gui, about:Destroy
Gui, about:Color, White
Gui, about:-MinimizeBox +hwndaboutwid +AlwaysOnTop

Gui, about:Font, C4169E1 S13 bold, Segoe UI
Gui, about:Add, Text, x12 w500 +Center, Renux Shell
Gui, about:Font, CDefault S10 norm, Segoe UI
Gui, about:Add, Link, x12 w500, 
(
%info1%
%RSHELL_ABOUTPROG_WORD_DEVELOPED% <a href="http://vk.com/strdev">Streleckiy Development</a>.

%info2%

)

Gui, about:Add, Button, x12 gAboutGuiEscape, % RSHELL_ABOUTPROG_BUTTON_CLOSE
Gui, about:Show,, % RSHELL_ABOUTPROG_WINDOW_TITLE
WinWaitClose, ahk_id %aboutwid%

aboutguiescape:
Gui, about:destroy
return

checkRSWin:
WinGet, WinList, List

loop, % WinList
{
	rswin_window_id := WinList%A_Index%
	WinGet, rswin_ProcessPath, ProcessPath, ahk_id %rswin_window_id%
	if ((CurrentProcessPath == rswin_ProcessPath) && (rswin_window_id != mainwid) && (rswin_window_id != dbgwid)) {
		WinGetText, result, ahk_id %rswin_window_id%
		WinKill, ahk_id %rswin_window_id%
		
		loop, parse, result, `r`n
		{
			if ((trim(A_LoopField) == "ОК") || (trim(A_LoopField) == "OK")) {
				result := string.right(result, string.len(result)-3)
				break
			}
		}
		
		if (trim(result) != "")
			console.writeln(trim(trim(result, "`n")))
	}
}
return

eulaguiescape:
eulaguiclose:
exitapp

EulaCheckBox:
Gui, eula:submit, nohide

if EulaCheckBox
	GuiControl, eula:enable, next
else
	GuiControl, eula:disable, next

return

EulaNext:
IniWrite, 1, % config, eula, agree
agree_eula := 1
Gui, eula:destroy
goto consoleinit
return

learn:
ifnotexist, %root%\rshell.exe
{
	MsgBox, 0, % title, % RSHELL_LEARN_TEXT_ERROR_TEXT1
	return
}

Gui, learn:destroy
Gui, learn:Default
Gui, learn:+hwndlearnwid -MinimizeBox +OwnDialogs
Gui, learn:Color, White
Gui, learn:Font, S12 CDefault bold, Segoe UI

if A_IsCompiled
	Gui, learn:Add, Picture, x204 y19 w66 h66 Icon1 vC1, %A_ScriptFullPath%
else
	Gui, learn:Add, Picture, x204 y19 w66 h66 vC1, icon.ico

Gui, learn:Add, Text, x12 y99 w450 h30 +Center vc2, % RSHELL_LEARN_TEXT_TITLE
Gui, learn:Font, S9 CDefault norm, Segoe UI
Gui, learn:Add, Text, x12 y139 w450 h160 vc3 +Center, % RSHELL_LEARN_TEXT_SUBTITLE
Gui, learn:Add, Button, x152 y329 w170 h30 gLearnNext vc4, % RSHELL_LEARN_TEXT_BUTTON_NEXT
Gui, learn:Show, w479 h382, % RSHELL_LEARN_TEXT_PREFIX_LEARN_WORD " Renux Shell (0%)"

learn_page = 0
return

LearnGuiEscape:
LearnGuiClose:
ExitApp
return

LearnNext:
learn_page += 1

if (learn_page > 41) {
	Gui, learn:destroy
	processCMD(RSHELL_COMMAND_NAME_DOCUMENTATION)
	exitapp
}

WinSetTitle, ahk_id %learnwid%,, % RSHELL_LEARN_TEXT_PREFIX_LEARN_WORD " Renux Shell (" round(percent(learn_page, 41)) "%)"

if (learn_page == 1) {
	GuiControl,, c2, % RSHELL_TV_START_INFO
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_1
	return
}

if (learn_page == 2) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_FIRST_STEPS
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_2
	return
}

if (learn_page == 3) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_SYNTAX_AND_FIRST_COMMANDS
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_3
	return
}

if (learn_page == 4) {
	GuiControl, disable, c4 
	GuiControl, move, c3, h60
	
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_4
	GuiControl,, c2, % RSHELL_LEARN_TEXT_FIRST_COMMANDS
	Gui, Add, Edit, x12 y209 w450 h20 vc5, 
	
	settimer, CheckLearnPage4, 300
	return
}

if (learn_page == 5) {
	SetTimer, checkLearnPage4, Off
	
	GuiControl, move, c3, h160
	GuiControl, disable, c4
	GuiControl,, c3, % StrReplace(RSHELL_LEARN_TEXT_PROCESS_CMD, "%1", c5)
	GuiControl, hide, c5
	
	RunWait, %A_ScriptFullPath% "%c5%;%RSHELL_COMMAND_NAME_CMD% pause",, UseErrorLevel
	if (ErrorLevel) {
		MsgBox, 16, % title, % RSHELL_LEARN_TEXT_ERROR_TEXT2
		return
	}
	
	GuiControl, enable, c4
	GuiControl,, c2, % RSHELL_LEARN_TEXT_SYNTAX_FEATURES_1
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_5
	return
}

if (learn_page == 6) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_SYNTAX_FEATURES_2
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_6
	return
}

if (learn_page == 7) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_SYNTAX_FEATURES_3
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_7
	return
}

if (learn_page == 8) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_SYNTAX_FEATURES_4
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_8
	return
}

if (learn_page == 9) {
	GuiControl, move, c3, h60
	GuiControl,, c2, % RSHELL_LEARN_TEXT_SYNTAX_PRACTICE
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_9
	GuiControl,, c5, % RSHELL_LEARN_TEXT_AUTOWRITE_PAGE_9
	GuiControl, show, c5
	
	settimer, CheckLearnPage9, 300
	return
}

if (learn_page == 10) {
	settimer, checkLearnPage9, off
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_10
	GuiControl,, c5, 
	GuiControl, show, c5
	settimer, checkLearnPage10, 300
	return
}

if (learn_page == 11) {
	settimer, checkLearnPage10, off
	ToolTip
	GuiControl, move, c3, h160
	GuiControl, hide, c5
	GuiControl,, c2, % RSHELL_LEARN_TEXT_USAGE_TEXT
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_11
	
	return
}

if (learn_page == 12) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_BUILTIN_VARS_1
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_12
	return
}

if (learn_page == 13) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_BUILTIN_VARS_2
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_13
	return
}

if (learn_page == 14) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_USEFUL_SYNTAX_FUNCTIONS
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_14
	return
}

if (learn_page == 15) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_ESCAPE_SEQUENCES
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_15
	return
}

if (learn_page == 16) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_PAGE_BATCH_FILES
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_16
	return
}

if (learn_page == 17) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_COMMANDS_FOR_BATCH_FILES
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_17
	return
}

if (learn_page == 18) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_LOOPS_1
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_18
	return
}

if (learn_page == 19) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_LOOPS_2
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_19
	return
}

if (learn_page == 20) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_LOOPS_3
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_20
	return
}

if (learn_page == 21) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_ARRAY_1
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_21
	return
}

if (learn_page == 22) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_ARRAY_2
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_22
	return
}

if (learn_page == 23) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_LIST_OF_VARS_AND_ARRAYS
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_23
	return
}

if (learn_page == 24) {
	GuiControl, learn:disable, c4
	GuiControl,, c2, % RSHELL_LEARN_TEXT_PRACTICE_LOOPS
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_24
	
	FileDelete, %root%\practice.rs
	FileAppend,, %root%\practice.rs
	Run, notepad.exe "%root%\practice.rs",,, NOTEPADPID
	WinWait, ahk_pid %notepadpid%
	
	loop, 15
		needtext := needtext RSHELL_LEARN_TEXT_NEED_TEXT_PAGE_24_LOW
	
	FileGetTime, timeNTPD, %root%\practice.rs, M
	oTimeNTPD := timeNTPD
	
	practice_loop_loop1:
	loop {
		ToolTip
		sleep 100
		process, exist, % notepadpid
		if (ErrorLevel != notepadpid) {
			Run, notepad.exe "%root%\practice.rs",,, NOTEPADPID
			WinWait, ahk_pid %notepadpid%
		}
		
		FileGetTime, timeNTPD, %root%\practice.rs, M
		if (timeNTPD != otimeNTPD) {
			otimeNTPD := timeNTPD
			fileread, codepractice, %root%\practice.rs
			ToolTip, % RSHELL_LEARN_TEXT_PRACTICE_LOOP_LOOP1_TOOLTIP
			
			loop, parse, codepractice, `r`n
			{
				if (string.left(trim(A_LoopField), 2) == "//") {
					MsgBox, 16, % RSHELL_LEARN_TEXT_PREFIX_LEARN_WORD, % RSHELL_LEARN_TEXT_DONT_USE_COMMENTS_IN_PRACTICE
					goto practice_loop_loop1
				}
			}
			
			if (trim(codepractice) == "") {
				ToolTip, % RSHELL_LEARN_TEXT_ALGORITHM_IS_EMPTY
				sleep 2000
				ToolTip
				continue
			}
			
			loop {
				ifexist, %root%\script.rs
				{
					filedelete, %root%\script.rs
					if errorlevel
					{
						ToolTip, % StrReplace(RSHELL_LEARN_TEXT_WAIT_REWRITING_FILE, "%1", root "\script.rs")
						RunWait, cmd.exe /c del "%root%\script.rs",, UseErrorLevel Hide
					}
				}
				break
			}
			
			loop {
				ifexist, %root%\log.txt
				{
					filedelete, %root%\log.txt
					if errorlevel
					{
						ToolTip, % StrReplace(RSHELL_LEARN_TEXT_WAIT_REWRITING_FILE, "%1", root "\log.txt")
						RunWait, cmd.exe /c del "%root%\log.txt",, UseErrorLevel Hide
					}
				}
				break
			}
			
			loop {
				fileappend, %RSHELL_COMMAND_NAME_WOUTPUT% %A_AppData%\by.strdev\log.txt`n%codepractice%, %A_AppData%\by.strdev\script.rs
				if errorlevel
				{
					ToolTip, % RSHELL_LEARN_TEXT_PREPARING_TO_EXECUTE
				}
				break
			}
			
			Run, cmd.exe /c start /wait "%A_ScriptFullPath%" "%A_AppData%\by.strdev\script.rs",, UseErrorLevel Hide, PID
			if (errorlevel) {
				MsgBox, 16, % RSHELL_LEARN_TEXT_ERROR_WORD, % RSHELL_LEARN_TEXT_CANT_CHECK_PRACTICE
				GuiControl, learn:enable, c4
				return
			}
			
			time = 0
			loop {
				sleep 500
				time+=1
				process, exist, % PID
				if (errorlevel != PID)
					break
					
				if (time > 60) {
					process, close, % A_ScriptName
					break
				}
					
				Tooltip, % RSHELL_LEARN_TEXT_WAIT_PROCESS_CHECK_ALGORITHM
			}
			
			ToolTip
			fileread, renres, %A_AppData%\by.strdev\log.txt
			filedelete, %A_AppData%\by.strdev\script.rs
			
			if (trim(renres) == "") {
				ToolTip, % RSHELL_LEARN_TEXT_LOG_IS_EMPTY
				sleep 2000
				ToolTip
				continue
			}
			
			prenres 	:= Trim(StrReplace(StrReplace(renres, "`r", ""), "`n", ""))
			pneedtext	:= Trim(needText)
			
			strtmp := string.down(RSHELL_COMMAND_NAME_HIDED_LOOP)
			
			StringLower, pneedtext, pneedtext
			if (prenres == pneedtext) {
				if codepractice not contains %strtmp%
				{
					MsgBox, 48, % RSHELL_LEARN_TEXT_PREFIX_LEARN_WORD, % RSHELL_LEARN_TEXT_ERROR_PAGE_24_1
					continue
				} else {
					Process, Close, % notepadpid
					GuiControl, learn:enable, c4
					MsgBox, 64, % RSHELL_LEARN_TEXT_PREFIX_LEARN_WORD, % RSHELL_LEARN_TEXT_COMPLETE_PAGE_24
					return
				}
			} else {
				MsgBox, 16, % RSHELL_LEARN_TEXT_PREFIX_LEARN_WORD, % RSHELL_LEARN_TEXT_ERROR_PAGE_24_2
				continue
			}
		}
	}
	
	goto practice_loop_loop1
}

if (learn_page == 25) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_FORLOOP_1
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_25
	return
}

if (learn_page == 26) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_FORLOOP_2
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_26
	return
}

if (learn_page == 27) {
	GuiControl, move, c3, h60
	GuiControl, show, c5
	GuiControl, learn:, c5,
	GuiControl, learn:disable, c4
	GuiControl,, c2, % RSHELL_LEARN_TEXT_PRACTICE_FORLOOP
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_27
	
	settimer, checkLearnPage27, 400
	return
}

if (learn_page == 28) {
	settimer, checkLearnPage27, off
	ToolTip
	
	GuiControl, learn:move, c3, h160
	GuiControl, learn:hide, c5
	GuiControl, learn:, c3, % StrReplace(RSHELL_LEARN_TEXT_PAGE_28, "%1", 5)
	GuiControl, learn:disable, c4
	
	sleep 100
	ToolTip
	sleep 900
	GuiControl, learn:, c3, % StrReplace(RSHELL_LEARN_TEXT_PAGE_28, "%1", 4)
	sleep 1000
	GuiControl, learn:, c3, % StrReplace(RSHELL_LEARN_TEXT_PAGE_28, "%1", 3)
	sleep 1000
	GuiControl, learn:, c3, % StrReplace(RSHELL_LEARN_TEXT_PAGE_28, "%1", 2)
	sleep 1000
	GuiControl, learn:, c3, % StrReplace(RSHELL_LEARN_TEXT_PAGE_28, "%1", 1)
	sleep 1000
	GuiControl, learn:, c3, % StrReplace(RSHELL_LEARN_TEXT_PAGE_28, "%1", 0)
	
	random, rand1, 1, 100000
	random, rand2, 1, 100000
	random, rand3, 1, 100000
	random, rand4, 1, 100000
	random, rand5, 1, 100000
	
	filedelete, %root%\script.rs
	fileappend, 
	(
пер %RSHELL_LEARN_TEXT_FORLOOP_NAME_OF_ARRAY%[%rand1%] = abc1
пер %RSHELL_LEARN_TEXT_FORLOOP_NAME_OF_ARRAY%[%rand2%] = абв2
пер %RSHELL_LEARN_TEXT_FORLOOP_NAME_OF_ARRAY%[%rand3%] = zxc3
пер %RSHELL_LEARN_TEXT_FORLOOP_NAME_OF_ARRAY%[%rand4%] = ячс4
пер %RSHELL_LEARN_TEXT_FORLOOP_NAME_OF_ARRAY%[%rand5%] = ru and en5

%c5%

кмд pause
	), %root%\script.rs
	GuiControl, learn:, c3, % RSHELL_LEARN_TEXT_WAIT_EXECUTING_ALGORITHM
	RunWait, "%A_ScriptFullPath%" "%root%\script.rs",, UseErrorLevel
	
	GuiControl, learn:enable, c4
	goto learnnext
}

if (learn_page == 29) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_COMMENTS_IN_ALORIGHM_IN_BATCH_FILES
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_29
	return
}

if (learn_page == 30) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_HKEYS_IN_BATCH_FILES
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_30
	return
}

if (learn_page == 31) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_EMUL_KEYBOARD_IN_BATCH_FILES
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_31
	return
}

if (learn_page == 32) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_NOTES_ABOUT_VARS_1
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_32
	return
}

if (learn_page == 33) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_NOTES_ABOUT_VARS_2
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_33
	return
}

if (learn_page == 34) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_LOGIC_OPERATIONS_1
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_34
	return
}

if (learn_page == 35) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_LOGIC_OPERATIONS_2
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_35
	return
}

if (learn_page == 36) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_LOGIC_OPERATIONS_3
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_36
	return
}

if (learn_page == 37) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_RUN_PROGRAMS_AND_LINKS_1
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_37
	return
}

if (learn_page == 38) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_RUN_PROGRAMS_AND_LINKS_2
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_38
	return
}

if (learn_page == 39) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_NOTES_ABOUT_COMMANDS_AND_FUNCS_1
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_39
	return
}

if (learn_page == 40) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_NOTES_ABOUT_COMMANDS_AND_FUNCS_2
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_40
	return
}

if (learn_page == 41) {
	GuiControl,, c2, % RSHELL_LEARN_TEXT_CONCLUSION
	GuiControl,, c3, % RSHELL_LEARN_TEXT_PAGE_41
	
	isGuideLearned = 1
	IniWrite, 1, % config, isGuideLearned, flag
	return
}
return

CheckLearnPage27:
Gui, learn:Submit, NoHide
if (string.down(trim(c5)) == string.down(RSHELL_LEARN_TEXT_FORLOOP_TOOLTIP_1_NEED_WRITE)) {
	ToolTip, % RSHELL_LEARN_TEXT_FORLOOP_TOOLTIP_1_TEXT
	return
}

if (string.down(trim(c5)) == string.down(RSHELL_LEARN_TEXT_FORLOOP_TOOLTIP_2_NEED_WRITE)) {
	ToolTip, % RSHELL_LEARN_TEXT_FORLOOP_TOOLTIP_2_TEXT
	return
}

ToolTip

if (string.down(trim(c5)) == string.down(RSHELL_LEARN_TEXT_FORLOOP_TOOLTIP_NEED_WRITE)) {
	GuiControl, learn:, c3, % RSHELL_LEARN_TEXT_SUCCESSFUL_TEXT
	GuiControl, learn:enable, c4
} else {
	GuiControl, learn:, c3, % RSHELL_LEARN_TEXT_PAGE_27
	GuiControl, learn:disable, c4
}
return

CheckLearnPage4:
Gui, learn:Submit, NoHide

if (trim(string.down(c5)) == string.down(RSHELL_LEARN_TEXT_NEED_TEXT_4)) {
	GuiControl, learn:, c3, % RSHELL_LEARN_TEXT_IF_WRITED
	GuiControl, learn:enable, c4
} else {
	GuiControl, learn:, c3, % RSHELL_LEARN_TEXT_PAGE_4
	GuiControl, learn:disable, c4
}
return

CheckLearnPage9:
Gui, learn:submit, nohide

if (trim(c5) == "") {
	GuiControl, learn:, c3, % RSHELL_LEARN_TEXT_PAGE_9
	return
}

SplitCommand(c5, 1, "learnout")
GuiControl, learn:, c3, % StrReplace(StrReplace(RSHELL_LEARN_TEXT_PAGE_9_SUBTITLE_FORMAT, "%2", learnout1), "%1", learnout0)
return

CheckLearnPage10:
Gui, learn:submit, nohide

if (learn_page != 10) {
	settimer, checklearnpage10, off
	ToolTip
	return
}

if (trim(c5) == "") {
	ToolTip
	return
}

SplitCommand(c5, 10, "learnout")
WinGetPos, x, y, w, h, ahk_id %learnwid%

TMP := RSHELL_LEARN_TEXT_FORMAT_TOOLTIP
StringReplace, tmp, tmp, `%1., % learnout0, All
StringReplace, tmp, tmp, `%2., % learnout1, All
StringReplace, tmp, tmp, `%3., % learnout2, All
StringReplace, tmp, tmp, `%4., % learnout3, All
StringReplace, tmp, tmp, `%5., % learnout4, All
StringReplace, tmp, tmp, `%6., % learnout5, All
StringReplace, tmp, tmp, `%7., % learnout6, All
StringReplace, tmp, tmp, `%8., % learnout7, All
StringReplace, tmp, tmp, `%9., % learnout8, All
StringReplace, tmp, tmp, `%10., % learnout9, All
StringReplace, tmp, tmp, `%11., % learnout10, All

ToolTip, % tmp
return

executeAsync:
console.setVar(processCMD(toAsync), toAsyncVar)
toAsync 	:= ""
toAsyncVar 	:= ""
settimer, executeAsync, off
return